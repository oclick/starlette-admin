{"config":{"lang":["en","es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Starlette-Admin is a fast, beautiful and extensible administrative interface framework for Starlette/FastApi applications.</p> <p> </p> <p></p>"},{"location":"#getting-started","title":"Getting started","text":"<ul> <li>Check out the documentation.</li> <li>Try the live demo. (Source code)</li> <li>Try the several usage examples included in the /examples folder</li> <li>If you find this project helpful or interesting, please consider giving it a star \u2b50\ufe0f</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>CRUD any data with ease</li> <li>Automatic form validation</li> <li>Advanced table widget with Datatables</li> <li>Search and filtering</li> <li>Search highlighting</li> <li>Multi-column ordering</li> <li>Export data to CSV/EXCEL/PDF and Browser Print</li> <li>Authentication</li> <li>Authorization</li> <li>Manage Files</li> <li>Custom views</li> <li>Custom batch actions</li> <li>Supported ORMs<ul> <li>SQLAlchemy</li> <li>SQLModel</li> <li>MongoEngine</li> <li>ODMantic</li> <li>Custom backend (doc, example)</li> </ul> </li> <li>Internationalization</li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#pip","title":"PIP","text":"<pre><code>$ pip install starlette-admin\n</code></pre>"},{"location":"#poetry","title":"Poetry","text":"<pre><code>$ poetry add starlette-admin\n</code></pre>"},{"location":"#example","title":"Example","text":"<p>This is a simple example with SQLAlchemy model</p> <p><pre><code>from sqlalchemy import Column, Integer, String, create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom starlette.applications import Starlette\nfrom starlette_admin.contrib.sqla import Admin, ModelView\nBase = declarative_base()\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\n# Define your model\nclass Post(Base):\n__tablename__ = \"posts\"\nid = Column(Integer, primary_key=True)\ntitle = Column(String)\nBase.metadata.create_all(engine)\napp = Starlette()  # FastAPI()\n# Create admin\nadmin = Admin(engine, title=\"Example: SQLAlchemy\")\n# Add view\nadmin.add_view(ModelView(Post))\n# Mount admin to your app\nadmin.mount_to(app)\n</code></pre> Access your admin interface in your browser at http://localhost:8000/admin</p>"},{"location":"#third-party","title":"Third party","text":"<p>starlette-admin is built with other open source projects:</p> <ul> <li>Tabler</li> <li>Datatables</li> <li>jquery</li> <li>Select2</li> <li>flatpickr</li> <li>moment</li> <li>jsoneditor</li> <li>fontawesome</li> <li>TinyMCE</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome and greatly appreciated! Before getting started, please read our contribution guidelines</p>"},{"location":"advanced/base-model-view/","title":"Extending BaseModelView","text":"<p>Starlette-Admin  makes a few assumptions about the database models that it works with. If you want to implement your own database backend, and still have Starlette-Admin\u2019s model views work as expected, then you should take note of the following:</p> <ol> <li>Each model must have one field which acts as a primary key to uniquely identify instances of that model. However,    there are no restriction on the data type or the field name of the primary key field.</li> <li>Models must make their data accessible as python properties.</li> </ol> <p>If that is the case, then you can implement your own database backend by extending the BaseModelView class, and implementing the set of methods listed below.</p> <p>Let's say you've defined your models like this:</p> <pre><code>from dataclasses import dataclass\nfrom typing import List\n@dataclass\nclass Post:\nid: int\ntitle: str\ncontent: str\ntags: List[str]\n</code></pre> <p>First you need to define a new class, which derives from BaseModelView.</p> <pre><code>from starlette_admin import BaseModelView\nclass PostView(BaseModelView):\npass\n</code></pre>"},{"location":"advanced/base-model-view/#metadata","title":"Metadata","text":"<p>Set the <code>identity</code>, <code>name</code> and <code>label</code> for the new class</p> <pre><code>from starlette_admin import BaseModelView\nclass PostView(BaseModelView):\nidentity = \"post\"\nname = \"Post\"\nlabel = \"Blog Posts\"\nicon = \"fa fa-blog\"\n</code></pre> <p>Important</p> <p><code>identity</code> is used to identify the model associated to this view and should be unique.</p>"},{"location":"advanced/base-model-view/#primary-key","title":"Primary key","text":"<p>Set the <code>pk_attr</code> value which is primary key attribute name</p> <pre><code>from starlette_admin import BaseModelView\nclass PostView(BaseModelView):\npk_attr = \"id\"\n</code></pre>"},{"location":"advanced/base-model-view/#fields","title":"Fields","text":"<p>Internally, Starlette-Admin  uses custom fields all inherit from BaseField to represent each attribute. So, you need to choose the right field for each attribute or create a new field if needed. See API Reference for full list of default fields.</p> <pre><code>from starlette_admin import BaseModelView\nfrom starlette_admin import IntegerField, StringField, TagsField, TextAreaField\nclass PostView(BaseModelView):\nfields = [\nIntegerField(\"id\"),\nStringField(\"title\"),\nTextAreaField(\"content\"),\nTagsField(\"tags\"),\n]\n</code></pre>"},{"location":"advanced/base-model-view/#crud-methods","title":"CRUD methods","text":"<p>Finally, you need to implement these CRUD methods:</p> <ul> <li>count()</li> <li>find_all()</li> <li>create()</li> <li>edit()</li> <li>delete()</li> </ul>"},{"location":"advanced/base-model-view/#full-example","title":"Full example","text":"<pre><code>from dataclasses import dataclass\nfrom typing import Any, Dict, Iterable, List, Optional, Union\nfrom starlette.requests import Request\nfrom starlette_admin import IntegerField, StringField, TagsField, TextAreaField\nfrom starlette_admin.exceptions import FormValidationError\nfrom starlette_admin.views import BaseModelView\n@dataclass\nclass Post:\nid: int\ntitle: str\ncontent: str\ntags: List[str]\ndef is_valid_for_term(self, term):\nreturn (\nstr(term).lower() in self.title.lower()\nor str(term).lower() in self.content.lower()\nor any([str(term).lower() in tag.lower() for tag in self.tags])\n)\ndef update(self, data: Dict):\nfor key, value in data.items():\nif hasattr(self, key):\nsetattr(self, key, value)\ndb: Dict[int, Post] = dict()\nnext_id = 1\ndef filter_values(values: Iterable[Post], term):\nfiltered_values = []\nfor value in values:\nif value.is_valid_for_term(term):\nfiltered_values.append(value)\nreturn filtered_values\nclass PostView(BaseModelView):\nidentity = \"post\"\nname = \"Post\"\nlabel = \"Blog Posts\"\nicon = \"fa fa-blog\"\npk_attr = \"id\"\nfields = [\nIntegerField(\"id\"),\nStringField(\"title\"),\nTextAreaField(\"content\"),\nTagsField(\"tags\"),\n]\nsortable_fields = (\"id\", \"title\", \"content\")\nsearch_builder = False\nasync def count(\nself,\nrequest: Request,\nwhere: Union[Dict[str, Any], str, None] = None,\n) -&gt; int:\nvalues = list(db.values())\nif where is not None:\nvalues = filter_values(values, where)\nreturn len(values)\nasync def find_all(\nself,\nrequest: Request,\nskip: int = 0,\nlimit: int = 100,\nwhere: Union[Dict[str, Any], str, None] = None,\norder_by: Optional[List[str]] = None,\n) -&gt; List[Any]:\nvalues = list(db.values())\nif order_by is not None:\nassert len(order_by) &lt; 2, \"Not supported\"\nif len(order_by) == 1:\nkey, dir = order_by[0].split(maxsplit=1)\nvalues.sort(key=lambda v: getattr(v, key), reverse=(dir == \"desc\"))\nif where is not None and isinstance(where, (str, int)):\nvalues = filter_values(values, where)\nif limit &gt; 0:\nreturn values[skip : skip + limit]\nreturn values[skip:]\nasync def find_by_pk(self, request: Request, pk):\nreturn db.get(int(pk), None)\nasync def find_by_pks(self, request: Request, pks):\nreturn [db.get(int(pk)) for pk in pks]\nasync def validate_data(self, data: Dict):\nerrors = {}\nif data[\"title\"] is None or len(data[\"title\"]) &lt; 3:\nerrors[\"title\"] = \"Ensure title has at least 03 characters\"\nif data[\"tags\"] is None or len(data[\"tags\"]) &lt; 1:\nerrors[\"tags\"] = \"You need at least one tag\"\nif len(errors) &gt; 0:\nraise FormValidationError(errors)\nasync def create(self, request: Request, data: Dict):\nawait self.validate_data(data)\nglobal next_id\nobj = Post(id=next_id, **data)\ndb[next_id] = obj\nnext_id += 1\nreturn obj\nasync def edit(self, request: Request, pk, data: Dict):\nawait self.validate_data(data)\ndb[int(pk)].update(data)\nreturn db[int(pk)]\nasync def delete(self, request: Request, pks: List[Any]) -&gt; Optional[int]:\ncnt = 0\nfor pk in pks:\nvalue = await self.find_by_pk(request, pk)\nif value is not None:\ndel db[int(pk)]\ncnt += 1\nreturn cnt\n</code></pre>"},{"location":"advanced/custom-field/","title":"Custom Field","text":"<p>Starlette-Admin has a lot of built-in fields available. But you can override or create your own field according to your need.</p> <p>Important</p> <p>Before creating a new field, try first to extend the existing ones. They are flexible enough to fit most use cases.</p> <p>The first step is to define a new class, which derives from BaseField or any others fields to customize it</p> <pre><code>from starlette_admin import BaseField\nfrom dataclasses import dataclass\n@dataclass\nclass CustomField(BaseField):\npass\n</code></pre>"},{"location":"advanced/custom-field/#list-rendering","title":"List Rendering","text":"<p>Starlette-Admin use Datatables to render list. By default all fields will be render as text field. To customize this behavior you need to write a javascript function to render your column inside datatable instance. For more information on how to write your function read Datatables documentation.</p> <ul> <li>First, you need to provide a link to your custom javascript file in which you add additional render function, by overriding the admin class</li> </ul> <p>Example</p> <p>This is simple example with SQLAlchemy backend <pre><code>from starlette_admin.contrib.sqla import Admin as BaseAdmin\nclass Admin(BaseAdmin):\ndef custom_render_js(self, request: Request) -&gt; Optional[str]:\nreturn request.url_for(\"statics\", path=\"js/custom_render.js\")\nadmin = Admin(engine)\nadmin.add_view(...)\n</code></pre></p> statics/js/custom_render.js<pre><code>Object.assign(render, {\nmycustomkey: function render(data, type, full, meta, fieldOptions) {\n...\n},\n});\n</code></pre> <p>Note</p> <p><code>fieldOptions</code> is your field as javascript object. Your field attributes is serialized into javascript object by using dataclass <code>asdict</code> function.</p> <ul> <li>Then, set <code>render_function_key</code> value</li> </ul> <pre><code>from starlette_admin import BaseField\nfrom dataclasses import dataclass\n@dataclass\nclass CustomField(BaseField):\nrender_function_key: str = \"mycustomkey\"\n</code></pre>"},{"location":"advanced/custom-field/#form","title":"Form","text":"<p>For form rendering, you should create a new html file under the directory <code>forms</code> in your templates dir.</p> <p>These jinja2 variables are available:</p> <ul> <li><code>field</code>: Your field instance</li> <li><code>error</code>: Error message coming from <code>FormValidationError</code></li> <li><code>data</code>: current value. Will be available if it is edit or when validation error occur</li> <li><code>action</code>: <code>EDIT</code> or <code>CREATE</code></li> </ul> <p>Example</p> forms/custom.html<pre><code>&lt;div class=\"{%if error%}is-invalid{%endif%}\"&gt;\n&lt;input id=\"{{field.id}}\" name=\"{{field.id}}\" ... /&gt;\n    {% if field.help_text %}\n    &lt;small class=\"form-hint\"&gt;{{field.help_text}}&lt;/small&gt;\n    {%endif%}\n&lt;/div&gt;\n{%if error %}\n&lt;div class=\"invalid-feedback\"&gt;{{error}}&lt;/div&gt;\n{%endif%}\n</code></pre> <pre><code>from starlette_admin import BaseField\nfrom dataclasses import dataclass\n@dataclass\nclass CustomField(BaseField):\nrender_function_key: str = \"mycustomkey\"\nform_template: str = \"forms/custom.html\"\n</code></pre>"},{"location":"advanced/custom-field/#detail-page","title":"Detail Page","text":"<p>To render your field on detail page, you should create a new html file under the directory <code>displays</code> in your template dir.</p> <p>These jinja2 variables are available:</p> <ul> <li><code>field</code>: Your field instance</li> <li><code>data</code>: value to display</li> </ul> <p>Example</p> displays/custom.html<pre><code>&lt;span&gt;Hello {{data}}&lt;/span&gt;\n</code></pre> <pre><code>from starlette_admin import BaseField\nfrom dataclasses import dataclass\n@dataclass\nclass CustomField(BaseField):\nrender_function_key: str = \"mycustomkey\"\nform_template: str = \"forms/custom.html\"\ndisplay_template: str = \"displays/custom.html\"\n</code></pre>"},{"location":"advanced/custom-field/#data-processing","title":"Data processing","text":"<p>For data processing you will need to override two functions:</p> <ul> <li><code>process_form_data</code>:  Will be call when converting field value into python dict object</li> <li><code>serialize_field_value</code>: Will be call when serializing value to send through the API. This is the same data you will get in your render function</li> </ul> <pre><code>from dataclasses import dataclass\nfrom typing import Any, Dict\nfrom requests import Request\nfrom starlette.datastructures import FormData\nfrom starlette_admin import BaseField\n@dataclass\nclass CustomField(BaseField):\nrender_function_key: str = \"mycustomkey\"\nform_template: str = \"forms/custom.html\"\ndisplay_template: str = \"displays/custom.html\"\nasync def parse_form_data(self, request: Request, form_data: FormData) -&gt; Any:\nreturn form_data.get(self.name)\nasync def serialize_value(self, request: Request, value: Any, action: RequestAction) -&gt; Any:\nreturn value\ndef dict(self) -&gt; Dict[str, Any]:\nreturn super().dict()\n</code></pre> <p>Important</p> <p>Override <code>dict</code> function to get control of the options which is available in javascript.</p>"},{"location":"alternatives/","title":"Alternatives, Inspiration and Comparisons","text":"<ul> <li>Flask-Admin: Simple and extensible administrative interface framework for Flask. The main goal of this project is to provide similar tool for Starlette/FastApi.</li> <li>FastApi-Admin: A fast admin dashboard based on FastAPI and TortoiseORM.</li> <li>sqladmin: SQLAlchemy Admin for FastAPI and Starlette</li> </ul>"},{"location":"api/actions/","title":"Actions","text":""},{"location":"api/actions/#starlette_admin.actions.action","title":"<code>starlette_admin.actions.action(name, text, confirmation=None, submit_btn_text=_('Yes, Proceed'), submit_btn_class='btn-primary', form=None, custom_response=False)</code>","text":"<p>Use this decorator to add custom actions to your ModelView</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>unique action name for your ModelView</p> required <code>text</code> <code>str</code> <p>Action text</p> required <code>confirmation</code> <code>Optional[str]</code> <p>Confirmation text. If not provided, action will be executed           unconditionally.</p> <code>None</code> <code>submit_btn_text</code> <code>Optional[str]</code> <p>Submit button text</p> <code>lazy_gettext('Yes, Proceed')</code> <code>submit_btn_class</code> <code>Optional[str]</code> <p>Submit button variant (ex. <code>button-primary</code>, <code>button-ghost-info</code>,     <code>btn-outline-danger</code>, ...)</p> <code>'btn-primary'</code> <code>form</code> <code>Optional[str]</code> <p>Custom form to collect data from user</p> <code>None</code> <code>custom_response</code> <code>Optional[bool]</code> <p>Set to True when you want to return a custom Starlette response from your action instead of a string.</p> <code>False</code> <p>Usage</p> <pre><code>class ArticleView(ModelView):\nactions = ['make_published', 'redirect']\n@action(\nname=\"make_published\",\ntext=\"Mark selected articles as published\",\nconfirmation=\"Are you sure you want to mark selected articles as published ?\",\nsubmit_btn_text=\"Yes, proceed\",\nsubmit_btn_class=\"btn-success\",\nform='''\n        &lt;form&gt;\n            &lt;div class=\"mt-3\"&gt;\n                &lt;input type=\"text\" class=\"form-control\" name=\"example-text-input\" placeholder=\"Enter value\"&gt;\n            &lt;/div&gt;\n        &lt;/form&gt;\n        '''\n)\nasync def make_published_action(self, request: Request, pks: List[Any]) -&gt; str:\n# Write your logic here\ndata: FormData =  await request.form()\nuser_input = data.get(\"example-text-input\")\nif ... :\n# Display meaningfully error\nraise ActionFailed(\"Sorry, We can't proceed this action now.\")\n# Display successfully message\nreturn \"{} articles were successfully marked as published\".format(len(pks))\n# For custom response\n@action(\nname=\"redirect\",\ntext=\"Redirect\",\ncustom_response=True,\nconfirmation=\"Fill the form\",\nform='''\n        &lt;form&gt;\n            &lt;div class=\"mt-3\"&gt;\n                &lt;input type=\"text\" class=\"form-control\" name=\"value\" placeholder=\"Enter value\"&gt;\n            &lt;/div&gt;\n        &lt;/form&gt;\n        '''\n)\nasync def redirect_action(self, request: Request, pks: List[Any]) -&gt; Response:\ndata = await request.form()\nreturn RedirectResponse(f\"https://example.com/?value={data['value']}\")\n</code></pre> Source code in <code>starlette_admin/actions.py</code> <pre><code>def action(\nname: str,\ntext: str,\nconfirmation: Optional[str] = None,\nsubmit_btn_text: Optional[str] = _(\"Yes, Proceed\"),\nsubmit_btn_class: Optional[str] = \"btn-primary\",\nform: Optional[str] = None,\ncustom_response: Optional[bool] = False,\n) -&gt; Callable[[Callable[..., Awaitable[str]]], Any]:\n\"\"\"\n    Use this decorator to add custom actions to your [ModelView][starlette_admin.views.BaseModelView]\n    Args:\n        name: unique action name for your ModelView\n        text: Action text\n        confirmation: Confirmation text. If not provided, action will be executed\n                      unconditionally.\n        submit_btn_text: Submit button text\n        submit_btn_class: Submit button variant (ex. `button-primary`, `button-ghost-info`,\n                `btn-outline-danger`, ...)\n        form: Custom form to collect data from user\n        custom_response: Set to True when you want to return a custom Starlette response\n            from your action instead of a string.\n    !!! usage\n        ```python\n        class ArticleView(ModelView):\n            actions = ['make_published', 'redirect']\n            @action(\n                name=\"make_published\",\n                text=\"Mark selected articles as published\",\n                confirmation=\"Are you sure you want to mark selected articles as published ?\",\n                submit_btn_text=\"Yes, proceed\",\n                submit_btn_class=\"btn-success\",\n                form='''\n                &lt;form&gt;\n                    &lt;div class=\"mt-3\"&gt;\n                        &lt;input type=\"text\" class=\"form-control\" name=\"example-text-input\" placeholder=\"Enter value\"&gt;\n                    &lt;/div&gt;\n                &lt;/form&gt;\n                '''\n            )\n            async def make_published_action(self, request: Request, pks: List[Any]) -&gt; str:\n                # Write your logic here\n                data: FormData =  await request.form()\n                user_input = data.get(\"example-text-input\")\n                if ... :\n                    # Display meaningfully error\n                    raise ActionFailed(\"Sorry, We can't proceed this action now.\")\n                # Display successfully message\n                return \"{} articles were successfully marked as published\".format(len(pks))\n            # For custom response\n            @action(\n                name=\"redirect\",\n                text=\"Redirect\",\n                custom_response=True,\n                confirmation=\"Fill the form\",\n                form='''\n                &lt;form&gt;\n                    &lt;div class=\"mt-3\"&gt;\n                        &lt;input type=\"text\" class=\"form-control\" name=\"value\" placeholder=\"Enter value\"&gt;\n                    &lt;/div&gt;\n                &lt;/form&gt;\n                '''\n             )\n            async def redirect_action(self, request: Request, pks: List[Any]) -&gt; Response:\n                data = await request.form()\n                return RedirectResponse(f\"https://example.com/?value={data['value']}\")\n        ```\n    \"\"\"\ndef wrap(f: Callable[..., Awaitable[str]]) -&gt; Callable[..., Awaitable[str]]:\nf._action = {  # type: ignore\n\"name\": name,\n\"text\": text,\n\"confirmation\": confirmation,\n\"submit_btn_text\": submit_btn_text,\n\"submit_btn_class\": submit_btn_class,\n\"form\": form if form is not None else \"\",\n\"custom_response\": custom_response,\n}\nreturn f\nreturn wrap\n</code></pre>"},{"location":"api/auth-provider/","title":"AuthProvider","text":""},{"location":"api/auth-provider/#starlette_admin.auth.BaseAuthProvider","title":"<code>starlette_admin.auth.BaseAuthProvider</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Base class for implementing the Authentication into your admin interface</p> <p>Parameters:</p> Name Type Description Default <code>login_path</code> <code>str</code> <p>The path for the login page.</p> <code>'/login'</code> <code>logout_path</code> <code>str</code> <p>The path for the logout page.</p> <code>'/logout'</code> <code>allow_paths</code> <code>Optional[Sequence[str]]</code> <p>A list of paths that are allowed without authentication.</p> <code>None</code> Source code in <code>starlette_admin/auth.py</code> <pre><code>class BaseAuthProvider(ABC):\n\"\"\"\n    Base class for implementing the Authentication into your admin interface\n    Args:\n        login_path: The path for the login page.\n        logout_path: The path for the logout page.\n        allow_paths: A list of paths that are allowed without authentication.\n    \"\"\"\ndef __init__(\nself,\nlogin_path: str = \"/login\",\nlogout_path: str = \"/logout\",\nallow_paths: Optional[Sequence[str]] = None,\n) -&gt; None:\nself.login_path = login_path\nself.logout_path = logout_path\nself.allow_paths = allow_paths\n@abstractmethod\ndef setup_admin(self, admin: \"BaseAdmin\") -&gt; None:\n\"\"\"\n        This method is an abstract method that must be implemented in subclasses.\n        It allows custom configuration and setup of the admin interface\n        related to authentication and authorization.\n        \"\"\"\nraise NotImplementedError()\ndef get_middleware(self, admin: \"BaseAdmin\") -&gt; Middleware:\n\"\"\"\n        This method returns the authentication middleware required for the admin interface\n        to enable authentication\n        \"\"\"\nreturn Middleware(AuthMiddleware, provider=self)\nasync def is_authenticated(self, request: Request) -&gt; bool:\n\"\"\"\n        This method will be called to validate each incoming request.\n        You can also save the connected user information into the\n        request state and use it later to restrict access to some part\n        of your admin interface\n        Returns:\n            True: to accept the request\n            False: to redirect to login page\n        Examples:\n            ```python\n            async def is_authenticated(self, request: Request) -&gt; bool:\n                if request.session.get(\"username\", None) in users:\n                    # Save user object in state\n                    request.state.user = my_users_db.get(request.session[\"username\"])\n                    return True\n                return False\n            ```\n        \"\"\"\nreturn False\ndef get_admin_user(self, request: Request) -&gt; Optional[AdminUser]:\n\"\"\"\n        Override this method to display connected user `name` and/or `profile`\n        Returns:\n            AdminUser: The connected user info\n        Examples:\n            ```python\n            def get_admin_user(self, request: Request) -&gt; AdminUser:\n                user = request.state.user  # Retrieve current user (previously saved in the request state)\n                return AdminUser(username=user[\"name\"], photo_url=user[\"photo_url\"])\n            ```\n        \"\"\"\nreturn None  # pragma: no cover\n</code></pre>"},{"location":"api/auth-provider/#starlette_admin.auth.BaseAuthProvider.get_admin_user","title":"<code>get_admin_user(request)</code>","text":"<p>Override this method to display connected user <code>name</code> and/or <code>profile</code></p> <p>Returns:</p> Name Type Description <code>AdminUser</code> <code>Optional[AdminUser]</code> <p>The connected user info</p> <p>Examples:</p> <pre><code>def get_admin_user(self, request: Request) -&gt; AdminUser:\nuser = request.state.user  # Retrieve current user (previously saved in the request state)\nreturn AdminUser(username=user[\"name\"], photo_url=user[\"photo_url\"])\n</code></pre> Source code in <code>starlette_admin/auth.py</code> <pre><code>def get_admin_user(self, request: Request) -&gt; Optional[AdminUser]:\n\"\"\"\n    Override this method to display connected user `name` and/or `profile`\n    Returns:\n        AdminUser: The connected user info\n    Examples:\n        ```python\n        def get_admin_user(self, request: Request) -&gt; AdminUser:\n            user = request.state.user  # Retrieve current user (previously saved in the request state)\n            return AdminUser(username=user[\"name\"], photo_url=user[\"photo_url\"])\n        ```\n    \"\"\"\nreturn None  # pragma: no cover\n</code></pre>"},{"location":"api/auth-provider/#starlette_admin.auth.BaseAuthProvider.get_middleware","title":"<code>get_middleware(admin)</code>","text":"<p>This method returns the authentication middleware required for the admin interface to enable authentication</p> Source code in <code>starlette_admin/auth.py</code> <pre><code>def get_middleware(self, admin: \"BaseAdmin\") -&gt; Middleware:\n\"\"\"\n    This method returns the authentication middleware required for the admin interface\n    to enable authentication\n    \"\"\"\nreturn Middleware(AuthMiddleware, provider=self)\n</code></pre>"},{"location":"api/auth-provider/#starlette_admin.auth.BaseAuthProvider.is_authenticated","title":"<code>is_authenticated(request)</code>  <code>async</code>","text":"<p>This method will be called to validate each incoming request. You can also save the connected user information into the request state and use it later to restrict access to some part of your admin interface</p> <p>Returns:</p> Name Type Description <code>True</code> <code>bool</code> <p>to accept the request</p> <code>False</code> <code>bool</code> <p>to redirect to login page</p> <p>Examples:</p> <pre><code>async def is_authenticated(self, request: Request) -&gt; bool:\nif request.session.get(\"username\", None) in users:\n# Save user object in state\nrequest.state.user = my_users_db.get(request.session[\"username\"])\nreturn True\nreturn False\n</code></pre> Source code in <code>starlette_admin/auth.py</code> <pre><code>async def is_authenticated(self, request: Request) -&gt; bool:\n\"\"\"\n    This method will be called to validate each incoming request.\n    You can also save the connected user information into the\n    request state and use it later to restrict access to some part\n    of your admin interface\n    Returns:\n        True: to accept the request\n        False: to redirect to login page\n    Examples:\n        ```python\n        async def is_authenticated(self, request: Request) -&gt; bool:\n            if request.session.get(\"username\", None) in users:\n                # Save user object in state\n                request.state.user = my_users_db.get(request.session[\"username\"])\n                return True\n            return False\n        ```\n    \"\"\"\nreturn False\n</code></pre>"},{"location":"api/auth-provider/#starlette_admin.auth.BaseAuthProvider.setup_admin","title":"<code>setup_admin(admin)</code>  <code>abstractmethod</code>","text":"<p>This method is an abstract method that must be implemented in subclasses. It allows custom configuration and setup of the admin interface related to authentication and authorization.</p> Source code in <code>starlette_admin/auth.py</code> <pre><code>@abstractmethod\ndef setup_admin(self, admin: \"BaseAdmin\") -&gt; None:\n\"\"\"\n    This method is an abstract method that must be implemented in subclasses.\n    It allows custom configuration and setup of the admin interface\n    related to authentication and authorization.\n    \"\"\"\nraise NotImplementedError()\n</code></pre>"},{"location":"api/auth-provider/#starlette_admin.auth.AuthProvider","title":"<code>starlette_admin.auth.AuthProvider</code>","text":"<p>             Bases: <code>BaseAuthProvider</code></p> Source code in <code>starlette_admin/auth.py</code> <pre><code>class AuthProvider(BaseAuthProvider):\nasync def login(\nself,\nusername: str,\npassword: str,\nremember_me: bool,\nrequest: Request,\nresponse: Response,\n) -&gt; Response:\n\"\"\"\n        This method will be called to validate user credentials\n        Returns:\n            response: return the response back\n        Raises:\n            FormValidationError: when form values is not valid\n            LoginFailed: to display general error\n        Examples:\n            ```python\n            async def login(\n                self,\n                username: str,\n                password: str,\n                remember_me: bool,\n                request: Request,\n                response: Response,\n            ) -&gt; Response:\n                if len(username) &lt; 3:\n                    # Form data validation\n                    raise FormValidationError(\n                        {\"username\": \"Ensure username has at least 03 characters\"}\n                    )\n                if username in my_users_db and password == \"password\":\n                    # Save username in session\n                    request.session.update({\"username\": username})\n                    return response\n                raise LoginFailed(\"Invalid username or password\")\n            ```\n        \"\"\"\nraise LoginFailed(\"Not Implemented\")\nasync def logout(self, request: Request, response: Response) -&gt; Response:\n\"\"\"\n        Implement logout logic (clear sessions, cookies, ...) here\n        and return the response back\n        Returns:\n            response: return the response back\n        Examples:\n            ```python\n            async def logout(self, request: Request, response: Response) -&gt; Response:\n                request.session.clear()\n                return response\n            ```\n        \"\"\"\nraise NotImplementedError()\nasync def render_login(self, request: Request, admin: \"BaseAdmin\") -&gt; Response:\n\"\"\"Render the default login page for username &amp; password authentication.\"\"\"\nif request.method == \"GET\":\nreturn admin.templates.TemplateResponse(\n\"login.html\",\n{\"request\": request, \"_is_login_path\": True},\n)\nform = await request.form()\ntry:\nreturn await self.login(\nform.get(\"username\"),  # type: ignore\nform.get(\"password\"),  # type: ignore\nform.get(\"remember_me\") == \"on\",\nrequest,\nRedirectResponse(\nrequest.query_params.get(\"next\")\nor request.url_for(admin.route_name + \":index\"),\nstatus_code=HTTP_303_SEE_OTHER,\n),\n)\nexcept FormValidationError as errors:\nreturn admin.templates.TemplateResponse(\n\"login.html\",\n{\"request\": request, \"form_errors\": errors, \"_is_login_path\": True},\nstatus_code=HTTP_422_UNPROCESSABLE_ENTITY,\n)\nexcept LoginFailed as error:\nreturn admin.templates.TemplateResponse(\n\"login.html\",\n{\"request\": request, \"error\": error.msg, \"_is_login_path\": True},\nstatus_code=HTTP_400_BAD_REQUEST,\n)\nasync def render_logout(self, request: Request, admin: \"BaseAdmin\") -&gt; Response:\n\"\"\"Render the default logout page.\"\"\"\nreturn await self.logout(\nrequest,\nRedirectResponse(\nrequest.url_for(admin.route_name + \":index\"),\nstatus_code=HTTP_303_SEE_OTHER,\n),\n)\ndef get_login_route(self, admin: \"BaseAdmin\") -&gt; Route:\n\"\"\"\n        Get the login route for the admin interface.\n        \"\"\"\nreturn Route(\nself.login_path,\nwrap_endpoint_with_kwargs(self.render_login, admin=admin),\nmethods=[\"GET\", \"POST\"],\n)\ndef get_logout_route(self, admin: \"BaseAdmin\") -&gt; Route:\n\"\"\"\n        Get the logout route for the admin interface.\n        \"\"\"\nreturn Route(\nself.logout_path,\nwrap_endpoint_with_kwargs(self.render_logout, admin=admin),\nmethods=[\"GET\"],\n)\ndef setup_admin(self, admin: \"BaseAdmin\") -&gt; None:\n\"\"\"\n        Setup the admin interface by adding necessary middleware and routes.\n        \"\"\"\nadmin.middlewares.append(self.get_middleware(admin=admin))\nlogin_route = self.get_login_route(admin=admin)\nlogout_route = self.get_logout_route(admin=admin)\nlogin_route.name = \"login\"\nlogout_route.name = \"logout\"\nadmin.routes.extend([login_route, logout_route])\n</code></pre>"},{"location":"api/auth-provider/#starlette_admin.auth.AuthProvider.get_login_route","title":"<code>get_login_route(admin)</code>","text":"<p>Get the login route for the admin interface.</p> Source code in <code>starlette_admin/auth.py</code> <pre><code>def get_login_route(self, admin: \"BaseAdmin\") -&gt; Route:\n\"\"\"\n    Get the login route for the admin interface.\n    \"\"\"\nreturn Route(\nself.login_path,\nwrap_endpoint_with_kwargs(self.render_login, admin=admin),\nmethods=[\"GET\", \"POST\"],\n)\n</code></pre>"},{"location":"api/auth-provider/#starlette_admin.auth.AuthProvider.get_logout_route","title":"<code>get_logout_route(admin)</code>","text":"<p>Get the logout route for the admin interface.</p> Source code in <code>starlette_admin/auth.py</code> <pre><code>def get_logout_route(self, admin: \"BaseAdmin\") -&gt; Route:\n\"\"\"\n    Get the logout route for the admin interface.\n    \"\"\"\nreturn Route(\nself.logout_path,\nwrap_endpoint_with_kwargs(self.render_logout, admin=admin),\nmethods=[\"GET\"],\n)\n</code></pre>"},{"location":"api/auth-provider/#starlette_admin.auth.AuthProvider.login","title":"<code>login(username, password, remember_me, request, response)</code>  <code>async</code>","text":"<p>This method will be called to validate user credentials</p> <p>Returns:</p> Name Type Description <code>response</code> <code>Response</code> <p>return the response back</p> <p>Raises:</p> Type Description <code>FormValidationError</code> <p>when form values is not valid</p> <code>LoginFailed</code> <p>to display general error</p> <p>Examples:</p> <pre><code>async def login(\nself,\nusername: str,\npassword: str,\nremember_me: bool,\nrequest: Request,\nresponse: Response,\n) -&gt; Response:\nif len(username) &lt; 3:\n# Form data validation\nraise FormValidationError(\n{\"username\": \"Ensure username has at least 03 characters\"}\n)\nif username in my_users_db and password == \"password\":\n# Save username in session\nrequest.session.update({\"username\": username})\nreturn response\nraise LoginFailed(\"Invalid username or password\")\n</code></pre> Source code in <code>starlette_admin/auth.py</code> <pre><code>async def login(\nself,\nusername: str,\npassword: str,\nremember_me: bool,\nrequest: Request,\nresponse: Response,\n) -&gt; Response:\n\"\"\"\n    This method will be called to validate user credentials\n    Returns:\n        response: return the response back\n    Raises:\n        FormValidationError: when form values is not valid\n        LoginFailed: to display general error\n    Examples:\n        ```python\n        async def login(\n            self,\n            username: str,\n            password: str,\n            remember_me: bool,\n            request: Request,\n            response: Response,\n        ) -&gt; Response:\n            if len(username) &lt; 3:\n                # Form data validation\n                raise FormValidationError(\n                    {\"username\": \"Ensure username has at least 03 characters\"}\n                )\n            if username in my_users_db and password == \"password\":\n                # Save username in session\n                request.session.update({\"username\": username})\n                return response\n            raise LoginFailed(\"Invalid username or password\")\n        ```\n    \"\"\"\nraise LoginFailed(\"Not Implemented\")\n</code></pre>"},{"location":"api/auth-provider/#starlette_admin.auth.AuthProvider.logout","title":"<code>logout(request, response)</code>  <code>async</code>","text":"<p>Implement logout logic (clear sessions, cookies, ...) here and return the response back</p> <p>Returns:</p> Name Type Description <code>response</code> <code>Response</code> <p>return the response back</p> <p>Examples:</p> <pre><code>async def logout(self, request: Request, response: Response) -&gt; Response:\nrequest.session.clear()\nreturn response\n</code></pre> Source code in <code>starlette_admin/auth.py</code> <pre><code>async def logout(self, request: Request, response: Response) -&gt; Response:\n\"\"\"\n    Implement logout logic (clear sessions, cookies, ...) here\n    and return the response back\n    Returns:\n        response: return the response back\n    Examples:\n        ```python\n        async def logout(self, request: Request, response: Response) -&gt; Response:\n            request.session.clear()\n            return response\n        ```\n    \"\"\"\nraise NotImplementedError()\n</code></pre>"},{"location":"api/auth-provider/#starlette_admin.auth.AuthProvider.render_login","title":"<code>render_login(request, admin)</code>  <code>async</code>","text":"<p>Render the default login page for username &amp; password authentication.</p> Source code in <code>starlette_admin/auth.py</code> <pre><code>async def render_login(self, request: Request, admin: \"BaseAdmin\") -&gt; Response:\n\"\"\"Render the default login page for username &amp; password authentication.\"\"\"\nif request.method == \"GET\":\nreturn admin.templates.TemplateResponse(\n\"login.html\",\n{\"request\": request, \"_is_login_path\": True},\n)\nform = await request.form()\ntry:\nreturn await self.login(\nform.get(\"username\"),  # type: ignore\nform.get(\"password\"),  # type: ignore\nform.get(\"remember_me\") == \"on\",\nrequest,\nRedirectResponse(\nrequest.query_params.get(\"next\")\nor request.url_for(admin.route_name + \":index\"),\nstatus_code=HTTP_303_SEE_OTHER,\n),\n)\nexcept FormValidationError as errors:\nreturn admin.templates.TemplateResponse(\n\"login.html\",\n{\"request\": request, \"form_errors\": errors, \"_is_login_path\": True},\nstatus_code=HTTP_422_UNPROCESSABLE_ENTITY,\n)\nexcept LoginFailed as error:\nreturn admin.templates.TemplateResponse(\n\"login.html\",\n{\"request\": request, \"error\": error.msg, \"_is_login_path\": True},\nstatus_code=HTTP_400_BAD_REQUEST,\n)\n</code></pre>"},{"location":"api/auth-provider/#starlette_admin.auth.AuthProvider.render_logout","title":"<code>render_logout(request, admin)</code>  <code>async</code>","text":"<p>Render the default logout page.</p> Source code in <code>starlette_admin/auth.py</code> <pre><code>async def render_logout(self, request: Request, admin: \"BaseAdmin\") -&gt; Response:\n\"\"\"Render the default logout page.\"\"\"\nreturn await self.logout(\nrequest,\nRedirectResponse(\nrequest.url_for(admin.route_name + \":index\"),\nstatus_code=HTTP_303_SEE_OTHER,\n),\n)\n</code></pre>"},{"location":"api/auth-provider/#starlette_admin.auth.AuthProvider.setup_admin","title":"<code>setup_admin(admin)</code>","text":"<p>Setup the admin interface by adding necessary middleware and routes.</p> Source code in <code>starlette_admin/auth.py</code> <pre><code>def setup_admin(self, admin: \"BaseAdmin\") -&gt; None:\n\"\"\"\n    Setup the admin interface by adding necessary middleware and routes.\n    \"\"\"\nadmin.middlewares.append(self.get_middleware(admin=admin))\nlogin_route = self.get_login_route(admin=admin)\nlogout_route = self.get_logout_route(admin=admin)\nlogin_route.name = \"login\"\nlogout_route.name = \"logout\"\nadmin.routes.extend([login_route, logout_route])\n</code></pre>"},{"location":"api/base-admin/","title":"BaseAdmin","text":""},{"location":"api/base-admin/#starlette_admin.base.BaseAdmin","title":"<code>starlette_admin.base.BaseAdmin</code>","text":"<p>Base class for implementing Admin interface.</p> Source code in <code>starlette_admin/base.py</code> <pre><code>class BaseAdmin:\n\"\"\"Base class for implementing Admin interface.\"\"\"\ndef __init__(\nself,\ntitle: str = _(\"Admin\"),\nbase_url: str = \"/admin\",\nroute_name: str = \"admin\",\nlogo_url: Optional[str] = None,\nlogin_logo_url: Optional[str] = None,\ntemplates_dir: str = \"templates\",\nstatics_dir: Optional[str] = None,\nindex_view: Optional[CustomView] = None,\nauth_provider: Optional[BaseAuthProvider] = None,\nmiddlewares: Optional[Sequence[Middleware]] = None,\ndebug: bool = False,\ni18n_config: Optional[I18nConfig] = None,\n):\n\"\"\"\n        Parameters:\n            title: Admin title.\n            base_url: Base URL for Admin interface.\n            route_name: Mounted Admin name\n            logo_url: URL of logo to be displayed instead of title.\n            login_logo_url: If set, it will be used for login interface instead of logo_url.\n            templates_dir: Templates dir for customisation\n            statics_dir: Statics dir for customisation\n            index_view: CustomView to use for index page.\n            auth_provider: Authentication Provider\n            middlewares: Starlette middlewares\n            i18n_config: i18n configuration\n        \"\"\"\nself.title = title\nself.base_url = base_url\nself.route_name = route_name\nself.logo_url = logo_url\nself.login_logo_url = login_logo_url\nself.templates_dir = templates_dir\nself.statics_dir = statics_dir\nself.auth_provider = auth_provider\nself.middlewares = list(middlewares) if middlewares is not None else []\nself.index_view = (\nindex_view\nif (index_view is not None)\nelse CustomView(\"\", add_to_menu=False)\n)\nself._views: List[BaseView] = []\nself._models: List[BaseModelView] = []\nself.routes: List[Union[Route, Mount]] = []\nself.debug = debug\nself.i18n_config = i18n_config\nself._setup_templates()\nself.init_locale()\nself.init_auth()\nself.init_routes()\ndef add_view(self, view: Union[Type[BaseView], BaseView]) -&gt; None:\n\"\"\"\n        Add View to the Admin interface.\n        \"\"\"\nview_instance = view if isinstance(view, BaseView) else view()\nself._views.append(view_instance)\nself.setup_view(view_instance)\ndef custom_render_js(self, request: Request) -&gt; Optional[str]:\n\"\"\"\n        Override this function to provide a link to custom js to override the\n        global `render` object in javascript which is use to render fields in\n        list page.\n        Args:\n            request: Starlette Request\n        \"\"\"\nreturn None\ndef init_locale(self) -&gt; None:\nif self.i18n_config is not None:\ntry:\nimport babel  # noqa\nexcept ImportError as err:\nraise ImportError(\n\"'babel' package is required to use i18n features.\"\n\"Install it with `pip install starlette-admin[i18n]`\"\n) from err\nself.middlewares.insert(\n0, Middleware(LocaleMiddleware, i18n_config=self.i18n_config)\n)\ndef init_auth(self) -&gt; None:\nif self.auth_provider is not None:\nself.auth_provider.setup_admin(self)\ndef init_routes(self) -&gt; None:\nstatics = StaticFiles(directory=self.statics_dir, packages=[\"starlette_admin\"])\nself.routes.extend(\n[\nMount(\"/statics\", app=statics, name=\"statics\"),\nRoute(\nself.index_view.path,\nself._render_custom_view(self.index_view),\nmethods=self.index_view.methods,\nname=\"index\",\n),\nRoute(\n\"/api/{identity}\",\nself._render_api,\nmethods=[\"GET\"],\nname=\"api\",\n),\nRoute(\n\"/api/{identity}/action\",\nself.handle_action,\nmethods=[\"GET\", \"POST\"],\nname=\"action\",\n),\nRoute(\n\"/{identity}/list\",\nself._render_list,\nmethods=[\"GET\"],\nname=\"list\",\n),\nRoute(\n\"/{identity}/detail/{pk}\",\nself._render_detail,\nmethods=[\"GET\"],\nname=\"detail\",\n),\nRoute(\n\"/{identity}/create\",\nself._render_create,\nmethods=[\"GET\", \"POST\"],\nname=\"create\",\n),\nRoute(\n\"/{identity}/edit/{pk}\",\nself._render_edit,\nmethods=[\"GET\", \"POST\"],\nname=\"edit\",\n),\n]\n)\nif self.index_view.add_to_menu:\nself._views.append(self.index_view)\ndef _setup_templates(self) -&gt; None:\ntemplates = Jinja2Templates(self.templates_dir, extensions=[\"jinja2.ext.i18n\"])\ntemplates.env.loader = ChoiceLoader(\n[\nFileSystemLoader(self.templates_dir),\nPackageLoader(\"starlette_admin\", \"templates\"),\n]\n)\n# globals\ntemplates.env.globals[\"views\"] = self._views\ntemplates.env.globals[\"title\"] = self.title\ntemplates.env.globals[\"is_auth_enabled\"] = self.auth_provider is not None\ntemplates.env.globals[\"__name__\"] = self.route_name\ntemplates.env.globals[\"logo_url\"] = self.logo_url\ntemplates.env.globals[\"login_logo_url\"] = self.login_logo_url\ntemplates.env.globals[\"custom_render_js\"] = lambda r: self.custom_render_js(r)\ntemplates.env.globals[\"get_locale\"] = get_locale\ntemplates.env.globals[\"get_locale_display_name\"] = get_locale_display_name\ntemplates.env.globals[\"i18n_config\"] = self.i18n_config or I18nConfig()\n# filters\ntemplates.env.filters[\"is_custom_view\"] = lambda r: isinstance(r, CustomView)\ntemplates.env.filters[\"is_link\"] = lambda res: isinstance(res, Link)\ntemplates.env.filters[\"is_model\"] = lambda res: isinstance(res, BaseModelView)\ntemplates.env.filters[\"is_dropdown\"] = lambda res: isinstance(res, DropDown)\ntemplates.env.filters[\"get_admin_user\"] = (\nself.auth_provider.get_admin_user if self.auth_provider else None\n)\ntemplates.env.filters[\"tojson\"] = lambda data: json.dumps(data, default=str)\ntemplates.env.filters[\"file_icon\"] = get_file_icon\ntemplates.env.filters[\n\"to_model\"\n] = lambda identity: self._find_model_from_identity(identity)\ntemplates.env.filters[\"is_iter\"] = lambda v: isinstance(v, (list, tuple))\ntemplates.env.filters[\"is_str\"] = lambda v: isinstance(v, str)\ntemplates.env.filters[\"is_dict\"] = lambda v: isinstance(v, dict)\ntemplates.env.filters[\"ra\"] = lambda a: RequestAction(a)\n# install i18n\ntemplates.env.install_gettext_callables(gettext, ngettext, True)  # type: ignore\nself.templates = templates\ndef setup_view(self, view: BaseView) -&gt; None:\nif isinstance(view, DropDown):\nfor sub_view in view.views:\nself.setup_view(sub_view)\nelif isinstance(view, CustomView):\nself.routes.insert(\n0,\nRoute(\nview.path,\nendpoint=self._render_custom_view(view),\nmethods=view.methods,\nname=view.name,\n),\n)\nelif isinstance(view, BaseModelView):\nview._find_foreign_model = lambda i: self._find_model_from_identity(i)\nself._models.append(view)\ndef _find_model_from_identity(self, identity: Optional[str]) -&gt; BaseModelView:\nif identity is not None:\nfor model in self._models:\nif model.identity == identity:\nreturn model\nraise HTTPException(\nHTTP_404_NOT_FOUND,\n_(\"Model with identity %(identity)s not found\") % {\"identity\": identity},\n)\ndef _render_custom_view(\nself, custom_view: CustomView\n) -&gt; Callable[[Request], Awaitable[Response]]:\nasync def wrapper(request: Request) -&gt; Response:\nif not custom_view.is_accessible(request):\nraise HTTPException(HTTP_403_FORBIDDEN)\nreturn await custom_view.render(request, self.templates)\nreturn wrapper\nasync def _render_api(self, request: Request) -&gt; Response:\nrequest.state.action = RequestAction.LIST\nidentity = request.path_params.get(\"identity\")\nmodel = self._find_model_from_identity(identity)\nif not model.is_accessible(request):\nreturn JSONResponse(None, status_code=HTTP_403_FORBIDDEN)\nskip = int(request.query_params.get(\"skip\") or \"0\")\nlimit = int(request.query_params.get(\"limit\") or \"100\")\norder_by = request.query_params.getlist(\"order_by\")\nwhere = request.query_params.get(\"where\")\npks = request.query_params.getlist(\"pks\")\nselect2 = \"select2\" in request.query_params\nif len(pks) &gt; 0:\nitems = await model.find_by_pks(request, pks)\ntotal = len(items)\nelse:\nif where is not None:\ntry:\nwhere = json.loads(where)\nexcept JSONDecodeError:\nwhere = str(where)\nitems = await model.find_all(\nrequest=request,\nskip=skip,\nlimit=limit,\nwhere=where,\norder_by=order_by,\n)\ntotal = await model.count(request=request, where=where)\nreturn JSONResponse(\n{\n\"items\": [\n(\nawait model.serialize(\nitem,\nrequest,\nRequestAction.API if select2 else RequestAction.LIST,\ninclude_relationships=not select2,\ninclude_select2=select2,\n)\n)\nfor item in items\n],\n\"total\": total,\n}\n)\nasync def handle_action(self, request: Request) -&gt; Response:\nrequest.state.action = RequestAction.LIST\ntry:\nidentity = request.path_params.get(\"identity\")\npks = request.query_params.getlist(\"pks\")\nname = request.query_params.get(\"name\")\nmodel = self._find_model_from_identity(identity)\nif not model.is_accessible(request):\nraise ActionFailed(\"Forbidden\")\nassert name is not None\nhandler_return = await model.handle_action(request, pks, name)\nif isinstance(handler_return, Response):\nreturn handler_return\nreturn JSONResponse({\"msg\": handler_return})\nexcept ActionFailed as exc:\nreturn JSONResponse({\"msg\": exc.msg}, status_code=HTTP_400_BAD_REQUEST)\nasync def _render_list(self, request: Request) -&gt; Response:\nrequest.state.action = RequestAction.LIST\nidentity = request.path_params.get(\"identity\")\nmodel = self._find_model_from_identity(identity)\nif not model.is_accessible(request):\nraise HTTPException(HTTP_403_FORBIDDEN)\nreturn self.templates.TemplateResponse(\nmodel.list_template,\n{\n\"request\": request,\n\"model\": model,\n\"_actions\": await model.get_all_actions(request),\n\"__js_model__\": await model._configs(request),\n},\n)\nasync def _render_detail(self, request: Request) -&gt; Response:\nrequest.state.action = RequestAction.DETAIL\nidentity = request.path_params.get(\"identity\")\nmodel = self._find_model_from_identity(identity)\nif not model.is_accessible(request) or not model.can_view_details(request):\nraise HTTPException(HTTP_403_FORBIDDEN)\npk = request.path_params.get(\"pk\")\nobj = await model.find_by_pk(request, pk)\nif obj is None:\nraise HTTPException(HTTP_404_NOT_FOUND)\nreturn self.templates.TemplateResponse(\nmodel.detail_template,\n{\n\"request\": request,\n\"model\": model,\n\"raw_obj\": obj,\n\"obj\": await model.serialize(obj, request, RequestAction.DETAIL),\n},\n)\nasync def _render_create(self, request: Request) -&gt; Response:\nrequest.state.action = RequestAction.CREATE\nidentity = request.path_params.get(\"identity\")\nmodel = self._find_model_from_identity(identity)\nif not model.is_accessible(request) or not model.can_create(request):\nraise HTTPException(HTTP_403_FORBIDDEN)\nif request.method == \"GET\":\nreturn self.templates.TemplateResponse(\nmodel.create_template,\n{\"request\": request, \"model\": model},\n)\nform = await request.form()\ndict_obj = await self.form_to_dict(request, form, model, RequestAction.CREATE)\ntry:\nobj = await model.create(request, dict_obj)\nexcept FormValidationError as exc:\nreturn self.templates.TemplateResponse(\nmodel.create_template,\n{\n\"request\": request,\n\"model\": model,\n\"errors\": exc.errors,\n\"obj\": dict_obj,\n},\nstatus_code=HTTP_422_UNPROCESSABLE_ENTITY,\n)\npk = getattr(obj, model.pk_attr)  # type: ignore\nurl = request.url_for(self.route_name + \":list\", identity=model.identity)\nif form.get(\"_continue_editing\", None) is not None:\nurl = request.url_for(\nself.route_name + \":edit\", identity=model.identity, pk=pk\n)\nelif form.get(\"_add_another\", None) is not None:\nurl = request.url\nreturn RedirectResponse(url, status_code=HTTP_303_SEE_OTHER)\nasync def _render_edit(self, request: Request) -&gt; Response:\nrequest.state.action = RequestAction.EDIT\nidentity = request.path_params.get(\"identity\")\nmodel = self._find_model_from_identity(identity)\nif not model.is_accessible(request) or not model.can_edit(request):\nraise HTTPException(HTTP_403_FORBIDDEN)\npk = request.path_params.get(\"pk\")\nobj = await model.find_by_pk(request, pk)\nif obj is None:\nraise HTTPException(HTTP_404_NOT_FOUND)\nif request.method == \"GET\":\nreturn self.templates.TemplateResponse(\nmodel.edit_template,\n{\n\"request\": request,\n\"model\": model,\n\"raw_obj\": obj,\n\"obj\": await model.serialize(obj, request, RequestAction.EDIT),\n},\n)\nform = await request.form()\ndict_obj = await self.form_to_dict(request, form, model, RequestAction.EDIT)\ntry:\nobj = await model.edit(request, pk, dict_obj)\nexcept FormValidationError as exc:\nreturn self.templates.TemplateResponse(\nmodel.edit_template,\n{\n\"request\": request,\n\"model\": model,\n\"errors\": exc.errors,\n\"obj\": dict_obj,\n},\nstatus_code=HTTP_422_UNPROCESSABLE_ENTITY,\n)\npk = getattr(obj, model.pk_attr)  # type: ignore\nurl = request.url_for(self.route_name + \":list\", identity=model.identity)\nif form.get(\"_continue_editing\", None) is not None:\nurl = request.url_for(\nself.route_name + \":edit\", identity=model.identity, pk=pk\n)\nelif form.get(\"_add_another\", None) is not None:\nurl = request.url_for(self.route_name + \":create\", identity=model.identity)\nreturn RedirectResponse(url, status_code=HTTP_303_SEE_OTHER)\nasync def _render_error(\nself,\nrequest: Request,\nexc: Exception = HTTPException(status_code=HTTP_500_INTERNAL_SERVER_ERROR),\n) -&gt; Response:\nassert isinstance(exc, HTTPException)\nreturn self.templates.TemplateResponse(\n\"error.html\",\n{\"request\": request, \"exc\": exc},\nstatus_code=exc.status_code,\n)\nasync def form_to_dict(\nself,\nrequest: Request,\nform_data: FormData,\nmodel: BaseModelView,\naction: RequestAction,\n) -&gt; Dict[str, Any]:\ndata = {}\nfor field in model.get_fields_list(request, action):\ndata[field.name] = await field.parse_form_data(request, form_data, action)\nreturn data\ndef mount_to(self, app: Starlette) -&gt; None:\nadmin_app = Starlette(\nroutes=self.routes,\nmiddleware=self.middlewares,\ndebug=self.debug,\nexception_handlers={HTTPException: self._render_error},\n)\nadmin_app.state.ROUTE_NAME = self.route_name\napp.mount(\nself.base_url,\napp=admin_app,\nname=self.route_name,\n)\n</code></pre>"},{"location":"api/base-admin/#starlette_admin.base.BaseAdmin.__init__","title":"<code>__init__(title=_('Admin'), base_url='/admin', route_name='admin', logo_url=None, login_logo_url=None, templates_dir='templates', statics_dir=None, index_view=None, auth_provider=None, middlewares=None, debug=False, i18n_config=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>Admin title.</p> <code>lazy_gettext('Admin')</code> <code>base_url</code> <code>str</code> <p>Base URL for Admin interface.</p> <code>'/admin'</code> <code>route_name</code> <code>str</code> <p>Mounted Admin name</p> <code>'admin'</code> <code>logo_url</code> <code>Optional[str]</code> <p>URL of logo to be displayed instead of title.</p> <code>None</code> <code>login_logo_url</code> <code>Optional[str]</code> <p>If set, it will be used for login interface instead of logo_url.</p> <code>None</code> <code>templates_dir</code> <code>str</code> <p>Templates dir for customisation</p> <code>'templates'</code> <code>statics_dir</code> <code>Optional[str]</code> <p>Statics dir for customisation</p> <code>None</code> <code>index_view</code> <code>Optional[CustomView]</code> <p>CustomView to use for index page.</p> <code>None</code> <code>auth_provider</code> <code>Optional[BaseAuthProvider]</code> <p>Authentication Provider</p> <code>None</code> <code>middlewares</code> <code>Optional[Sequence[Middleware]]</code> <p>Starlette middlewares</p> <code>None</code> <code>i18n_config</code> <code>Optional[I18nConfig]</code> <p>i18n configuration</p> <code>None</code> Source code in <code>starlette_admin/base.py</code> <pre><code>def __init__(\nself,\ntitle: str = _(\"Admin\"),\nbase_url: str = \"/admin\",\nroute_name: str = \"admin\",\nlogo_url: Optional[str] = None,\nlogin_logo_url: Optional[str] = None,\ntemplates_dir: str = \"templates\",\nstatics_dir: Optional[str] = None,\nindex_view: Optional[CustomView] = None,\nauth_provider: Optional[BaseAuthProvider] = None,\nmiddlewares: Optional[Sequence[Middleware]] = None,\ndebug: bool = False,\ni18n_config: Optional[I18nConfig] = None,\n):\n\"\"\"\n    Parameters:\n        title: Admin title.\n        base_url: Base URL for Admin interface.\n        route_name: Mounted Admin name\n        logo_url: URL of logo to be displayed instead of title.\n        login_logo_url: If set, it will be used for login interface instead of logo_url.\n        templates_dir: Templates dir for customisation\n        statics_dir: Statics dir for customisation\n        index_view: CustomView to use for index page.\n        auth_provider: Authentication Provider\n        middlewares: Starlette middlewares\n        i18n_config: i18n configuration\n    \"\"\"\nself.title = title\nself.base_url = base_url\nself.route_name = route_name\nself.logo_url = logo_url\nself.login_logo_url = login_logo_url\nself.templates_dir = templates_dir\nself.statics_dir = statics_dir\nself.auth_provider = auth_provider\nself.middlewares = list(middlewares) if middlewares is not None else []\nself.index_view = (\nindex_view\nif (index_view is not None)\nelse CustomView(\"\", add_to_menu=False)\n)\nself._views: List[BaseView] = []\nself._models: List[BaseModelView] = []\nself.routes: List[Union[Route, Mount]] = []\nself.debug = debug\nself.i18n_config = i18n_config\nself._setup_templates()\nself.init_locale()\nself.init_auth()\nself.init_routes()\n</code></pre>"},{"location":"api/base-admin/#starlette_admin.base.BaseAdmin.add_view","title":"<code>add_view(view)</code>","text":"<p>Add View to the Admin interface.</p> Source code in <code>starlette_admin/base.py</code> <pre><code>def add_view(self, view: Union[Type[BaseView], BaseView]) -&gt; None:\n\"\"\"\n    Add View to the Admin interface.\n    \"\"\"\nview_instance = view if isinstance(view, BaseView) else view()\nself._views.append(view_instance)\nself.setup_view(view_instance)\n</code></pre>"},{"location":"api/base-admin/#starlette_admin.base.BaseAdmin.custom_render_js","title":"<code>custom_render_js(request)</code>","text":"<p>Override this function to provide a link to custom js to override the global <code>render</code> object in javascript which is use to render fields in list page.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>Starlette Request</p> required Source code in <code>starlette_admin/base.py</code> <pre><code>def custom_render_js(self, request: Request) -&gt; Optional[str]:\n\"\"\"\n    Override this function to provide a link to custom js to override the\n    global `render` object in javascript which is use to render fields in\n    list page.\n    Args:\n        request: Starlette Request\n    \"\"\"\nreturn None\n</code></pre>"},{"location":"api/contrib/sqlalchemy/modelview/","title":"ModelView","text":""},{"location":"api/contrib/sqlalchemy/modelview/#starlette_admin.contrib.sqla.ModelView","title":"<code>starlette_admin.contrib.sqla.ModelView</code>","text":"<p>             Bases: <code>BaseModelView</code></p> Source code in <code>starlette_admin/contrib/sqla/view.py</code> <pre><code>class ModelView(BaseModelView):\ndef __init__(\nself,\nmodel: Type[Any],\nicon: Optional[str] = None,\nname: Optional[str] = None,\nlabel: Optional[str] = None,\nidentity: Optional[str] = None,\nconverter: Optional[BaseSQLAModelConverter] = None,\n):\ntry:\nmapper: Mapper = inspect(model)  # type: ignore\nexcept NoInspectionAvailable:\nraise InvalidModelError(  # noqa B904\nf\"Class {model.__name__} is not a SQLAlchemy model.\"\n)\nassert len(mapper.primary_key) == 1, (\n\"Multiple PK columns not supported, A possible solution is to override \"\n\"BaseModelView class and put your own logic \"\n)\nself.model = model\nself.identity = (\nidentity or self.identity or slugify_class_name(self.model.__name__)\n)\nself.label = (\nlabel or self.label or prettify_class_name(self.model.__name__) + \"s\"\n)\nself.name = name or self.name or prettify_class_name(self.model.__name__)\nself.icon = icon\nself._pk_column: Column = mapper.primary_key[0]\nself.pk_attr = self._pk_column.key\nself._pk_coerce = extract_column_python_type(self._pk_column)\nif self.fields is None or len(self.fields) == 0:\nself.fields = [\nself.model.__dict__[f].key\nfor f in self.model.__dict__\nif type(self.model.__dict__[f]) is InstrumentedAttribute\n]\nself.fields = (converter or ModelConverter()).convert_fields_list(\nfields=self.fields, model=self.model, mapper=mapper\n)\nself.exclude_fields_from_list = normalize_list(self.exclude_fields_from_list)  # type: ignore\nself.exclude_fields_from_detail = normalize_list(self.exclude_fields_from_detail)  # type: ignore\nself.exclude_fields_from_create = normalize_list(self.exclude_fields_from_create)  # type: ignore\nself.exclude_fields_from_edit = normalize_list(self.exclude_fields_from_edit)  # type: ignore\n_default_list = [\nfield.name\nfor field in self.fields\nif not isinstance(field, (RelationField, FileField))\n]\nself.searchable_fields = normalize_list(\nself.searchable_fields\nif (self.searchable_fields is not None)\nelse _default_list\n)\nself.sortable_fields = normalize_list(\nself.sortable_fields\nif (self.sortable_fields is not None)\nelse _default_list\n)\nself.export_fields = normalize_list(self.export_fields)\nself.fields_default_sort = normalize_list(\nself.fields_default_sort, is_default_sort_list=True\n)\nsuper().__init__()\nasync def handle_action(\nself, request: Request, pks: List[Any], name: str\n) -&gt; Union[str, Response]:\ntry:\nreturn await super().handle_action(request, pks, name)\nexcept SQLAlchemyError as exc:\nraise ActionFailed(str(exc)) from exc\ndef get_list_query(self) -&gt; Select:\n\"\"\"\n        Return a Select expression which is used as base statement for\n        [find_all][starlette_admin.views.BaseModelView.find_all] method.\n        Examples:\n            ```python  hl_lines=\"3-4\"\n            class PostView(ModelView):\n                    def get_list_query(self):\n                        return super().get_list_query().where(Post.published == true())\n                    def get_count_query(self):\n                        return super().get_count_query().where(Post.published == true())\n            ```\n        If you override this method, don't forget to also override\n        [get_count_query][starlette_admin.contrib.sqla.ModelView.get_count_query],\n        for displaying the correct item count in the list view.\n        \"\"\"\nreturn select(self.model)\ndef get_count_query(self) -&gt; Select:\n\"\"\"\n        Return a Select expression which is used as base statement for\n        [count][starlette_admin.views.BaseModelView.count] method.\n        Examples:\n            ```python hl_lines=\"6-7\"\n            class PostView(ModelView):\n                    def get_list_query(self):\n                        return super().get_list_query().where(Post.published == true())\n                    def get_count_query(self):\n                        return super().get_count_query().where(Post.published == true())\n            ```\n        \"\"\"\nreturn select(func.count(self._pk_column))\ndef get_search_query(self, request: Request, term: str) -&gt; Any:\n\"\"\"\n        Return SQLAlchemy whereclause to use for full text search\n        Args:\n           request: Starlette request\n           term: Filtering term\n        Examples:\n           ```python\n           class PostView(ModelView):\n                def get_search_query(self, request: Request, term: str):\n                    return Post.title.contains(term)\n           ```\n        \"\"\"\nclauses = []\nfor field in self.get_fields_list(request):\nif field.searchable and type(field) in [\nStringField,\nTextAreaField,\nEmailField,\nURLField,\nPhoneField,\nColorField,\n]:\nattr = getattr(self.model, field.name)\nclauses.append(cast(attr, String).ilike(f\"%{term}%\"))\nreturn or_(*clauses)\nasync def count(\nself,\nrequest: Request,\nwhere: Union[Dict[str, Any], str, None] = None,\n) -&gt; int:\nsession: Union[Session, AsyncSession] = request.state.session\nstmt = self.get_count_query()\nif where is not None:\nif isinstance(where, dict):\nwhere = build_query(where, self.model)\nelse:\nwhere = await self.build_full_text_search_query(\nrequest, where, self.model\n)\nstmt = stmt.where(where)  # type: ignore\nif isinstance(session, AsyncSession):\nreturn (await session.execute(stmt)).scalar_one()\nreturn (await anyio.to_thread.run_sync(session.execute, stmt)).scalar_one()\nasync def find_all(\nself,\nrequest: Request,\nskip: int = 0,\nlimit: int = 100,\nwhere: Union[Dict[str, Any], str, None] = None,\norder_by: Optional[List[str]] = None,\n) -&gt; Sequence[Any]:\nsession: Union[Session, AsyncSession] = request.state.session\nstmt = self.get_list_query().offset(skip)\nif limit &gt; 0:\nstmt = stmt.limit(limit)\nif where is not None:\nif isinstance(where, dict):\nwhere = build_query(where, self.model)\nelse:\nwhere = await self.build_full_text_search_query(\nrequest, where, self.model\n)\nstmt = stmt.where(where)  # type: ignore\nstmt = stmt.order_by(*build_order_clauses(order_by or [], self.model))\nfor field in self.get_fields_list(request, RequestAction.LIST):\nif isinstance(field, RelationField):\nstmt = stmt.options(joinedload(getattr(self.model, field.name)))\nif isinstance(session, AsyncSession):\nreturn (await session.execute(stmt)).scalars().unique().all()\nreturn (\n(await anyio.to_thread.run_sync(session.execute, stmt))\n.scalars()\n.unique()\n.all()\n)\nasync def find_by_pk(self, request: Request, pk: Any) -&gt; Any:\nsession: Union[Session, AsyncSession] = request.state.session\nstmt = select(self.model).where(self._pk_column == self._pk_coerce(pk))\nfor field in self.get_fields_list(request, request.state.action):\nif isinstance(field, RelationField):\nstmt = stmt.options(joinedload(getattr(self.model, field.name)))\nif isinstance(session, AsyncSession):\nreturn (await session.execute(stmt)).scalars().unique().one_or_none()\nreturn (\n(await anyio.to_thread.run_sync(session.execute, stmt))\n.scalars()\n.unique()\n.one_or_none()\n)\nasync def find_by_pks(self, request: Request, pks: List[Any]) -&gt; Sequence[Any]:\nsession: Union[Session, AsyncSession] = request.state.session\nstmt = select(self.model).where(self._pk_column.in_(map(self._pk_coerce, pks)))\nfor field in self.get_fields_list(request, request.state.action):\nif isinstance(field, RelationField):\nstmt = stmt.options(joinedload(getattr(self.model, field.name)))\nif isinstance(session, AsyncSession):\nreturn (await session.execute(stmt)).scalars().unique().all()\nreturn (\n(await anyio.to_thread.run_sync(session.execute, stmt))\n.scalars()\n.unique()\n.all()\n)\nasync def validate(self, request: Request, data: Dict[str, Any]) -&gt; None:\n\"\"\"\n        Inherit this method to validate your data.\n        Args:\n            request: Starlette request\n            data: Submitted data\n        Raises:\n            FormValidationError: to display errors to users\n        Examples:\n            ```python\n            from starlette_admin.contrib.sqla import ModelView\n            from starlette_admin.exceptions import FormValidationError\n            class Post(Base):\n                __tablename__ = \"post\"\n                id = Column(Integer, primary_key=True)\n                title = Column(String(100), nullable=False)\n                text = Column(Text, nullable=False)\n                date = Column(Date)\n            class PostView(ModelView):\n                async def validate(self, request: Request, data: Dict[str, Any]) -&gt; None:\n                    errors: Dict[str, str] = dict()\n                    _2day_from_today = date.today() + timedelta(days=2)\n                    if data[\"title\"] is None or len(data[\"title\"]) &lt; 3:\n                        errors[\"title\"] = \"Ensure this value has at least 03 characters\"\n                    if data[\"text\"] is None or len(data[\"text\"]) &lt; 10:\n                        errors[\"text\"] = \"Ensure this value has at least 10 characters\"\n                    if data[\"date\"] is None or data[\"date\"] &lt; _2day_from_today:\n                        errors[\"date\"] = \"We need at least one day to verify your post\"\n                    if len(errors) &gt; 0:\n                        raise FormValidationError(errors)\n                    return await super().validate(request, data)\n            ```\n        \"\"\"\nasync def create(self, request: Request, data: Dict[str, Any]) -&gt; Any:\ntry:\ndata = await self._arrange_data(request, data)\nawait self.validate(request, data)\nsession: Union[Session, AsyncSession] = request.state.session\nobj = await self._populate_obj(request, self.model(), data)\nsession.add(obj)\nif isinstance(session, AsyncSession):\nawait session.commit()\nawait session.refresh(obj)\nelse:\nawait anyio.to_thread.run_sync(session.commit)\nawait anyio.to_thread.run_sync(session.refresh, obj)\nreturn obj\nexcept Exception as e:\nreturn self.handle_exception(e)\nasync def edit(self, request: Request, pk: Any, data: Dict[str, Any]) -&gt; Any:\ntry:\ndata = await self._arrange_data(request, data, True)\nawait self.validate(request, data)\nsession: Union[Session, AsyncSession] = request.state.session\nobj = await self.find_by_pk(request, pk)\nsession.add(await self._populate_obj(request, obj, data, True))\nif isinstance(session, AsyncSession):\nawait session.commit()\nawait session.refresh(obj)\nelse:\nawait anyio.to_thread.run_sync(session.commit)\nawait anyio.to_thread.run_sync(session.refresh, obj)\nreturn obj\nexcept Exception as e:\nself.handle_exception(e)\nasync def _arrange_data(\nself,\nrequest: Request,\ndata: Dict[str, Any],\nis_edit: bool = False,\n) -&gt; Dict[str, Any]:\n\"\"\"\n        This function will return a new dict with relationships loaded from\n        database.\n        \"\"\"\narranged_data: Dict[str, Any] = {}\nfor field in self.fields:\nif (is_edit and field.exclude_from_edit) or (\nnot is_edit and field.exclude_from_create\n):\ncontinue\nif isinstance(field, RelationField) and data[field.name] is not None:\nforeign_model = self._find_foreign_model(field.identity)  # type: ignore\nif not field.multiple:\narranged_data[field.name] = await foreign_model.find_by_pk(\nrequest, data[field.name]\n)\nelse:\narranged_data[field.name] = await foreign_model.find_by_pks(\nrequest, data[field.name]\n)\nelse:\narranged_data[field.name] = data[field.name]\nreturn arranged_data\nasync def _populate_obj(\nself,\nrequest: Request,\nobj: Any,\ndata: Dict[str, Any],\nis_edit: bool = False,\n) -&gt; Any:\nfor field in self.fields:\nif (is_edit and field.exclude_from_edit) or (\nnot is_edit and field.exclude_from_create\n):\ncontinue\nname, value = field.name, data.get(field.name, None)\nif isinstance(field, FileField):\nvalue, should_be_deleted = value\nif should_be_deleted:\nsetattr(obj, name, None)\nelif (not field.multiple and value is not None) or (\nfield.multiple and isinstance(value, list) and len(value) &gt; 0\n):\nsetattr(obj, name, value)\nelse:\nsetattr(obj, name, value)\nreturn obj\nasync def delete(self, request: Request, pks: List[Any]) -&gt; Optional[int]:\nsession: Union[Session, AsyncSession] = request.state.session\nobjs = await self.find_by_pks(request, pks)\nif isinstance(session, AsyncSession):\nfor obj in objs:\nawait session.delete(obj)\nawait session.commit()\nelse:\nfor obj in objs:\nawait anyio.to_thread.run_sync(session.delete, obj)\nawait anyio.to_thread.run_sync(session.commit)\nreturn len(objs)\nasync def build_full_text_search_query(\nself, request: Request, term: str, model: Any\n) -&gt; Any:\nreturn self.get_search_query(request, term)\ndef handle_exception(self, exc: Exception) -&gt; None:\ntry:\n\"\"\"Automatically handle sqlalchemy_file error\"\"\"\nsqlalchemy_file = __import__(\"sqlalchemy_file\")\nif isinstance(exc, sqlalchemy_file.exceptions.ValidationError):\nraise FormValidationError({exc.key: exc.msg})\nexcept ImportError:  # pragma: no cover\npass\nraise exc  # pragma: no cover\n</code></pre>"},{"location":"api/contrib/sqlalchemy/modelview/#starlette_admin.contrib.sqla.ModelView.get_count_query","title":"<code>get_count_query()</code>","text":"<p>Return a Select expression which is used as base statement for count method.</p> <p>Examples:</p> <pre><code>class PostView(ModelView):\ndef get_list_query(self):\nreturn super().get_list_query().where(Post.published == true())\ndef get_count_query(self):\nreturn super().get_count_query().where(Post.published == true())\n</code></pre> Source code in <code>starlette_admin/contrib/sqla/view.py</code> <pre><code>def get_count_query(self) -&gt; Select:\n\"\"\"\n    Return a Select expression which is used as base statement for\n    [count][starlette_admin.views.BaseModelView.count] method.\n    Examples:\n        ```python hl_lines=\"6-7\"\n        class PostView(ModelView):\n                def get_list_query(self):\n                    return super().get_list_query().where(Post.published == true())\n                def get_count_query(self):\n                    return super().get_count_query().where(Post.published == true())\n        ```\n    \"\"\"\nreturn select(func.count(self._pk_column))\n</code></pre>"},{"location":"api/contrib/sqlalchemy/modelview/#starlette_admin.contrib.sqla.ModelView.get_list_query","title":"<code>get_list_query()</code>","text":"<p>Return a Select expression which is used as base statement for find_all method.</p> <p>Examples:</p> <pre><code>class PostView(ModelView):\ndef get_list_query(self):\nreturn super().get_list_query().where(Post.published == true())\ndef get_count_query(self):\nreturn super().get_count_query().where(Post.published == true())\n</code></pre> <p>If you override this method, don't forget to also override get_count_query, for displaying the correct item count in the list view.</p> Source code in <code>starlette_admin/contrib/sqla/view.py</code> <pre><code>def get_list_query(self) -&gt; Select:\n\"\"\"\n    Return a Select expression which is used as base statement for\n    [find_all][starlette_admin.views.BaseModelView.find_all] method.\n    Examples:\n        ```python  hl_lines=\"3-4\"\n        class PostView(ModelView):\n                def get_list_query(self):\n                    return super().get_list_query().where(Post.published == true())\n                def get_count_query(self):\n                    return super().get_count_query().where(Post.published == true())\n        ```\n    If you override this method, don't forget to also override\n    [get_count_query][starlette_admin.contrib.sqla.ModelView.get_count_query],\n    for displaying the correct item count in the list view.\n    \"\"\"\nreturn select(self.model)\n</code></pre>"},{"location":"api/contrib/sqlalchemy/modelview/#starlette_admin.contrib.sqla.ModelView.get_search_query","title":"<code>get_search_query(request, term)</code>","text":"<p>Return SQLAlchemy whereclause to use for full text search</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>Starlette request</p> required <code>term</code> <code>str</code> <p>Filtering term</p> required <p>Examples:</p> <pre><code>class PostView(ModelView):\ndef get_search_query(self, request: Request, term: str):\nreturn Post.title.contains(term)\n</code></pre> Source code in <code>starlette_admin/contrib/sqla/view.py</code> <pre><code>def get_search_query(self, request: Request, term: str) -&gt; Any:\n\"\"\"\n    Return SQLAlchemy whereclause to use for full text search\n    Args:\n       request: Starlette request\n       term: Filtering term\n    Examples:\n       ```python\n       class PostView(ModelView):\n            def get_search_query(self, request: Request, term: str):\n                return Post.title.contains(term)\n       ```\n    \"\"\"\nclauses = []\nfor field in self.get_fields_list(request):\nif field.searchable and type(field) in [\nStringField,\nTextAreaField,\nEmailField,\nURLField,\nPhoneField,\nColorField,\n]:\nattr = getattr(self.model, field.name)\nclauses.append(cast(attr, String).ilike(f\"%{term}%\"))\nreturn or_(*clauses)\n</code></pre>"},{"location":"api/contrib/sqlalchemy/modelview/#starlette_admin.contrib.sqla.ModelView.validate","title":"<code>validate(request, data)</code>  <code>async</code>","text":"<p>Inherit this method to validate your data.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>Starlette request</p> required <code>data</code> <code>Dict[str, Any]</code> <p>Submitted data</p> required <p>Raises:</p> Type Description <code>FormValidationError</code> <p>to display errors to users</p> <p>Examples:</p> <pre><code>from starlette_admin.contrib.sqla import ModelView\nfrom starlette_admin.exceptions import FormValidationError\nclass Post(Base):\n__tablename__ = \"post\"\nid = Column(Integer, primary_key=True)\ntitle = Column(String(100), nullable=False)\ntext = Column(Text, nullable=False)\ndate = Column(Date)\nclass PostView(ModelView):\nasync def validate(self, request: Request, data: Dict[str, Any]) -&gt; None:\nerrors: Dict[str, str] = dict()\n_2day_from_today = date.today() + timedelta(days=2)\nif data[\"title\"] is None or len(data[\"title\"]) &lt; 3:\nerrors[\"title\"] = \"Ensure this value has at least 03 characters\"\nif data[\"text\"] is None or len(data[\"text\"]) &lt; 10:\nerrors[\"text\"] = \"Ensure this value has at least 10 characters\"\nif data[\"date\"] is None or data[\"date\"] &lt; _2day_from_today:\nerrors[\"date\"] = \"We need at least one day to verify your post\"\nif len(errors) &gt; 0:\nraise FormValidationError(errors)\nreturn await super().validate(request, data)\n</code></pre> Source code in <code>starlette_admin/contrib/sqla/view.py</code> <pre><code>async def validate(self, request: Request, data: Dict[str, Any]) -&gt; None:\n\"\"\"\n    Inherit this method to validate your data.\n    Args:\n        request: Starlette request\n        data: Submitted data\n    Raises:\n        FormValidationError: to display errors to users\n    Examples:\n        ```python\n        from starlette_admin.contrib.sqla import ModelView\n        from starlette_admin.exceptions import FormValidationError\n        class Post(Base):\n            __tablename__ = \"post\"\n            id = Column(Integer, primary_key=True)\n            title = Column(String(100), nullable=False)\n            text = Column(Text, nullable=False)\n            date = Column(Date)\n        class PostView(ModelView):\n            async def validate(self, request: Request, data: Dict[str, Any]) -&gt; None:\n                errors: Dict[str, str] = dict()\n                _2day_from_today = date.today() + timedelta(days=2)\n                if data[\"title\"] is None or len(data[\"title\"]) &lt; 3:\n                    errors[\"title\"] = \"Ensure this value has at least 03 characters\"\n                if data[\"text\"] is None or len(data[\"text\"]) &lt; 10:\n                    errors[\"text\"] = \"Ensure this value has at least 10 characters\"\n                if data[\"date\"] is None or data[\"date\"] &lt; _2day_from_today:\n                    errors[\"date\"] = \"We need at least one day to verify your post\"\n                if len(errors) &gt; 0:\n                    raise FormValidationError(errors)\n                return await super().validate(request, data)\n        ```\n    \"\"\"\n</code></pre>"},{"location":"api/fields/","title":"Fields","text":""},{"location":"api/fields/#starlette_admin.fields.BaseField","title":"<code>starlette_admin.fields.BaseField</code>  <code>dataclass</code>","text":"<p>Base class for fields</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Field name, same as attribute name in your model</p> required <code>label</code> <code>Optional[str]</code> <p>Field label</p> <code>None</code> <code>help_text</code> <code>Optional[str]</code> <p>Hint message to display in forms</p> <code>None</code> <code>type</code> <code>Optional[str]</code> <p>Field type, unique key used to define the field</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Disabled in forms</p> <code>False</code> <code>read_only</code> <code>Optional[bool]</code> <p>Read only in forms</p> <code>False</code> <code>id</code> <code>str</code> <p>Unique id, used to represent field instance</p> <code>''</code> <code>search_builder_type</code> <code>Optional[str]</code> <p>datatable columns.searchBuilderType, For more information click here</p> <code>'default'</code> <code>required</code> <code>Optional[bool]</code> <p>Indicate if the fields is required</p> <code>False</code> <code>exclude_from_list</code> <code>Optional[bool]</code> <p>Control field visibility in list page</p> <code>False</code> <code>exclude_from_detail</code> <code>Optional[bool]</code> <p>Control field visibility in detail page</p> <code>False</code> <code>exclude_from_create</code> <code>Optional[bool]</code> <p>Control field visibility in create page</p> <code>False</code> <code>exclude_from_edit</code> <code>Optional[bool]</code> <p>Control field visibility in edit page</p> <code>False</code> <code>searchable</code> <code>Optional[bool]</code> <p>Indicate if the fields is searchable</p> <code>True</code> <code>orderable</code> <code>Optional[bool]</code> <p>Indicate if the fields is orderable</p> <code>True</code> <code>render_function_key</code> <code>str</code> <p>Render function key inside the global <code>render</code> variable in javascript</p> <code>'text'</code> <code>form_template</code> <code>str</code> <p>template for rendering this field in creation and edit page</p> <code>'forms/input.html'</code> <code>display_template</code> <code>str</code> <p>template for displaying this field in detail page</p> <code>'displays/text.html'</code> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass BaseField:\n\"\"\"\n    Base class for fields\n    Parameters:\n        name: Field name, same as attribute name in your model\n        label: Field label\n        help_text: Hint message to display in forms\n        type: Field type, unique key used to define the field\n        disabled: Disabled in forms\n        read_only: Read only in forms\n        id: Unique id, used to represent field instance\n        search_builder_type: datatable columns.searchBuilderType, For more information\n            [click here](https://datatables.net/reference/option/columns.searchBuilderType)\n        required: Indicate if the fields is required\n        exclude_from_list: Control field visibility in list page\n        exclude_from_detail: Control field visibility in detail page\n        exclude_from_create: Control field visibility in create page\n        exclude_from_edit: Control field visibility in edit page\n        searchable: Indicate if the fields is searchable\n        orderable: Indicate if the fields is orderable\n        render_function_key: Render function key inside the global `render` variable in javascript\n        form_template: template for rendering this field in creation and edit page\n        display_template: template for displaying this field in detail page\n    \"\"\"\nname: str\nlabel: Optional[str] = None\ntype: Optional[str] = None\nhelp_text: Optional[str] = None\ndisabled: Optional[bool] = False\nread_only: Optional[bool] = False\nid: str = \"\"\nsearch_builder_type: Optional[str] = \"default\"\nrequired: Optional[bool] = False\nexclude_from_list: Optional[bool] = False\nexclude_from_detail: Optional[bool] = False\nexclude_from_create: Optional[bool] = False\nexclude_from_edit: Optional[bool] = False\nsearchable: Optional[bool] = True\norderable: Optional[bool] = True\nrender_function_key: str = \"text\"\nform_template: str = \"forms/input.html\"\nlabel_template: str = \"forms/_label.html\"\ndisplay_template: str = \"displays/text.html\"\nerror_class = \"is-invalid\"\ndef __post_init__(self) -&gt; None:\nif self.label is None:\nself.label = self.name.replace(\"_\", \" \").capitalize()\nif self.type is None:\nself.type = type(self).__name__\nself.id = self.name\nasync def parse_form_data(\nself, request: Request, form_data: FormData, action: RequestAction\n) -&gt; Any:\n\"\"\"\n        Extracts the value of this field from submitted form data.\n        \"\"\"\nreturn form_data.get(self.id)\nasync def parse_obj(self, request: Request, obj: Any) -&gt; Any:\n\"\"\"Extracts the value of this field from a model instance.\n        By default, this function returns the value of the attribute with the name `self.name` from `obj`.\n        However, this function can be overridden to provide custom logic for computing the value of a field.\n        ??? Example\n            ```py\n            # Suppose we have a `User` model with `id`, `first_name`, and `last_name` fields.\n            # We define a custom field called `MyCustomField` to compute the full name of the user:\n            class MyCustomField(StringField):\n                async def parse_obj(self, request: Request, obj: Any) -&gt; Any:\n                    return f\"{obj.first_name} {obj.last_name}\"  # Returns the full name of the user\n            # Then, We can define our view as follows\n            class UserView(ModelView):\n                fields = [\"id\", MyCustomField(\"full_name\")]\n            ```\n        \"\"\"\nreturn getattr(obj, self.name, None)\nasync def serialize_none_value(\nself, request: Request, action: RequestAction\n) -&gt; Any:\n\"\"\"Formats a None value for sending to the frontend.\n        Args:\n            request: The current request object.\n            action: The current request action.\n        Returns:\n            Any: The formatted None value.\n        \"\"\"\nreturn None\nasync def serialize_value(\nself, request: Request, value: Any, action: RequestAction\n) -&gt; Any:\n\"\"\"Formats a value for sending to the frontend based on the current request action.\n        !!! important\n            Make sure this value is JSON Serializable for RequestAction.LIST and RequestAction.API\n        Args:\n            request: The current request object.\n            value: The value to format.\n            action: The current request action.\n        Returns:\n            Any: The formatted value.\n        \"\"\"\nreturn value\ndef additional_css_links(\nself, request: Request, action: RequestAction\n) -&gt; List[str]:\n\"\"\"Returns a list of CSS file URLs to include for the current request action.\"\"\"\nreturn []\ndef additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\n\"\"\"Returns a list of JavaScript file URLs to include for the current request action.\"\"\"\nreturn []\ndef dict(self) -&gt; Dict[str, Any]:\n\"\"\"Return the dataclass instance as a dictionary.\"\"\"\nreturn asdict(self)\ndef input_params(self) -&gt; str:\n\"\"\"Return HTML input parameters as a string.\"\"\"\nreturn html_params(\n{\n\"disabled\": self.disabled,\n\"readonly\": self.read_only,\n}\n)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.BaseField.additional_css_links","title":"<code>additional_css_links(request, action)</code>","text":"<p>Returns a list of CSS file URLs to include for the current request action.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>def additional_css_links(\nself, request: Request, action: RequestAction\n) -&gt; List[str]:\n\"\"\"Returns a list of CSS file URLs to include for the current request action.\"\"\"\nreturn []\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.BaseField.additional_js_links","title":"<code>additional_js_links(request, action)</code>","text":"<p>Returns a list of JavaScript file URLs to include for the current request action.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>def additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\n\"\"\"Returns a list of JavaScript file URLs to include for the current request action.\"\"\"\nreturn []\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.BaseField.dict","title":"<code>dict()</code>","text":"<p>Return the dataclass instance as a dictionary.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>def dict(self) -&gt; Dict[str, Any]:\n\"\"\"Return the dataclass instance as a dictionary.\"\"\"\nreturn asdict(self)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.BaseField.input_params","title":"<code>input_params()</code>","text":"<p>Return HTML input parameters as a string.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>def input_params(self) -&gt; str:\n\"\"\"Return HTML input parameters as a string.\"\"\"\nreturn html_params(\n{\n\"disabled\": self.disabled,\n\"readonly\": self.read_only,\n}\n)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.BaseField.parse_form_data","title":"<code>parse_form_data(request, form_data, action)</code>  <code>async</code>","text":"<p>Extracts the value of this field from submitted form data.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>async def parse_form_data(\nself, request: Request, form_data: FormData, action: RequestAction\n) -&gt; Any:\n\"\"\"\n    Extracts the value of this field from submitted form data.\n    \"\"\"\nreturn form_data.get(self.id)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.BaseField.parse_obj","title":"<code>parse_obj(request, obj)</code>  <code>async</code>","text":"<p>Extracts the value of this field from a model instance.</p> <p>By default, this function returns the value of the attribute with the name <code>self.name</code> from <code>obj</code>. However, this function can be overridden to provide custom logic for computing the value of a field.</p> Example <pre><code># Suppose we have a `User` model with `id`, `first_name`, and `last_name` fields.\n# We define a custom field called `MyCustomField` to compute the full name of the user:\nclass MyCustomField(StringField):\nasync def parse_obj(self, request: Request, obj: Any) -&gt; Any:\nreturn f\"{obj.first_name} {obj.last_name}\"  # Returns the full name of the user\n# Then, We can define our view as follows\nclass UserView(ModelView):\nfields = [\"id\", MyCustomField(\"full_name\")]\n</code></pre> Source code in <code>starlette_admin/fields.py</code> <pre><code>async def parse_obj(self, request: Request, obj: Any) -&gt; Any:\n\"\"\"Extracts the value of this field from a model instance.\n    By default, this function returns the value of the attribute with the name `self.name` from `obj`.\n    However, this function can be overridden to provide custom logic for computing the value of a field.\n    ??? Example\n        ```py\n        # Suppose we have a `User` model with `id`, `first_name`, and `last_name` fields.\n        # We define a custom field called `MyCustomField` to compute the full name of the user:\n        class MyCustomField(StringField):\n            async def parse_obj(self, request: Request, obj: Any) -&gt; Any:\n                return f\"{obj.first_name} {obj.last_name}\"  # Returns the full name of the user\n        # Then, We can define our view as follows\n        class UserView(ModelView):\n            fields = [\"id\", MyCustomField(\"full_name\")]\n        ```\n    \"\"\"\nreturn getattr(obj, self.name, None)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.BaseField.serialize_none_value","title":"<code>serialize_none_value(request, action)</code>  <code>async</code>","text":"<p>Formats a None value for sending to the frontend.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The current request object.</p> required <code>action</code> <code>RequestAction</code> <p>The current request action.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The formatted None value.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>async def serialize_none_value(\nself, request: Request, action: RequestAction\n) -&gt; Any:\n\"\"\"Formats a None value for sending to the frontend.\n    Args:\n        request: The current request object.\n        action: The current request action.\n    Returns:\n        Any: The formatted None value.\n    \"\"\"\nreturn None\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.BaseField.serialize_value","title":"<code>serialize_value(request, value, action)</code>  <code>async</code>","text":"<p>Formats a value for sending to the frontend based on the current request action.</p> <p>Important</p> <p>Make sure this value is JSON Serializable for RequestAction.LIST and RequestAction.API</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The current request object.</p> required <code>value</code> <code>Any</code> <p>The value to format.</p> required <code>action</code> <code>RequestAction</code> <p>The current request action.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The formatted value.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>async def serialize_value(\nself, request: Request, value: Any, action: RequestAction\n) -&gt; Any:\n\"\"\"Formats a value for sending to the frontend based on the current request action.\n    !!! important\n        Make sure this value is JSON Serializable for RequestAction.LIST and RequestAction.API\n    Args:\n        request: The current request object.\n        value: The value to format.\n        action: The current request action.\n    Returns:\n        Any: The formatted value.\n    \"\"\"\nreturn value\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.BooleanField","title":"<code>starlette_admin.fields.BooleanField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>BaseField</code></p> <p>This field displays the <code>true/false</code> value of a boolean property.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass BooleanField(BaseField):\n\"\"\"This field displays the `true/false` value of a boolean property.\"\"\"\nsearch_builder_type: Optional[str] = \"bool\"\nrender_function_key: str = \"boolean\"\nform_template: str = \"forms/boolean.html\"\ndisplay_template: str = \"displays/boolean.html\"\nasync def parse_form_data(\nself, request: Request, form_data: FormData, action: RequestAction\n) -&gt; bool:\nreturn form_data.get(self.id) == \"on\"\nasync def serialize_value(\nself, request: Request, value: Any, action: RequestAction\n) -&gt; bool:\nreturn bool(value)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.IntegerField","title":"<code>starlette_admin.fields.IntegerField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>NumberField</code></p> <p>This field is used to represent the value of properties that store integer numbers. Erroneous input is ignored and will not be accepted as a value.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass IntegerField(NumberField):\n\"\"\"\n    This field is used to represent the value of properties that store integer numbers.\n    Erroneous input is ignored and will not be accepted as a value.\"\"\"\nclass_: str = \"field-integer form-control\"\nasync def parse_form_data(\nself, request: Request, form_data: FormData, action: RequestAction\n) -&gt; Optional[int]:\ntry:\nreturn int(form_data.get(self.id))  # type: ignore\nexcept (ValueError, TypeError):\nreturn None\nasync def serialize_value(\nself, request: Request, value: Any, action: RequestAction\n) -&gt; Any:\nreturn int(value)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.DecimalField","title":"<code>starlette_admin.fields.DecimalField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>NumberField</code></p> <p>This field is used to represent the value of properties that store decimal numbers. Erroneous input is ignored and will not be accepted as a value.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass DecimalField(NumberField):\n\"\"\"\n    This field is used to represent the value of properties that store decimal numbers.\n    Erroneous input is ignored and will not be accepted as a value.\n    \"\"\"\nstep: str = \"any\"\nclass_: str = \"field-decimal form-control\"\nasync def parse_form_data(\nself, request: Request, form_data: FormData, action: RequestAction\n) -&gt; Optional[decimal.Decimal]:\ntry:\nreturn decimal.Decimal(form_data.get(self.id))  # type: ignore\nexcept (decimal.InvalidOperation, ValueError):\nreturn None\nasync def serialize_value(\nself, request: Request, value: Any, action: RequestAction\n) -&gt; str:\nreturn str(value)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.FloatField","title":"<code>starlette_admin.fields.FloatField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>StringField</code></p> <p>A text field, except all input is coerced to an float.  Erroneous input is ignored and will not be accepted as a value.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass FloatField(StringField):\n\"\"\"\n    A text field, except all input is coerced to an float.\n     Erroneous input is ignored and will not be accepted as a value.\n    \"\"\"\nclass_: str = \"field-float form-control\"\nasync def parse_form_data(\nself, request: Request, form_data: FormData, action: RequestAction\n) -&gt; Optional[float]:\ntry:\nreturn float(form_data.get(self.id))  # type: ignore\nexcept ValueError:\nreturn None\nasync def serialize_value(\nself, request: Request, value: Any, action: RequestAction\n) -&gt; float:\nreturn float(value)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.StringField","title":"<code>starlette_admin.fields.StringField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>BaseField</code></p> <p>This field is used to represent any kind of short text content.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass StringField(BaseField):\n\"\"\"This field is used to represent any kind of short text content.\"\"\"\nmaxlength: Optional[int] = None\nminlength: Optional[int] = None\nsearch_builder_type: Optional[str] = \"string\"\ninput_type: str = \"text\"\nclass_: str = \"field-string form-control\"\nplaceholder: Optional[str] = None\ndef input_params(self) -&gt; str:\nreturn html_params(\n{\n\"type\": self.input_type,\n\"minlength\": self.minlength,\n\"maxlength\": self.maxlength,\n\"placeholder\": self.placeholder,\n\"required\": self.required,\n\"disabled\": self.disabled,\n\"readonly\": self.read_only,\n}\n)\nasync def serialize_value(\nself, request: Request, value: Any, action: RequestAction\n) -&gt; Any:\nreturn str(value)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.TextAreaField","title":"<code>starlette_admin.fields.TextAreaField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>StringField</code></p> <p>This field is used to represent any kind of long text content. For short text contents, use StringField</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass TextAreaField(StringField):\n\"\"\"This field is used to represent any kind of long text content.\n    For short text contents, use [StringField][starlette_admin.fields.StringField]\"\"\"\nrows: int = 6\nclass_: str = \"field-textarea form-control\"\nform_template: str = \"forms/textarea.html\"\ndisplay_template: str = \"displays/textarea.html\"\ndef input_params(self) -&gt; str:\nreturn html_params(\n{\n\"rows\": self.rows,\n\"minlength\": self.minlength,\n\"maxlength\": self.maxlength,\n\"placeholder\": self.placeholder,\n\"required\": self.required,\n\"disabled\": self.disabled,\n\"readonly\": self.read_only,\n}\n)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.TinyMCEEditorField","title":"<code>starlette_admin.fields.TinyMCEEditorField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>TextAreaField</code></p> <p>A field that provides a WYSIWYG editor for long text content using the  TinyMCE library.</p> <p>This field can be used as an alternative to the TextAreaField to provide a more sophisticated editor for user input.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass TinyMCEEditorField(TextAreaField):\n\"\"\"A field that provides a WYSIWYG editor for long text content using the\n     [TinyMCE](https://www.tiny.cloud/) library.\n    This field can be used as an alternative to the [TextAreaField][starlette_admin.fields.TextAreaField]\n    to provide a more sophisticated editor for user input.\n    \"\"\"\nclass_: str = \"field-tinymce-editor form-control\"\ndisplay_template: str = \"displays/tinymce.html\"\ndef additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\nif action.is_form():\nreturn [\n\"https://cdn.jsdelivr.net/npm/tinymce@6.4/tinymce.min.js\",\n\"https://cdn.jsdelivr.net/npm/@tinymce/tinymce-jquery@2.0/dist/tinymce-jquery.min.js\",\n]\nreturn []\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.TagsField","title":"<code>starlette_admin.fields.TagsField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>BaseField</code></p> <p>This field is used to represent the value of properties that store a list of string values. Render as <code>select2</code> tags input.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass TagsField(BaseField):\n\"\"\"\n    This field is used to represent the value of properties that store a list of\n    string values. Render as `select2` tags input.\n    \"\"\"\nform_template: str = \"forms/tags.html\"\nform_js: str = \"js/field/forms/tags.js\"\nclass_: str = \"field-tags form-control form-select\"\nasync def parse_form_data(\nself, request: Request, form_data: FormData, action: RequestAction\n) -&gt; List[str]:\nreturn form_data.getlist(self.id)  # type: ignore\ndef additional_css_links(\nself, request: Request, action: RequestAction\n) -&gt; List[str]:\nif action.is_form():\nreturn [\nstr(\nrequest.url_for(\nf\"{request.app.state.ROUTE_NAME}:statics\",\npath=\"css/select2.min.css\",\n)\n)\n]\nreturn []\ndef additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\nif action.is_form():\nreturn [\nstr(\nrequest.url_for(\nf\"{request.app.state.ROUTE_NAME}:statics\",\npath=\"js/vendor/select2.min.js\",\n)\n)\n]\nreturn []\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.EmailField","title":"<code>starlette_admin.fields.EmailField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>StringField</code></p> <p>This field is used to represent a text content that stores a single email address.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass EmailField(StringField):\n\"\"\"This field is used to represent a text content\n    that stores a single email address.\"\"\"\ninput_type: str = \"email\"\nrender_function_key: str = \"email\"\nclass_: str = \"field-email form-control\"\ndisplay_template: str = \"displays/email.html\"\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.URLField","title":"<code>starlette_admin.fields.URLField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>StringField</code></p> <p>This field is used to represent a text content that stores a single URL.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass URLField(StringField):\n\"\"\"This field is used to represent a text content that stores a single URL.\"\"\"\ninput_type: str = \"url\"\nrender_function_key: str = \"url\"\nclass_: str = \"field-url form-control\"\ndisplay_template: str = \"displays/url.html\"\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.PhoneField","title":"<code>starlette_admin.fields.PhoneField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>StringField</code></p> <p>A StringField, except renders an <code>&lt;input type=\"phone\"&gt;</code>.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass PhoneField(StringField):\n\"\"\"A StringField, except renders an `&lt;input type=\"phone\"&gt;`.\"\"\"\ninput_type: str = \"phone\"\nclass_: str = \"field-phone form-control\"\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.ColorField","title":"<code>starlette_admin.fields.ColorField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>StringField</code></p> <p>A StringField, except renders an <code>&lt;input type=\"color\"&gt;</code>.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass ColorField(StringField):\n\"\"\"A StringField, except renders an `&lt;input type=\"color\"&gt;`.\"\"\"\ninput_type: str = \"color\"\nclass_: str = \"field-color form-control form-control-color\"\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.PasswordField","title":"<code>starlette_admin.fields.PasswordField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>StringField</code></p> <p>A StringField, except renders an <code>&lt;input type=\"password\"&gt;</code>.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass PasswordField(StringField):\n\"\"\"A StringField, except renders an `&lt;input type=\"password\"&gt;`.\"\"\"\ninput_type: str = \"password\"\nclass_: str = \"field-password form-control\"\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.EnumField","title":"<code>starlette_admin.fields.EnumField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>StringField</code></p> <p>Enumeration Field. It takes a python <code>enum.Enum</code> class or a list of (value, label) pairs. It can also be a list of only values, in which case the value is used as the label. Example:     <pre><code>class Status(str, enum.Enum):\nNEW = \"new\"\nONGOING = \"ongoing\"\nDONE = \"done\"\nclass MyModel:\nstatus: Optional[Status] = None\nclass MyModelView(ModelView):\nfields = [EnumField(\"status\", enum=Status)]\n</code></pre></p> <pre><code>```Python\nclass MyModel:\n    language: str\n\nclass MyModelView(ModelView):\n    fields = [\n        EnumField(\n            \"language\",\n            choices=[(\"cpp\", \"C++\"), (\"py\", \"Python\"), (\"text\", \"Plain Text\")],\n        )\n    ]\n```\n</code></pre> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass EnumField(StringField):\n\"\"\"\n    Enumeration Field.\n    It takes a python `enum.Enum` class or a list of *(value, label)* pairs.\n    It can also be a list of only values, in which case the value is used as the label.\n    Example:\n        ```Python\n        class Status(str, enum.Enum):\n            NEW = \"new\"\n            ONGOING = \"ongoing\"\n            DONE = \"done\"\n        class MyModel:\n            status: Optional[Status] = None\n        class MyModelView(ModelView):\n            fields = [EnumField(\"status\", enum=Status)]\n        ```\n        ```Python\n        class MyModel:\n            language: str\n        class MyModelView(ModelView):\n            fields = [\n                EnumField(\n                    \"language\",\n                    choices=[(\"cpp\", \"C++\"), (\"py\", \"Python\"), (\"text\", \"Plain Text\")],\n                )\n            ]\n        ```\n    \"\"\"\nmultiple: bool = False\nenum: Optional[Type[Enum]] = None\nchoices: Union[Sequence[str], Sequence[Tuple[Any, str]], None] = None\nchoices_loader: Optional[\nCallable[[Request], Union[Sequence[str], Sequence[Tuple[Any, str]]]]\n] = dc_field(default=None, compare=False)\nform_template: str = \"forms/enum.html\"\nclass_: str = \"field-enum form-control form-select\"\ncoerce: Callable[[Any], Any] = str\nselect2: bool = True\ndef __post_init__(self) -&gt; None:\nif self.choices and not isinstance(self.choices[0], (list, tuple)):\nself.choices = list(zip(self.choices, self.choices))  # type: ignore\nelif self.enum:\nself.choices = [(e.value, e.name.replace(\"_\", \" \")) for e in self.enum]\nself.coerce = int if issubclass(self.enum, IntEnum) else str\nelif not self.choices and self.choices_loader is None:\nraise ValueError(\n\"EnumField required a list of choices, enum class or a choices_loader for dynamic choices\"\n)\nsuper().__post_init__()\nasync def parse_form_data(\nself, request: Request, form_data: FormData, action: RequestAction\n) -&gt; Any:\nreturn (\nlist(map(self.coerce, form_data.getlist(self.id)))\nif self.multiple\nelse (\nself.coerce(form_data.get(self.id)) if form_data.get(self.id) else None\n)\n)\ndef _get_choices(self, request: Request) -&gt; Any:\nreturn (\nself.choices\nif self.choices_loader is None\nelse self.choices_loader(request)\n)\ndef _get_label(self, value: Any, request: Request) -&gt; Any:\nfor v, label in self._get_choices(request):\nif value == v:\nreturn label\nraise ValueError(f\"Invalid choice value: {value}\")\nasync def serialize_value(\nself, request: Request, value: Any, action: RequestAction\n) -&gt; Any:\nif isinstance(value, Enum):\nvalue = value.value\nlabels = [\n(self._get_label(v, request) if action != RequestAction.EDIT else v)\nfor v in (value if self.multiple else [value])\n]\nreturn labels if self.multiple else labels[0]\ndef additional_css_links(\nself, request: Request, action: RequestAction\n) -&gt; List[str]:\nif self.select2 and action.is_form():\nreturn [\nstr(\nrequest.url_for(\nf\"{request.app.state.ROUTE_NAME}:statics\",\npath=\"css/select2.min.css\",\n)\n)\n]\nreturn []\ndef additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\nif self.select2 and action.is_form():\nreturn [\nstr(\nrequest.url_for(\nf\"{request.app.state.ROUTE_NAME}:statics\",\npath=\"js/vendor/select2.min.js\",\n)\n)\n]\nreturn []\n@classmethod\ndef from_enum(\ncls,\nname: str,\nenum_type: Type[Enum],\nmultiple: bool = False,\n**kwargs: Dict[str, Any],\n) -&gt; \"EnumField\":\nwarnings.warn(\nf'This method is deprecated. Use EnumField(\"name\", enum={enum_type.__name__}) instead.',\nDeprecationWarning,\nstacklevel=1,\n)\nreturn cls(name, enum=enum_type, multiple=multiple, **kwargs)  # type: ignore\n@classmethod\ndef from_choices(\ncls,\nname: str,\nchoices: Union[Sequence[str], Sequence[Tuple[str, str]], None],\nmultiple: bool = False,\n**kwargs: Dict[str, Any],\n) -&gt; \"EnumField\":\nwarnings.warn(\nf'This method is deprecated. Use EnumField(\"name\", choices={choices}) instead.',\nDeprecationWarning,\nstacklevel=1,\n)\nreturn cls(name, choices=choices, multiple=multiple, **kwargs)  # type: ignore\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.TimeZoneField","title":"<code>starlette_admin.fields.TimeZoneField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>EnumField</code></p> <p>This field is used to represent the name of a timezone (eg. Africa/Porto-Novo)</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass TimeZoneField(EnumField):\n\"\"\"This field is used to represent the name of a timezone (eg. Africa/Porto-Novo)\"\"\"\ndef __post_init__(self) -&gt; None:\nif self.choices is None:\nself.choices = [\n(self.coerce(x), x.replace(\"_\", \" \")) for x in common_timezones\n]\nsuper().__post_init__()\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.CountryField","title":"<code>starlette_admin.fields.CountryField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>EnumField</code></p> <p>This field is used to represent the name that corresponds to the country code stored in your database</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass CountryField(EnumField):\n\"\"\"This field is used to represent the name that corresponds to the country code stored in your database\"\"\"\ndef __post_init__(self) -&gt; None:\ntry:\nimport babel  # noqa\nexcept ImportError as err:\nraise ImportError(\n\"'babel' package is required to use 'CountryField'. Install it with `pip install starlette-admin[i18n]`\"\n) from err\nself.choices_loader = lambda request: get_countries_list()\nsuper().__post_init__()\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.CurrencyField","title":"<code>starlette_admin.fields.CurrencyField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>EnumField</code></p> <p>This field is used to represent a value that stores the 3-letter ISO 4217 code of currency</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass CurrencyField(EnumField):\n\"\"\"\n    This field is used to represent a value that stores the\n    [3-letter ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of currency\n    \"\"\"\ndef __post_init__(self) -&gt; None:\ntry:\nimport babel  # noqa\nexcept ImportError as err:\nraise ImportError(\n\"'babel' package is required to use 'CurrencyField'. Install it with `pip install starlette-admin[i18n]`\"\n) from err\nself.choices_loader = lambda request: get_currencies_list()\nsuper().__post_init__()\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.DateTimeField","title":"<code>starlette_admin.fields.DateTimeField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>NumberField</code></p> <p>This field is used to represent a value that stores a python datetime.datetime object Parameters:     search_format: moment.js format to send for searching. Use None for iso Format     output_format: display output format</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass DateTimeField(NumberField):\n\"\"\"\n    This field is used to represent a value that stores a python datetime.datetime object\n    Parameters:\n        search_format: moment.js format to send for searching. Use None for iso Format\n        output_format: display output format\n    \"\"\"\ninput_type: str = \"datetime-local\"\nclass_: str = \"field-datetime form-control\"\nsearch_builder_type: str = \"moment-LL LT\"\noutput_format: Optional[str] = None\nsearch_format: Optional[str] = None\nform_alt_format: Optional[str] = \"F j, Y  H:i:S\"\ndef input_params(self) -&gt; str:\nreturn html_params(\n{\n\"type\": self.input_type,\n\"min\": self.min,\n\"max\": self.max,\n\"step\": self.step,\n\"data_alt_format\": self.form_alt_format,\n\"data_locale\": get_locale(),\n\"placeholder\": self.placeholder,\n\"required\": self.required,\n\"disabled\": self.disabled,\n\"readonly\": self.read_only,\n}\n)\nasync def parse_form_data(\nself, request: Request, form_data: FormData, action: RequestAction\n) -&gt; Any:\ntry:\nreturn datetime.fromisoformat(form_data.get(self.id))  # type: ignore\nexcept (TypeError, ValueError):\nreturn None\nasync def serialize_value(\nself, request: Request, value: Any, action: RequestAction\n) -&gt; str:\nassert isinstance(\nvalue, (datetime, date, time)\n), f\"Expect datetime | date | time, got  {type(value)}\"\nif action != RequestAction.EDIT:\nreturn format_datetime(value, self.output_format)\nreturn value.isoformat()\ndef additional_css_links(\nself, request: Request, action: RequestAction\n) -&gt; List[str]:\nif action.is_form():\nreturn [\nstr(\nrequest.url_for(\nf\"{request.app.state.ROUTE_NAME}:statics\",\npath=\"css/flatpickr.min.css\",\n)\n)\n]\nreturn []\ndef additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\n_links = [\nstr(\nrequest.url_for(\nf\"{request.app.state.ROUTE_NAME}:statics\",\npath=\"js/vendor/flatpickr.min.js\",\n)\n)\n]\nif get_locale() != \"en\":\n_links.append(\nstr(\nrequest.url_for(\nf\"{request.app.state.ROUTE_NAME}:statics\",\npath=f\"i18n/flatpickr/{get_locale()}.js\",\n)\n)\n)\nif action.is_form():\nreturn _links\nreturn []\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.DateField","title":"<code>starlette_admin.fields.DateField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>DateTimeField</code></p> <p>This field is used to represent a value that stores a python datetime.date object Parameters:     search_format: moment.js format to send for searching. Use None for iso Format     output_format: Set display output format</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass DateField(DateTimeField):\n\"\"\"\n    This field is used to represent a value that stores a python datetime.date object\n    Parameters:\n        search_format: moment.js format to send for searching. Use None for iso Format\n        output_format: Set display output format\n    \"\"\"\ninput_type: str = \"date\"\nclass_: str = \"field-date form-control\"\noutput_format: Optional[str] = None\nsearch_format: str = \"YYYY-MM-DD\"\nsearch_builder_type: str = \"moment-LL\"\nform_alt_format: Optional[str] = \"F j, Y\"\nasync def parse_form_data(\nself, request: Request, form_data: FormData, action: RequestAction\n) -&gt; Any:\ntry:\nreturn date.fromisoformat(form_data.get(self.id))  # type: ignore\nexcept (TypeError, ValueError):\nreturn None\nasync def serialize_value(\nself, request: Request, value: Any, action: RequestAction\n) -&gt; str:\nassert isinstance(value, date), f\"Expect date, got  {type(value)}\"\nif action != RequestAction.EDIT:\nreturn format_date(value, self.output_format)\nreturn value.isoformat()\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.TimeField","title":"<code>starlette_admin.fields.TimeField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>DateTimeField</code></p> <p>This field is used to represent a value that stores a python datetime.time object Parameters:     search_format: Format to send for search. Use None for iso Format     output_format: Set display output format</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass TimeField(DateTimeField):\n\"\"\"\n    This field is used to represent a value that stores a python datetime.time object\n    Parameters:\n        search_format: Format to send for search. Use None for iso Format\n        output_format: Set display output format\n    \"\"\"\ninput_type: str = \"time\"\nclass_: str = \"field-time form-control\"\nsearch_builder_type: str = \"moment-LTS\"\noutput_format: Optional[str] = None\nsearch_format: str = \"HH:mm:ss\"\nform_alt_format: Optional[str] = \"H:i:S\"\nasync def parse_form_data(\nself, request: Request, form_data: FormData, action: RequestAction\n) -&gt; Any:\ntry:\nreturn time.fromisoformat(form_data.get(self.id))  # type: ignore\nexcept (TypeError, ValueError):\nreturn None\nasync def serialize_value(\nself, request: Request, value: Any, action: RequestAction\n) -&gt; str:\nassert isinstance(value, time), f\"Expect time, got  {type(value)}\"\nif action != RequestAction.EDIT:\nreturn format_time(value, self.output_format)\nreturn value.isoformat()\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.ArrowField","title":"<code>starlette_admin.fields.ArrowField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>DateTimeField</code></p> <p>This field is used to represent sqlalchemy_utils.types.arrow.ArrowType</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass ArrowField(DateTimeField):\n\"\"\"\n    This field is used to represent sqlalchemy_utils.types.arrow.ArrowType\n    \"\"\"\ndef __post_init__(self) -&gt; None:\nif not arrow:  # pragma: no cover\nraise ImportError(\"'arrow' package is required to use 'ArrowField'\")\nsuper().__post_init__()\nasync def parse_form_data(\nself, request: Request, form_data: FormData, action: RequestAction\n) -&gt; Any:\ntry:\nreturn arrow.get(form_data.get(self.id))  # type: ignore\nexcept (TypeError, arrow.parser.ParserError):  # pragma: no cover\nreturn None\nasync def serialize_value(\nself, request: Request, value: Any, action: RequestAction\n) -&gt; str:\nassert isinstance(value, arrow.Arrow), f\"Expected Arrow, got  {type(value)}\"\nif action != RequestAction.EDIT:\nreturn value.humanize(locale=get_locale())\nreturn value.isoformat()\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.JSONField","title":"<code>starlette_admin.fields.JSONField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>BaseField</code></p> <p>This field render jsoneditor and represent a value that stores python dict object. Erroneous input is ignored and will not be accepted as a value.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass JSONField(BaseField):\n\"\"\"\n    This field render jsoneditor and represent a value that stores python dict object.\n    Erroneous input is ignored and will not be accepted as a value.\"\"\"\nheight: str = \"20em\"\nmodes: Optional[Sequence[str]] = None\nrender_function_key: str = \"json\"\nform_template: str = \"forms/json.html\"\ndisplay_template: str = \"displays/json.html\"\ndef __post_init__(self) -&gt; None:\nif self.modes is None:\nself.modes = [\"view\"] if self.read_only else [\"tree\", \"code\"]\nsuper().__post_init__()\nasync def parse_form_data(\nself, request: Request, form_data: FormData, action: RequestAction\n) -&gt; Optional[Dict[str, Any]]:\ntry:\nvalue = form_data.get(self.id)\nreturn json.loads(value) if value is not None else None  # type: ignore\nexcept JSONDecodeError:\nreturn None\ndef additional_css_links(\nself, request: Request, action: RequestAction\n) -&gt; List[str]:\nif action.is_form():\nreturn [\nstr(\nrequest.url_for(\nf\"{request.app.state.ROUTE_NAME}:statics\",\npath=\"css/jsoneditor.min.css\",\n)\n)\n]\nreturn []\ndef additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\nif action.is_form():\nreturn [\nstr(\nrequest.url_for(\nf\"{request.app.state.ROUTE_NAME}:statics\",\npath=\"js/vendor/jsoneditor.min.js\",\n)\n)\n]\nreturn []\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.FileField","title":"<code>starlette_admin.fields.FileField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>BaseField</code></p> <p>Renders a file upload field. This field is used to represent a value that stores starlette UploadFile object. For displaying value, this field wait for three properties which is <code>filename</code>, <code>content-type</code> and <code>url</code>. Use <code>multiple=True</code> for multiple file upload When user ask for delete on editing page, the second part of the returned tuple is True.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass FileField(BaseField):\n\"\"\"\n    Renders a file upload field.\n    This field is used to represent a value that stores starlette UploadFile object.\n    For displaying value, this field wait for three properties which is `filename`,\n    `content-type` and `url`. Use `multiple=True` for multiple file upload\n    When user ask for delete on editing page, the second part of the returned tuple is True.\n    \"\"\"\naccept: Optional[str] = None\nmultiple: bool = False\nrender_function_key: str = \"file\"\nform_template: str = \"forms/file.html\"\ndisplay_template: str = \"displays/file.html\"\nasync def parse_form_data(\nself, request: Request, form_data: FormData, action: RequestAction\n) -&gt; Tuple[Union[UploadFile, List[UploadFile], None], bool]:\nshould_be_deleted = form_data.get(f\"_{self.id}-delete\") == \"on\"\nif self.multiple:\nfiles = form_data.getlist(self.id)\nreturn [f for f in files if not is_empty_file(f.file)], should_be_deleted  # type: ignore\nfile = form_data.get(self.id)\nreturn (None if (file and is_empty_file(file.file)) else file), should_be_deleted  # type: ignore\ndef _isvalid_value(self, value: Any) -&gt; bool:\nreturn value is not None and all(\n(\nhasattr(v, \"url\")\nor (isinstance(v, dict) and v.get(\"url\", None) is not None)\n)\nfor v in (value if self.multiple else [value])\n)\ndef input_params(self) -&gt; str:\nreturn html_params(\n{\n\"accept\": self.accept,\n\"disabled\": self.disabled,\n\"readonly\": self.read_only,\n\"multiple\": self.multiple,\n}\n)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.ImageField","title":"<code>starlette_admin.fields.ImageField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>FileField</code></p> <p>FileField with <code>accept=\"image/*\"</code>.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass ImageField(FileField):\n\"\"\"\n    FileField with `accept=\"image/*\"`.\n    \"\"\"\naccept: Optional[str] = \"image/*\"\nrender_function_key: str = \"image\"\nform_template: str = \"forms/image.html\"\ndisplay_template: str = \"displays/image.html\"\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.RelationField","title":"<code>starlette_admin.fields.RelationField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>BaseField</code></p> <p>A field representing a relation between two data models.</p> <p>This field should not be used directly; instead, use either the HasOne or HasMany fields to specify a relation between your models.</p> <p>Important</p> <p>It is important to add both models in your admin interface.</p> <p>Parameters:</p> Name Type Description Default <code>identity</code> <code>Optional[str]</code> <p>Foreign ModelView identity</p> <code>None</code> Example <pre><code>class Author:\nid: Optional[int]\nname: str\nbooks: List[\"Book\"]\nclass Book:\nid: Optional[int]\ntitle: str\nauthor: Optional[\"Author\"]\nclass AuthorView(ModelView):\nfields = [\nIntegerField(\"id\"),\nStringField(\"name\"),\nHasMany(\"books\", identity=\"book\"),\n]\nclass BookView(ModelView):\nfields = [\nIntegerField(\"id\"),\nStringField(\"title\"),\nHasOne(\"author\", identity=\"author\"),\n]\n...\nadmin.add_view(AuthorView(Author, identity=\"author\"))\nadmin.add_view(BookView(Book, identity=\"book\"))\n...\n</code></pre> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass RelationField(BaseField):\n\"\"\"\n    A field representing a relation between two data models.\n    This field should not be used directly; instead, use either the [HasOne][starlette_admin.fields.HasOne]\n    or [HasMany][starlette_admin.fields.HasMany] fields to specify a relation\n    between your models.\n    !!! important\n        It is important to add both models in your admin interface.\n    Parameters:\n        identity: Foreign ModelView identity\n    ??? Example\n        ```py\n        class Author:\n            id: Optional[int]\n            name: str\n            books: List[\"Book\"]\n        class Book:\n            id: Optional[int]\n            title: str\n            author: Optional[\"Author\"]\n        class AuthorView(ModelView):\n            fields = [\n                IntegerField(\"id\"),\n                StringField(\"name\"),\n                HasMany(\"books\", identity=\"book\"),\n            ]\n        class BookView(ModelView):\n            fields = [\n                IntegerField(\"id\"),\n                StringField(\"title\"),\n                HasOne(\"author\", identity=\"author\"),\n            ]\n        ...\n        admin.add_view(AuthorView(Author, identity=\"author\"))\n        admin.add_view(BookView(Book, identity=\"book\"))\n        ...\n        ```\n    \"\"\"\nidentity: Optional[str] = None\nmultiple: bool = False\nrender_function_key: str = \"relation\"\nform_template: str = \"forms/relation.html\"\ndisplay_template: str = \"displays/relation.html\"\nasync def parse_form_data(\nself, request: Request, form_data: FormData, action: RequestAction\n) -&gt; Any:\nif self.multiple:\nreturn form_data.getlist(self.id)\nreturn form_data.get(self.id)\ndef additional_css_links(\nself, request: Request, action: RequestAction\n) -&gt; List[str]:\nif action.is_form():\nreturn [\nstr(\nrequest.url_for(\nf\"{request.app.state.ROUTE_NAME}:statics\",\npath=\"css/select2.min.css\",\n)\n)\n]\nreturn []\ndef additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\nif action.is_form():\nreturn [\nstr(\nrequest.url_for(\nf\"{request.app.state.ROUTE_NAME}:statics\",\npath=\"js/vendor/select2.min.js\",\n)\n)\n]\nreturn []\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.HasOne","title":"<code>starlette_admin.fields.HasOne</code>  <code>dataclass</code>","text":"<p>             Bases: <code>RelationField</code></p> <p>A field representing a \"has-one\" relation between two models.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass HasOne(RelationField):\n\"\"\"\n    A field representing a \"has-one\" relation between two models.\n    \"\"\"\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.HasMany","title":"<code>starlette_admin.fields.HasMany</code>  <code>dataclass</code>","text":"<p>             Bases: <code>RelationField</code></p> <p>A field representing a \"has-many\" relationship between two models.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass HasMany(RelationField):\n\"\"\"A field representing a \"has-many\" relationship between two models.\"\"\"\nmultiple: bool = True\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.ListField","title":"<code>starlette_admin.fields.ListField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>BaseField</code></p> <p>Encapsulate an ordered list of multiple instances of the same field type, keeping data as a list.</p> <p>Usage</p> <pre><code>class MyModel:\nid: Optional[int]\nvalues: List[str]\nclass ModelView(BaseModelView):\nfields = [IntegerField(\"id\"), ListField(StringField(\"values\")]\n</code></pre> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass(init=False)\nclass ListField(BaseField):\n\"\"\"\n    Encapsulate an ordered list of multiple instances of the same field type,\n    keeping data as a list.\n    !!!usage\n        ```python\n        class MyModel:\n            id: Optional[int]\n            values: List[str]\n        class ModelView(BaseModelView):\n            fields = [IntegerField(\"id\"), ListField(StringField(\"values\")]\n        ```\n    \"\"\"\nform_template: str = \"forms/list.html\"\ndisplay_template: str = \"displays/list.html\"\nsearch_builder_type: str = \"array\"\nfield: BaseField = dc_field(default_factory=lambda: BaseField(\"\"))\ndef __init__(self, field: BaseField, required: bool = False) -&gt; None:\nself.field = field\nself.name = field.name\nself.required = required\nself.__post_init__()\ndef __post_init__(self) -&gt; None:\nsuper().__post_init__()\nself.field.id = \"\"\nif isinstance(self.field, CollectionField):\nself.field._propagate_id()\nasync def parse_form_data(\nself, request: Request, form_data: FormData, action: RequestAction\n) -&gt; Any:\nindices = self._extra_indices(form_data)\nvalue = []\nfor index in indices:\nself.field.id = f\"{self.id}.{index}\"\nif isinstance(self.field, CollectionField):\nself.field._propagate_id()\nvalue.append(await self.field.parse_form_data(request, form_data, action))\nreturn value\nasync def serialize_value(\nself, request: Request, value: Any, action: RequestAction\n) -&gt; Any:\nserialized_value = []\nfor item in value:\nserialized_item_value = None\nif item is not None:\nserialized_item_value = await self.field.serialize_value(\nrequest, item, action\n)\nserialized_value.append(serialized_item_value)\nreturn serialized_value\ndef _extra_indices(self, form_data: FormData) -&gt; List[int]:\n\"\"\"\n        Return list of all indices.  For example, if field id is `foo` and\n        form_data contains following keys ['foo.0.bar', 'foo.1.baz'], then the indices are [0,1].\n        Note that some numbers can be skipped. For example, you may have [0,1,3,8]\n        as indices.\n        \"\"\"\nindices = set()\nfor name in form_data:\nif name.startswith(self.id):\nidx = name[len(self.id) + 1 :].split(\".\", maxsplit=1)[0]\nif idx.isdigit():\nindices.add(int(idx))\nreturn sorted(indices)\ndef _field_at(self, idx: Optional[int] = None) -&gt; BaseField:\nif idx is not None:\nself.field.id = self.id + \".\" + str(idx)\nelse:\n\"\"\"To generate template string to be used in javascript\"\"\"\nself.field.id = \"\"\nif isinstance(self.field, CollectionField):\nself.field._propagate_id()\nreturn self.field\ndef additional_css_links(\nself, request: Request, action: RequestAction\n) -&gt; List[str]:\nreturn self.field.additional_css_links(request, action)\ndef additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\nreturn self.field.additional_js_links(request, action)\n</code></pre>"},{"location":"api/fields/#starlette_admin.fields.CollectionField","title":"<code>starlette_admin.fields.CollectionField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>BaseField</code></p> <p>This field represents a collection of others fields. Can be used to represent embedded mongodb document.</p> <p>Usage</p> <pre><code> CollectionField(\"config\", fields=[StringField(\"key\"), IntegerField(\"value\", help_text=\"multiple of 5\")]),\n</code></pre> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass(init=False)\nclass CollectionField(BaseField):\n\"\"\"\n    This field represents a collection of others fields. Can be used to represent embedded mongodb document.\n    !!!usage\n    ```python\n     CollectionField(\"config\", fields=[StringField(\"key\"), IntegerField(\"value\", help_text=\"multiple of 5\")]),\n    ```\n    \"\"\"\nfields: Sequence[BaseField] = dc_field(default_factory=list)\nrender_function_key: str = \"json\"\nform_template: str = \"forms/collection.html\"\ndisplay_template: str = \"displays/collection.html\"\ndef __init__(\nself, name: str, fields: Sequence[BaseField], required: bool = False\n) -&gt; None:\nself.name = name\nself.fields = fields\nself.required = required\nsuper().__post_init__()\nself._propagate_id()\ndef get_fields_list(\nself,\nrequest: Request,\naction: RequestAction = RequestAction.LIST,\n) -&gt; Sequence[BaseField]:\nreturn extract_fields(self.fields, action)\ndef _propagate_id(self) -&gt; None:\n\"\"\"Will update fields id by adding his id as prefix (ex: category.name)\"\"\"\nfor field in self.fields:\nfield.id = self.id + (\".\" if self.id else \"\") + field.name\nif isinstance(field, type(self)):\nfield._propagate_id()\nasync def parse_form_data(\nself, request: Request, form_data: FormData, action: RequestAction\n) -&gt; Any:\nvalue = {}\nfor field in self.fields:\nif (action == RequestAction.EDIT and field.exclude_from_edit) or (\naction == RequestAction.CREATE and field.exclude_from_create\n):\ncontinue\nvalue[field.name] = await field.parse_form_data(request, form_data, action)\nreturn value\nasync def serialize_value(\nself, request: Request, value: Any, action: RequestAction\n) -&gt; Any:\nserialized_value: Dict[str, Any] = {}\nfor field in self.fields:\nname = field.name\nserialized_value[name] = None\nif hasattr(value, name) or (isinstance(value, dict) and name in value):\nfield_value = (\ngetattr(value, name) if hasattr(value, name) else value[name]\n)\nif field_value is not None:\nserialized_value[name] = await field.serialize_value(\nrequest, field_value, action\n)\nreturn serialized_value\ndef additional_css_links(\nself, request: Request, action: RequestAction\n) -&gt; List[str]:\n_links = []\nfor f in self.fields:\n_links.extend(f.additional_css_links(request, action))\nreturn _links\ndef additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\n_links = []\nfor f in self.fields:\n_links.extend(f.additional_js_links(request, action))\nreturn _links\n</code></pre>"},{"location":"api/views/","title":"Views","text":""},{"location":"api/views/#starlette_admin.views.BaseView","title":"<code>starlette_admin.views.BaseView</code>","text":"<p>Base class for all views</p> <p>Attributes:</p> Name Type Description <code>label</code> <code>str</code> <p>Label of the view to be displayed.</p> <code>icon</code> <code>Optional[str]</code> <p>Icon to be displayed for this model in the admin. Only FontAwesome names are supported.</p> Source code in <code>starlette_admin/views.py</code> <pre><code>class BaseView:\n\"\"\"\n    Base class for all views\n    Attributes:\n        label: Label of the view to be displayed.\n        icon: Icon to be displayed for this model in the admin. Only FontAwesome names are supported.\n    \"\"\"\nlabel: str = \"\"\nicon: Optional[str] = None\ndef is_active(self, request: Request) -&gt; bool:\n\"\"\"Return true if the current view is active\"\"\"\nreturn False\ndef is_accessible(self, request: Request) -&gt; bool:\n\"\"\"\n        Override this method to add permission checks.\n        Return True if current user can access this view\n        \"\"\"\nreturn True\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseView.is_accessible","title":"<code>is_accessible(request)</code>","text":"<p>Override this method to add permission checks. Return True if current user can access this view</p> Source code in <code>starlette_admin/views.py</code> <pre><code>def is_accessible(self, request: Request) -&gt; bool:\n\"\"\"\n    Override this method to add permission checks.\n    Return True if current user can access this view\n    \"\"\"\nreturn True\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseView.is_active","title":"<code>is_active(request)</code>","text":"<p>Return true if the current view is active</p> Source code in <code>starlette_admin/views.py</code> <pre><code>def is_active(self, request: Request) -&gt; bool:\n\"\"\"Return true if the current view is active\"\"\"\nreturn False\n</code></pre>"},{"location":"api/views/#starlette_admin.views.DropDown","title":"<code>starlette_admin.views.DropDown</code>","text":"<p>             Bases: <code>BaseView</code></p> <p>Group views inside a dropdown</p> Example <pre><code>admin.add_view(\nDropDown(\n\"Resources\",\nicon=\"fa fa-list\",\nviews=[\nModelView(User),\nLink(label=\"Home Page\", url=\"/\"),\nCustomView(label=\"Dashboard\", path=\"/dashboard\", template_path=\"dashboard.html\"),\n],\n)\n)\n</code></pre> Source code in <code>starlette_admin/views.py</code> <pre><code>class DropDown(BaseView):\n\"\"\"\n    Group views inside a dropdown\n    Example:\n        ```Python\n        admin.add_view(\n            DropDown(\n                \"Resources\",\n                icon=\"fa fa-list\",\n                views=[\n                    ModelView(User),\n                    Link(label=\"Home Page\", url=\"/\"),\n                    CustomView(label=\"Dashboard\", path=\"/dashboard\", template_path=\"dashboard.html\"),\n                ],\n            )\n        )\n        ```\n    \"\"\"\ndef __init__(\nself,\nlabel: str,\nviews: List[Union[Type[BaseView], BaseView]],\nicon: Optional[str] = None,\nalways_open: bool = True,\n) -&gt; None:\nself.label = label\nself.icon = icon\nself.always_open = always_open\nself.views: List[BaseView] = [\n(v if isinstance(v, BaseView) else v()) for v in views\n]\ndef is_active(self, request: Request) -&gt; bool:\nreturn any(v.is_active(request) for v in self.views)\ndef is_accessible(self, request: Request) -&gt; bool:\nreturn any(v.is_accessible(request) for v in self.views)\n</code></pre>"},{"location":"api/views/#starlette_admin.views.Link","title":"<code>starlette_admin.views.Link</code>","text":"<p>             Bases: <code>BaseView</code></p> <p>Add arbitrary hyperlinks to the menu</p> Example <pre><code>admin.add_view(Link(label=\"Home Page\", icon=\"fa fa-link\", url=\"/\"))\n</code></pre> Source code in <code>starlette_admin/views.py</code> <pre><code>class Link(BaseView):\n\"\"\"\n    Add arbitrary hyperlinks to the menu\n    Example:\n        ```Python\n        admin.add_view(Link(label=\"Home Page\", icon=\"fa fa-link\", url=\"/\"))\n        ```\n    \"\"\"\ndef __init__(\nself,\nlabel: str = \"\",\nicon: Optional[str] = None,\nurl: str = \"/\",\ntarget: Optional[str] = \"_self\",\n):\nself.label = label\nself.icon = icon\nself.url = url\nself.target = target\n</code></pre>"},{"location":"api/views/#starlette_admin.views.CustomView","title":"<code>starlette_admin.views.CustomView</code>","text":"<p>             Bases: <code>BaseView</code></p> <p>Add your own views (not tied to any particular model). For example, a custom home page that displays some analytics data.</p> <p>Attributes:</p> Name Type Description <code>path</code> <p>Route path</p> <code>template_path</code> <p>Path to template file</p> <code>methods</code> <p>HTTP methods</p> <code>name</code> <p>Route name</p> <code>add_to_menu</code> <p>Display to menu or not</p> Example <pre><code>admin.add_view(CustomView(label=\"Home\", icon=\"fa fa-home\", path=\"/home\", template_path=\"home.html\"))\n</code></pre> Source code in <code>starlette_admin/views.py</code> <pre><code>class CustomView(BaseView):\n\"\"\"\n    Add your own views (not tied to any particular model). For example,\n    a custom home page that displays some analytics data.\n    Attributes:\n        path: Route path\n        template_path: Path to template file\n        methods: HTTP methods\n        name: Route name\n        add_to_menu: Display to menu or not\n    Example:\n        ```Python\n        admin.add_view(CustomView(label=\"Home\", icon=\"fa fa-home\", path=\"/home\", template_path=\"home.html\"))\n        ```\n    \"\"\"\ndef __init__(\nself,\nlabel: str,\nicon: Optional[str] = None,\npath: str = \"/\",\ntemplate_path: str = \"index.html\",\nname: Optional[str] = None,\nmethods: Optional[List[str]] = None,\nadd_to_menu: bool = True,\n):\nself.label = label\nself.icon = icon\nself.path = path\nself.template_path = template_path\nself.name = name\nself.methods = methods\nself.add_to_menu = add_to_menu\nasync def render(self, request: Request, templates: Jinja2Templates) -&gt; Response:\n\"\"\"Default methods to render view. Override this methods to add your custom logic.\"\"\"\nreturn templates.TemplateResponse(self.template_path, {\"request\": request})\ndef is_active(self, request: Request) -&gt; bool:\nreturn request.scope[\"path\"] == self.path\n</code></pre>"},{"location":"api/views/#starlette_admin.views.CustomView.render","title":"<code>render(request, templates)</code>  <code>async</code>","text":"<p>Default methods to render view. Override this methods to add your custom logic.</p> Source code in <code>starlette_admin/views.py</code> <pre><code>async def render(self, request: Request, templates: Jinja2Templates) -&gt; Response:\n\"\"\"Default methods to render view. Override this methods to add your custom logic.\"\"\"\nreturn templates.TemplateResponse(self.template_path, {\"request\": request})\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView","title":"<code>starlette_admin.views.BaseModelView</code>","text":"<p>             Bases: <code>BaseView</code></p> <p>Base administrative view. Derive from this class to implement your administrative interface piece.</p> <p>Attributes:</p> Name Type Description <code>identity</code> <code>Optional[str]</code> <p>Unique identity to identify the model associated to this view. Will be used for URL of the endpoints.</p> <code>name</code> <code>Optional[str]</code> <p>Name of the view to be displayed</p> <code>fields</code> <code>Sequence[BaseField]</code> <p>List of fields</p> <code>pk_attr</code> <code>Optional[str]</code> <p>Primary key field name</p> <code>form_include_pk</code> <code>bool</code> <p>Indicate if the primary key should be excluded from create and edit. Default to True</p> <code>exclude_fields_from_list</code> <code>Sequence[str]</code> <p>List of fields to exclude in List page.</p> <code>exclude_fields_from_detail</code> <code>Sequence[str]</code> <p>List of fields to exclude in Detail page.</p> <code>exclude_fields_from_create</code> <code>Sequence[str]</code> <p>List of fields to exclude from creation page.</p> <code>exclude_fields_from_edit</code> <code>Sequence[str]</code> <p>List of fields to exclude from editing page.</p> <code>searchable_fields</code> <code>Optional[Sequence[str]]</code> <p>List of searchable fields.</p> <code>sortable_fields</code> <code>Optional[Sequence[str]]</code> <p>List of sortable fields.</p> <code>export_fields</code> <code>Optional[Sequence[str]]</code> <p>List of fields to include in exports.</p> <code>fields_default_sort</code> <code>Optional[Sequence[Union[Tuple[str, bool], str]]]</code> <p>Initial order (sort) to apply to the table. eg: <code>[\"title\", (\"price\", True)]</code>.</p> <code>export_types</code> <code>Sequence[ExportType]</code> <p>A list of available export filetypes. Available exports are <code>['csv', 'excel', 'pdf', 'print']</code>. Only <code>pdf</code> is disabled by default.</p> <code>column_visibility</code> <code>bool</code> <p>Enable/Disable column visibility extension</p> <code>search_builder</code> <code>bool</code> <p>Enable/Disable search builder extension</p> <code>page_size</code> <code>int</code> <p>Default number of items to display in List page pagination. Default value is set to <code>10</code>.</p> <code>page_size_options</code> <code>Sequence[int]</code> <p>Pagination choices displayed in List page. Default value is set to <code>[10, 25, 50, 100]</code>. Use <code>-1</code>to display All</p> <code>responsive_table</code> <code>bool</code> <p>Enable/Disable responsive extension</p> <code>list_template</code> <code>str</code> <p>List view template. Default is <code>list.html</code>.</p> <code>detail_template</code> <code>str</code> <p>Details view template. Default is <code>details.html</code>.</p> <code>create_template</code> <code>str</code> <p>Edit view template. Default is <code>edit.html</code>.</p> <code>edit_template</code> <code>str</code> <p>Edit view template. Default is <code>edit.html</code>.</p> <code>actions</code> <code>Optional[Sequence[str]]</code> <p>List of actions</p> Source code in <code>starlette_admin/views.py</code> <pre><code>class BaseModelView(BaseView):\n\"\"\"\n    Base administrative view.\n    Derive from this class to implement your administrative interface piece.\n    Attributes:\n        identity: Unique identity to identify the model associated to this view.\n            Will be used for URL of the endpoints.\n        name: Name of the view to be displayed\n        fields: List of fields\n        pk_attr: Primary key field name\n        form_include_pk: Indicate if the primary key should be excluded from create and\n            edit. Default to True\n        exclude_fields_from_list: List of fields to exclude in List page.\n        exclude_fields_from_detail: List of fields to exclude in Detail page.\n        exclude_fields_from_create: List of fields to exclude from creation page.\n        exclude_fields_from_edit: List of fields to exclude from editing page.\n        searchable_fields: List of searchable fields.\n        sortable_fields: List of sortable fields.\n        export_fields: List of fields to include in exports.\n        fields_default_sort: Initial order (sort) to apply to the table.\n            eg: `[\"title\", (\"price\", True)]`.\n        export_types: A list of available export filetypes. Available\n            exports are `['csv', 'excel', 'pdf', 'print']`. Only `pdf` is\n            disabled by default.\n        column_visibility: Enable/Disable\n            [column visibility](https://datatables.net/extensions/buttons/built-in#Column-visibility)\n            extension\n        search_builder: Enable/Disable [search builder](https://datatables.net/extensions/searchbuilder/)\n            extension\n        page_size: Default number of items to display in List page pagination.\n            Default value is set to `10`.\n        page_size_options: Pagination choices displayed in List page.\n            Default value is set to `[10, 25, 50, 100]`. Use `-1`to display All\n        responsive_table: Enable/Disable [responsive](https://datatables.net/extensions/responsive/)\n            extension\n        list_template: List view template. Default is `list.html`.\n        detail_template: Details view template. Default is `details.html`.\n        create_template: Edit view template. Default is `edit.html`.\n        edit_template: Edit view template. Default is `edit.html`.\n        actions: List of actions\n    \"\"\"\nidentity: Optional[str] = None\nname: Optional[str] = None\nfields: Sequence[BaseField] = []\npk_attr: Optional[str] = None\nform_include_pk: bool = False\nexclude_fields_from_list: Sequence[str] = []\nexclude_fields_from_detail: Sequence[str] = []\nexclude_fields_from_create: Sequence[str] = []\nexclude_fields_from_edit: Sequence[str] = []\nsearchable_fields: Optional[Sequence[str]] = None\nsortable_fields: Optional[Sequence[str]] = None\nfields_default_sort: Optional[Sequence[Union[Tuple[str, bool], str]]] = None\nexport_types: Sequence[ExportType] = [\nExportType.CSV,\nExportType.EXCEL,\nExportType.PRINT,\n]\nexport_fields: Optional[Sequence[str]] = None\ncolumn_visibility: bool = True\nsearch_builder: bool = True\npage_size: int = 10\npage_size_options: Sequence[int] = [10, 25, 50, 100]\nresponsive_table: bool = False\nlist_template: str = \"list.html\"\ndetail_template: str = \"detail.html\"\ncreate_template: str = \"create.html\"\nedit_template: str = \"edit.html\"\nactions: Optional[Sequence[str]] = None\n_find_foreign_model: Callable[[str], \"BaseModelView\"]\ndef __init__(self) -&gt; None:  # noqa: C901\nfringe = list(self.fields)\nall_field_names = []\nwhile len(fringe) &gt; 0:\nfield = fringe.pop(0)\nif not hasattr(field, \"_name\"):\nfield._name = field.name  # type: ignore\nif isinstance(field, CollectionField):\nfor f in field.fields:\nf._name = f\"{field._name}.{f.name}\"  # type: ignore\nfringe.extend(field.fields)\nname = field._name  # type: ignore\nif name == self.pk_attr and not self.form_include_pk:\nfield.exclude_from_create = True\nfield.exclude_from_edit = True\nif name in self.exclude_fields_from_list:\nfield.exclude_from_list = True\nif name in self.exclude_fields_from_detail:\nfield.exclude_from_detail = True\nif name in self.exclude_fields_from_create:\nfield.exclude_from_create = True\nif name in self.exclude_fields_from_edit:\nfield.exclude_from_edit = True\nif not isinstance(field, CollectionField):\nall_field_names.append(name)\nfield.searchable = (self.searchable_fields is None) or (\nname in self.searchable_fields\n)\nfield.orderable = (self.sortable_fields is None) or (\nname in self.sortable_fields\n)\nif self.searchable_fields is None:\nself.searchable_fields = all_field_names[:]\nif self.sortable_fields is None:\nself.sortable_fields = all_field_names[:]\nif self.export_fields is None:\nself.export_fields = all_field_names[:]\nif self.fields_default_sort is None:\nself.fields_default_sort = [self.pk_attr]  # type: ignore[list-item]\n# Actions\nself._actions: Dict[str, Dict[str, str]] = {}\nself._handlers: Dict[str, Callable[[Request, Sequence[Any]], Awaitable]] = {}\nself._init_actions()\ndef is_active(self, request: Request) -&gt; bool:\nreturn request.path_params.get(\"identity\", None) == self.identity\ndef _init_actions(self) -&gt; None:\n\"\"\"\n        Initialize list of actions\n        \"\"\"\nfor _method_name, method in inspect.getmembers(\nself, predicate=inspect.ismethod\n):\nif hasattr(method, \"_action\"):\nname = method._action.get(\"name\")\nself._actions[name] = method._action\nself._handlers[name] = method\nif self.actions is None:\nself.actions = list(self._handlers.keys())\nfor action_name in self.actions:\nif action_name not in self._actions:\nraise ValueError(f\"Unknown action with name `{action_name}`\")\nasync def is_action_allowed(self, request: Request, name: str) -&gt; bool:\n\"\"\"\n        Verify if action with `name` is allowed.\n        Override this method to allow or disallow actions based\n        on some condition.\n        Args:\n            name: Action name\n            request: Starlette request\n        \"\"\"\nif name == \"delete\":\nreturn self.can_delete(request)\nreturn True\nasync def get_all_actions(self, request: Request) -&gt; List[Optional[dict]]:\nactions = []\nassert self.actions is not None\nfor action_name in self.actions:\nif await self.is_action_allowed(request, action_name):\nactions.append(self._actions.get(action_name))\nreturn actions\nasync def handle_action(\nself, request: Request, pks: List[Any], name: str\n) -&gt; Union[str, Response]:\n\"\"\"\n        Handle action with `name`.\n        Raises:\n            ActionFailed: to display meaningfully error\n        \"\"\"\nhandler = self._handlers.get(name, None)\nif handler is None:\nraise ActionFailed(\"Invalid action\")\nif not await self.is_action_allowed(request, name):\nraise ActionFailed(\"Forbidden\")\nhandler_return = await handler(request, pks)\ncustom_response = self._actions[name][\"custom_response\"]\nif isinstance(handler_return, Response) and not custom_response:\nraise ActionFailed(\n\"Set custom_response to true, to be able to return custom response\"\n)\nreturn handler_return\n@action(\nname=\"delete\",\ntext=_(\"Delete\"),\nconfirmation=_(\"Are you sure you want to delete selected items?\"),\nsubmit_btn_text=_(\"Yes, delete all\"),\nsubmit_btn_class=\"btn-danger\",\n)\nasync def delete_action(self, request: Request, pks: List[Any]) -&gt; str:\naffected_rows = await self.delete(request, pks)\nreturn ngettext(\n\"Item was successfully deleted\",\n\"%(count)d items were successfully deleted\",\naffected_rows or 0,\n) % {\"count\": affected_rows}\n@abstractmethod\nasync def find_all(\nself,\nrequest: Request,\nskip: int = 0,\nlimit: int = 100,\nwhere: Union[Dict[str, Any], str, None] = None,\norder_by: Optional[List[str]] = None,\n) -&gt; Sequence[Any]:\n\"\"\"\n        Find all items\n        Parameters:\n            request: The request being processed\n            where: Can be dict for complex query\n                ```json\n                 {\"and\":[{\"id\": {\"gt\": 5}},{\"name\": {\"startsWith\": \"ban\"}}]}\n                ```\n                or plain text for full search\n            skip: should return values start from position skip+1\n            limit: number of maximum items to return\n            order_by: order data clauses in form `[\"id asc\", \"name desc\"]`\n        \"\"\"\nraise NotImplementedError()\n@abstractmethod\nasync def count(\nself,\nrequest: Request,\nwhere: Union[Dict[str, Any], str, None] = None,\n) -&gt; int:\n\"\"\"\n        Count items\n        Parameters:\n            request: The request being processed\n            where: Can be dict for complex query\n                ```json\n                 {\"and\":[{\"id\": {\"gt\": 5}},{\"name\": {\"startsWith\": \"ban\"}}]}\n                ```\n                or plain text for full search\n        \"\"\"\nraise NotImplementedError()\n@abstractmethod\nasync def delete(self, request: Request, pks: List[Any]) -&gt; Optional[int]:\n\"\"\"\n        Bulk delete items\n        Parameters:\n            request: The request being processed\n            pks: List of primary keys\n        \"\"\"\nraise NotImplementedError()\n@abstractmethod\nasync def find_by_pk(self, request: Request, pk: Any) -&gt; Any:\n\"\"\"\n        Find one item\n        Parameters:\n            request: The request being processed\n            pk: Primary key\n        \"\"\"\nraise NotImplementedError()\n@abstractmethod\nasync def find_by_pks(self, request: Request, pks: List[Any]) -&gt; Sequence[Any]:\n\"\"\"\n        Find many items\n        Parameters:\n            request: The request being processed\n            pks: List of Primary key\n        \"\"\"\nraise NotImplementedError()\n@abstractmethod\nasync def create(self, request: Request, data: Dict) -&gt; Any:\n\"\"\"\n        Create item\n        Parameters:\n            request: The request being processed\n            data: Dict values contained converted form data\n        Returns:\n            Any: Created Item\n        \"\"\"\nraise NotImplementedError()\n@abstractmethod\nasync def edit(self, request: Request, pk: Any, data: Dict[str, Any]) -&gt; Any:\n\"\"\"\n        Edit item\n        Parameters:\n            request: The request being processed\n            pk: Primary key\n            data: Dict values contained converted form data\n        Returns:\n            Any: Edited Item\n        \"\"\"\nraise NotImplementedError()\ndef can_view_details(self, request: Request) -&gt; bool:\n\"\"\"Permission for viewing full details of Item. Return True by default\"\"\"\nreturn True\ndef can_create(self, request: Request) -&gt; bool:\n\"\"\"Permission for creating new Items. Return True by default\"\"\"\nreturn True\ndef can_edit(self, request: Request) -&gt; bool:\n\"\"\"Permission for editing Items. Return True by default\"\"\"\nreturn True\ndef can_delete(self, request: Request) -&gt; bool:\n\"\"\"Permission for deleting Items. Return True by default\"\"\"\nreturn True\nasync def serialize_field_value(\nself, value: Any, field: BaseField, action: RequestAction, request: Request\n) -&gt; Any:\n\"\"\"\n        Format output value for each field.\n        !!! important\n            The returned value should be json serializable\n        Parameters:\n            value: attribute of item returned by `find_all` or `find_by_pk`\n            field: Starlette Admin field for this attribute\n            action: Specify where the data will be used. Possible values are\n                `VIEW` for detail page, `EDIT` for editing page and `API`\n                for listing page and select2 data.\n            request: The request being processed\n        \"\"\"\nif value is None:\nreturn await field.serialize_none_value(request, action)\nreturn await field.serialize_value(request, value, action)\nasync def serialize(\nself,\nobj: Any,\nrequest: Request,\naction: RequestAction,\ninclude_relationships: bool = True,\ninclude_select2: bool = False,\n) -&gt; Dict[str, Any]:\nobj_serialized: Dict[str, Any] = {}\nfor field in self.get_fields_list(request, action):\nif isinstance(field, RelationField) and include_relationships:\nvalue = getattr(obj, field.name, None)\nforeign_model = self._find_foreign_model(field.identity)  # type: ignore\nassert foreign_model.pk_attr is not None\nif value is None:\nobj_serialized[field.name] = None\nelif isinstance(field, HasOne):\nif action == RequestAction.EDIT:\nobj_serialized[field.name] = getattr(\nvalue, foreign_model.pk_attr\n)\nelse:\nobj_serialized[field.name] = await foreign_model.serialize(\nvalue, request, action, include_relationships=False\n)\nelse:\nif action == RequestAction.EDIT:\nobj_serialized[field.name] = [\ngetattr(v, foreign_model.pk_attr) for v in value\n]\nelse:\nobj_serialized[field.name] = [\nawait foreign_model.serialize(\nv, request, action, include_relationships=False\n)\nfor v in value\n]\nelif not isinstance(field, RelationField):\nvalue = await field.parse_obj(request, obj)\nobj_serialized[field.name] = await self.serialize_field_value(\nvalue, field, action, request\n)\nif include_select2:\nobj_serialized[\"_select2_selection\"] = await self.select2_selection(\nobj, request\n)\nobj_serialized[\"_select2_result\"] = await self.select2_result(obj, request)\nobj_serialized[\"_repr\"] = await self.repr(obj, request)\nassert self.pk_attr is not None\npk = getattr(obj, self.pk_attr)\nobj_serialized[self.pk_attr] = obj_serialized.get(\nself.pk_attr, str(pk)  # Make sure the primary key is always available\n)\nroute_name = request.app.state.ROUTE_NAME\nobj_serialized[\"_detail_url\"] = str(\nrequest.url_for(route_name + \":detail\", identity=self.identity, pk=pk)\n)\nobj_serialized[\"_edit_url\"] = str(\nrequest.url_for(route_name + \":edit\", identity=self.identity, pk=pk)\n)\nreturn obj_serialized\nasync def repr(self, obj: Any, request: Request) -&gt; str:\n\"\"\"Return a string representation of the given object that can be displayed in the admin interface.\n        If the object has a custom representation method `__admin_repr__`, it is used to generate the string. Otherwise,\n        the value of the object's primary key attribute is used.\n        Args:\n            obj: The object to represent.\n            request: The request being processed\n        Example:\n            For example, the following implementation for a `User` model will display\n            the user's full name instead of their primary key in the admin interface:\n            ```python\n            class User:\n                id: int\n                first_name: str\n                last_name: str\n                def __admin_repr__(self, request: Request):\n                    return f\"{self.last_name} {self.first_name}\"\n            ```\n        \"\"\"\nrepr_method = getattr(\nobj,\n\"__admin_repr__\",\nlambda request: str(getattr(obj, self.pk_attr)),  # type: ignore[arg-type]\n)\nif inspect.iscoroutinefunction(repr_method):\nreturn await repr_method(request)\nreturn repr_method(request)\nasync def select2_result(self, obj: Any, request: Request) -&gt; str:\n\"\"\"Returns an HTML-formatted string that represents the search results for a Select2 search box.\n        By default, this method returns a string that contains all the object's attributes in a list except\n        relation and file attributes.\n        If the object has a custom representation method `__admin_select2_repr__`, it is used to generate the\n        HTML-formatted string.\n        !!! note\n            The returned value should be valid HTML.\n        !!! danger\n            Escape your database value to avoid Cross-Site Scripting (XSS) attack.\n            You can use Jinja2 Template render with `autoescape=True`.\n            For more information [click here](https://owasp.org/www-community/attacks/xss/)\n        Parameters:\n            obj: The object returned by the `find_all` or `find_by_pk` method.\n            request: The request being processed\n        Example:\n            Here is an example implementation for a `User` model\n            that includes the user's name and photo:\n            ```python\n            class User:\n                id: int\n                name: str\n                photo_url: str\n                def __admin_select2_repr__(self, request: Request) -&gt; str:\n                    return f'&lt;div&gt;&lt;img src=\"{escape(photo_url)}\"&gt;&lt;span&gt;{escape(self.name)}&lt;/span&gt;&lt;/div&gt;'\n            ```\n        \"\"\"\ntemplate_str = (\n\"&lt;span&gt;{%for col in fields %}{%if obj[col]%}&lt;strong&gt;{{col}}:\"\n\" &lt;/strong&gt;{{obj[col]}} {%endif%}{%endfor%}&lt;/span&gt;\"\n)\nfields = [\nfield.name\nfor field in self.get_fields_list(request)\nif (\nnot isinstance(field, (RelationField, FileField))\nand not field.exclude_from_detail\n)\n]\nhtml_repr_method = getattr(\nobj,\n\"__admin_select2_repr__\",\nlambda request: Template(template_str, autoescape=True).render(\nobj=obj, fields=fields\n),\n)\nif inspect.iscoroutinefunction(html_repr_method):\nreturn await html_repr_method(request)\nreturn html_repr_method(request)\nasync def select2_selection(self, obj: Any, request: Request) -&gt; str:\n\"\"\"\n        Returns the HTML representation of an item selected by a user in a Select2 component.\n        By default, it simply calls `select2_result()`.\n        !!! note\n            The returned value should be valid HTML.\n        !!! danger\n            Escape your database value to avoid Cross-Site Scripting (XSS) attack.\n            You can use Jinja2 Template render with `autoescape=True`.\n            For more information [click here](https://owasp.org/www-community/attacks/xss/)\n        Parameters:\n            obj: item returned by `find_all` or `find_by_pk`\n            request: The request being processed\n        \"\"\"\nreturn await self.select2_result(obj, request)\ndef _length_menu(self) -&gt; Any:\nreturn [\nself.page_size_options,\n[(_(\"All\") if i &lt; 0 else i) for i in self.page_size_options],\n]\ndef _search_columns_selector(self) -&gt; List[str]:\nreturn [\"%s:name\" % name for name in self.searchable_fields]  # type: ignore\ndef _export_columns_selector(self) -&gt; List[str]:\nreturn [\"%s:name\" % name for name in self.export_fields]  # type: ignore\ndef get_fields_list(\nself,\nrequest: Request,\naction: RequestAction = RequestAction.LIST,\n) -&gt; Sequence[BaseField]:\n\"\"\"Return a list of field instances to display in the specified view action.\n        This function excludes fields with corresponding exclude flags, which are\n        determined by the `exclude_fields_from_*` attributes.\n        Parameters:\n             request: The request being processed.\n             action: The type of action being performed on the view.\n        \"\"\"\nreturn extract_fields(self.fields, action)\ndef _additional_css_links(\nself, request: Request, action: RequestAction\n) -&gt; Sequence[str]:\nlinks = []\nfor field in self.get_fields_list(request, action):\nfor link in field.additional_css_links(request, action) or []:\nif link not in links:\nlinks.append(link)\nreturn links\ndef _additional_js_links(\nself, request: Request, action: RequestAction\n) -&gt; Sequence[str]:\nlinks = []\nfor field in self.get_fields_list(request, action):\nfor link in field.additional_js_links(request, action) or []:\nif link not in links:\nlinks.append(link)\nreturn links\nasync def _configs(self, request: Request) -&gt; Dict[str, Any]:\nlocale = get_locale()\nreturn {\n\"label\": self.label,\n\"pageSize\": self.page_size,\n\"lengthMenu\": self._length_menu(),\n\"searchColumns\": self._search_columns_selector(),\n\"exportColumns\": self._export_columns_selector(),\n\"fieldsDefaultSort\": dict(\n(it, False) if isinstance(it, str) else it\nfor it in self.fields_default_sort  # type: ignore[union-attr]\n),\n\"exportTypes\": self.export_types,\n\"columnVisibility\": self.column_visibility,\n\"searchBuilder\": self.search_builder,\n\"responsiveTable\": self.responsive_table,\n\"fields\": [f.dict() for f in self.get_fields_list(request)],\n\"actions\": await self.get_all_actions(request),\n\"pk\": self.pk_attr,\n\"locale\": locale,\n\"apiUrl\": request.url_for(\nf\"{request.app.state.ROUTE_NAME}:api\", identity=self.identity\n),\n\"actionUrl\": request.url_for(\nf\"{request.app.state.ROUTE_NAME}:action\", identity=self.identity\n),\n\"dt_i18n_url\": request.url_for(\nf\"{request.app.state.ROUTE_NAME}:statics\", path=f\"i18n/dt/{locale}.json\"\n),\n}\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.can_create","title":"<code>can_create(request)</code>","text":"<p>Permission for creating new Items. Return True by default</p> Source code in <code>starlette_admin/views.py</code> <pre><code>def can_create(self, request: Request) -&gt; bool:\n\"\"\"Permission for creating new Items. Return True by default\"\"\"\nreturn True\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.can_delete","title":"<code>can_delete(request)</code>","text":"<p>Permission for deleting Items. Return True by default</p> Source code in <code>starlette_admin/views.py</code> <pre><code>def can_delete(self, request: Request) -&gt; bool:\n\"\"\"Permission for deleting Items. Return True by default\"\"\"\nreturn True\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.can_edit","title":"<code>can_edit(request)</code>","text":"<p>Permission for editing Items. Return True by default</p> Source code in <code>starlette_admin/views.py</code> <pre><code>def can_edit(self, request: Request) -&gt; bool:\n\"\"\"Permission for editing Items. Return True by default\"\"\"\nreturn True\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.can_view_details","title":"<code>can_view_details(request)</code>","text":"<p>Permission for viewing full details of Item. Return True by default</p> Source code in <code>starlette_admin/views.py</code> <pre><code>def can_view_details(self, request: Request) -&gt; bool:\n\"\"\"Permission for viewing full details of Item. Return True by default\"\"\"\nreturn True\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.count","title":"<code>count(request, where=None)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Count items Parameters:     request: The request being processed     where: Can be dict for complex query         <pre><code> {\"and\":[{\"id\": {\"gt\": 5}},{\"name\": {\"startsWith\": \"ban\"}}]}\n</code></pre>         or plain text for full search</p> Source code in <code>starlette_admin/views.py</code> <pre><code>@abstractmethod\nasync def count(\nself,\nrequest: Request,\nwhere: Union[Dict[str, Any], str, None] = None,\n) -&gt; int:\n\"\"\"\n    Count items\n    Parameters:\n        request: The request being processed\n        where: Can be dict for complex query\n            ```json\n             {\"and\":[{\"id\": {\"gt\": 5}},{\"name\": {\"startsWith\": \"ban\"}}]}\n            ```\n            or plain text for full search\n    \"\"\"\nraise NotImplementedError()\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.create","title":"<code>create(request, data)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Create item Parameters:     request: The request being processed     data: Dict values contained converted form data Returns:     Any: Created Item</p> Source code in <code>starlette_admin/views.py</code> <pre><code>@abstractmethod\nasync def create(self, request: Request, data: Dict) -&gt; Any:\n\"\"\"\n    Create item\n    Parameters:\n        request: The request being processed\n        data: Dict values contained converted form data\n    Returns:\n        Any: Created Item\n    \"\"\"\nraise NotImplementedError()\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.delete","title":"<code>delete(request, pks)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Bulk delete items Parameters:     request: The request being processed     pks: List of primary keys</p> Source code in <code>starlette_admin/views.py</code> <pre><code>@abstractmethod\nasync def delete(self, request: Request, pks: List[Any]) -&gt; Optional[int]:\n\"\"\"\n    Bulk delete items\n    Parameters:\n        request: The request being processed\n        pks: List of primary keys\n    \"\"\"\nraise NotImplementedError()\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.edit","title":"<code>edit(request, pk, data)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Edit item Parameters:     request: The request being processed     pk: Primary key     data: Dict values contained converted form data Returns:     Any: Edited Item</p> Source code in <code>starlette_admin/views.py</code> <pre><code>@abstractmethod\nasync def edit(self, request: Request, pk: Any, data: Dict[str, Any]) -&gt; Any:\n\"\"\"\n    Edit item\n    Parameters:\n        request: The request being processed\n        pk: Primary key\n        data: Dict values contained converted form data\n    Returns:\n        Any: Edited Item\n    \"\"\"\nraise NotImplementedError()\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.find_all","title":"<code>find_all(request, skip=0, limit=100, where=None, order_by=None)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Find all items Parameters:     request: The request being processed     where: Can be dict for complex query         <pre><code> {\"and\":[{\"id\": {\"gt\": 5}},{\"name\": {\"startsWith\": \"ban\"}}]}\n</code></pre>         or plain text for full search     skip: should return values start from position skip+1     limit: number of maximum items to return     order_by: order data clauses in form <code>[\"id asc\", \"name desc\"]</code></p> Source code in <code>starlette_admin/views.py</code> <pre><code>@abstractmethod\nasync def find_all(\nself,\nrequest: Request,\nskip: int = 0,\nlimit: int = 100,\nwhere: Union[Dict[str, Any], str, None] = None,\norder_by: Optional[List[str]] = None,\n) -&gt; Sequence[Any]:\n\"\"\"\n    Find all items\n    Parameters:\n        request: The request being processed\n        where: Can be dict for complex query\n            ```json\n             {\"and\":[{\"id\": {\"gt\": 5}},{\"name\": {\"startsWith\": \"ban\"}}]}\n            ```\n            or plain text for full search\n        skip: should return values start from position skip+1\n        limit: number of maximum items to return\n        order_by: order data clauses in form `[\"id asc\", \"name desc\"]`\n    \"\"\"\nraise NotImplementedError()\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.find_by_pk","title":"<code>find_by_pk(request, pk)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Find one item Parameters:     request: The request being processed     pk: Primary key</p> Source code in <code>starlette_admin/views.py</code> <pre><code>@abstractmethod\nasync def find_by_pk(self, request: Request, pk: Any) -&gt; Any:\n\"\"\"\n    Find one item\n    Parameters:\n        request: The request being processed\n        pk: Primary key\n    \"\"\"\nraise NotImplementedError()\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.find_by_pks","title":"<code>find_by_pks(request, pks)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Find many items Parameters:     request: The request being processed     pks: List of Primary key</p> Source code in <code>starlette_admin/views.py</code> <pre><code>@abstractmethod\nasync def find_by_pks(self, request: Request, pks: List[Any]) -&gt; Sequence[Any]:\n\"\"\"\n    Find many items\n    Parameters:\n        request: The request being processed\n        pks: List of Primary key\n    \"\"\"\nraise NotImplementedError()\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.get_fields_list","title":"<code>get_fields_list(request, action=RequestAction.LIST)</code>","text":"<p>Return a list of field instances to display in the specified view action. This function excludes fields with corresponding exclude flags, which are determined by the <code>exclude_fields_from_*</code> attributes.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The request being processed.</p> required <code>action</code> <code>RequestAction</code> <p>The type of action being performed on the view.</p> <code>LIST</code> Source code in <code>starlette_admin/views.py</code> <pre><code>def get_fields_list(\nself,\nrequest: Request,\naction: RequestAction = RequestAction.LIST,\n) -&gt; Sequence[BaseField]:\n\"\"\"Return a list of field instances to display in the specified view action.\n    This function excludes fields with corresponding exclude flags, which are\n    determined by the `exclude_fields_from_*` attributes.\n    Parameters:\n         request: The request being processed.\n         action: The type of action being performed on the view.\n    \"\"\"\nreturn extract_fields(self.fields, action)\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.handle_action","title":"<code>handle_action(request, pks, name)</code>  <code>async</code>","text":"<p>Handle action with <code>name</code>. Raises:     ActionFailed: to display meaningfully error</p> Source code in <code>starlette_admin/views.py</code> <pre><code>async def handle_action(\nself, request: Request, pks: List[Any], name: str\n) -&gt; Union[str, Response]:\n\"\"\"\n    Handle action with `name`.\n    Raises:\n        ActionFailed: to display meaningfully error\n    \"\"\"\nhandler = self._handlers.get(name, None)\nif handler is None:\nraise ActionFailed(\"Invalid action\")\nif not await self.is_action_allowed(request, name):\nraise ActionFailed(\"Forbidden\")\nhandler_return = await handler(request, pks)\ncustom_response = self._actions[name][\"custom_response\"]\nif isinstance(handler_return, Response) and not custom_response:\nraise ActionFailed(\n\"Set custom_response to true, to be able to return custom response\"\n)\nreturn handler_return\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.is_action_allowed","title":"<code>is_action_allowed(request, name)</code>  <code>async</code>","text":"<p>Verify if action with <code>name</code> is allowed. Override this method to allow or disallow actions based on some condition.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Action name</p> required <code>request</code> <code>Request</code> <p>Starlette request</p> required Source code in <code>starlette_admin/views.py</code> <pre><code>async def is_action_allowed(self, request: Request, name: str) -&gt; bool:\n\"\"\"\n    Verify if action with `name` is allowed.\n    Override this method to allow or disallow actions based\n    on some condition.\n    Args:\n        name: Action name\n        request: Starlette request\n    \"\"\"\nif name == \"delete\":\nreturn self.can_delete(request)\nreturn True\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.repr","title":"<code>repr(obj, request)</code>  <code>async</code>","text":"<p>Return a string representation of the given object that can be displayed in the admin interface.</p> <p>If the object has a custom representation method <code>__admin_repr__</code>, it is used to generate the string. Otherwise, the value of the object's primary key attribute is used.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>The object to represent.</p> required <code>request</code> <code>Request</code> <p>The request being processed</p> required Example <p>For example, the following implementation for a <code>User</code> model will display the user's full name instead of their primary key in the admin interface:</p> <pre><code>class User:\nid: int\nfirst_name: str\nlast_name: str\ndef __admin_repr__(self, request: Request):\nreturn f\"{self.last_name} {self.first_name}\"\n</code></pre> Source code in <code>starlette_admin/views.py</code> <pre><code>async def repr(self, obj: Any, request: Request) -&gt; str:\n\"\"\"Return a string representation of the given object that can be displayed in the admin interface.\n    If the object has a custom representation method `__admin_repr__`, it is used to generate the string. Otherwise,\n    the value of the object's primary key attribute is used.\n    Args:\n        obj: The object to represent.\n        request: The request being processed\n    Example:\n        For example, the following implementation for a `User` model will display\n        the user's full name instead of their primary key in the admin interface:\n        ```python\n        class User:\n            id: int\n            first_name: str\n            last_name: str\n            def __admin_repr__(self, request: Request):\n                return f\"{self.last_name} {self.first_name}\"\n        ```\n    \"\"\"\nrepr_method = getattr(\nobj,\n\"__admin_repr__\",\nlambda request: str(getattr(obj, self.pk_attr)),  # type: ignore[arg-type]\n)\nif inspect.iscoroutinefunction(repr_method):\nreturn await repr_method(request)\nreturn repr_method(request)\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.select2_result","title":"<code>select2_result(obj, request)</code>  <code>async</code>","text":"<p>Returns an HTML-formatted string that represents the search results for a Select2 search box.</p> <p>By default, this method returns a string that contains all the object's attributes in a list except relation and file attributes.</p> <p>If the object has a custom representation method <code>__admin_select2_repr__</code>, it is used to generate the HTML-formatted string.</p> <p>Note</p> <p>The returned value should be valid HTML.</p> <p>Danger</p> <p>Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with <code>autoescape=True</code>. For more information click here</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>The object returned by the <code>find_all</code> or <code>find_by_pk</code> method.</p> required <code>request</code> <code>Request</code> <p>The request being processed</p> required Example <p>Here is an example implementation for a <code>User</code> model that includes the user's name and photo:</p> <pre><code>class User:\nid: int\nname: str\nphoto_url: str\ndef __admin_select2_repr__(self, request: Request) -&gt; str:\nreturn f'&lt;div&gt;&lt;img src=\"{escape(photo_url)}\"&gt;&lt;span&gt;{escape(self.name)}&lt;/span&gt;&lt;/div&gt;'\n</code></pre> Source code in <code>starlette_admin/views.py</code> <pre><code>async def select2_result(self, obj: Any, request: Request) -&gt; str:\n\"\"\"Returns an HTML-formatted string that represents the search results for a Select2 search box.\n    By default, this method returns a string that contains all the object's attributes in a list except\n    relation and file attributes.\n    If the object has a custom representation method `__admin_select2_repr__`, it is used to generate the\n    HTML-formatted string.\n    !!! note\n        The returned value should be valid HTML.\n    !!! danger\n        Escape your database value to avoid Cross-Site Scripting (XSS) attack.\n        You can use Jinja2 Template render with `autoescape=True`.\n        For more information [click here](https://owasp.org/www-community/attacks/xss/)\n    Parameters:\n        obj: The object returned by the `find_all` or `find_by_pk` method.\n        request: The request being processed\n    Example:\n        Here is an example implementation for a `User` model\n        that includes the user's name and photo:\n        ```python\n        class User:\n            id: int\n            name: str\n            photo_url: str\n            def __admin_select2_repr__(self, request: Request) -&gt; str:\n                return f'&lt;div&gt;&lt;img src=\"{escape(photo_url)}\"&gt;&lt;span&gt;{escape(self.name)}&lt;/span&gt;&lt;/div&gt;'\n        ```\n    \"\"\"\ntemplate_str = (\n\"&lt;span&gt;{%for col in fields %}{%if obj[col]%}&lt;strong&gt;{{col}}:\"\n\" &lt;/strong&gt;{{obj[col]}} {%endif%}{%endfor%}&lt;/span&gt;\"\n)\nfields = [\nfield.name\nfor field in self.get_fields_list(request)\nif (\nnot isinstance(field, (RelationField, FileField))\nand not field.exclude_from_detail\n)\n]\nhtml_repr_method = getattr(\nobj,\n\"__admin_select2_repr__\",\nlambda request: Template(template_str, autoescape=True).render(\nobj=obj, fields=fields\n),\n)\nif inspect.iscoroutinefunction(html_repr_method):\nreturn await html_repr_method(request)\nreturn html_repr_method(request)\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.select2_selection","title":"<code>select2_selection(obj, request)</code>  <code>async</code>","text":"<p>Returns the HTML representation of an item selected by a user in a Select2 component. By default, it simply calls <code>select2_result()</code>.</p> <p>Note</p> <p>The returned value should be valid HTML.</p> <p>Danger</p> <p>Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with <code>autoescape=True</code>. For more information click here</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>item returned by <code>find_all</code> or <code>find_by_pk</code></p> required <code>request</code> <code>Request</code> <p>The request being processed</p> required Source code in <code>starlette_admin/views.py</code> <pre><code>async def select2_selection(self, obj: Any, request: Request) -&gt; str:\n\"\"\"\n    Returns the HTML representation of an item selected by a user in a Select2 component.\n    By default, it simply calls `select2_result()`.\n    !!! note\n        The returned value should be valid HTML.\n    !!! danger\n        Escape your database value to avoid Cross-Site Scripting (XSS) attack.\n        You can use Jinja2 Template render with `autoescape=True`.\n        For more information [click here](https://owasp.org/www-community/attacks/xss/)\n    Parameters:\n        obj: item returned by `find_all` or `find_by_pk`\n        request: The request being processed\n    \"\"\"\nreturn await self.select2_result(obj, request)\n</code></pre>"},{"location":"api/views/#starlette_admin.views.BaseModelView.serialize_field_value","title":"<code>serialize_field_value(value, field, action, request)</code>  <code>async</code>","text":"<p>Format output value for each field.</p> <p>Important</p> <p>The returned value should be json serializable</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>attribute of item returned by <code>find_all</code> or <code>find_by_pk</code></p> required <code>field</code> <code>BaseField</code> <p>Starlette Admin field for this attribute</p> required <code>action</code> <code>RequestAction</code> <p>Specify where the data will be used. Possible values are <code>VIEW</code> for detail page, <code>EDIT</code> for editing page and <code>API</code> for listing page and select2 data.</p> required <code>request</code> <code>Request</code> <p>The request being processed</p> required Source code in <code>starlette_admin/views.py</code> <pre><code>async def serialize_field_value(\nself, value: Any, field: BaseField, action: RequestAction, request: Request\n) -&gt; Any:\n\"\"\"\n    Format output value for each field.\n    !!! important\n        The returned value should be json serializable\n    Parameters:\n        value: attribute of item returned by `find_all` or `find_by_pk`\n        field: Starlette Admin field for this attribute\n        action: Specify where the data will be used. Possible values are\n            `VIEW` for detail page, `EDIT` for editing page and `API`\n            for listing page and select2 data.\n        request: The request being processed\n    \"\"\"\nif value is None:\nreturn await field.serialize_none_value(request, action)\nreturn await field.serialize_value(request, value, action)\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#0112-2023-08-31","title":"[0.11.2] - 2023-08-31","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Bug Fix: Current Enum Value Not Pre-Selected on Edit by @jowilf   in #273</li> </ul>"},{"location":"changelog/#0111-2023-07-29","title":"[0.11.1] - 2023-07-29","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Bug Fix: Ensure Excluded fields from a RequestAction are not treated by @jowilf   in #251</li> </ul>"},{"location":"changelog/#0110-2023-07-26","title":"[0.11.0] - 2023-07-26","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Improve the Authentication Provider to support custom flow such as oauth2/OIDC by @jowilf   in #221.</li> </ul>"},{"location":"changelog/#internals","title":"Internals","text":"<ul> <li>Drop python 3.7 support by @jowilf   in #248</li> </ul>"},{"location":"changelog/#0101-2023-07-22","title":"[0.10.1] - 2023-07-22","text":""},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Fix #224 by @jowilf   in #227</li> <li>Fix #239: Order Select2 data by primary key during fetching by   @jowilf in #241</li> </ul>"},{"location":"changelog/#0100-2023-06-26","title":"[0.10.0] - 2023-06-26","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Added support for Russian language in the web interface by @nessshon   in #201</li> <li>i18n: Update message catalogs by @jowilf   in #202</li> <li>Support custom response for batch actions by @jowilf   in #212</li> </ul>"},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Fixed #206: Setting <code>add_to_menu=False</code> in CustomView still   results in the view being displayed in the menu</li> </ul>"},{"location":"changelog/#090-2023-05-25","title":"[0.9.0] - 2023-05-25","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Enhance fields conversion logic to support custom converters   by @jowilf in #191</li> <li>Add deployment section to documentation by @jowilf   in #195</li> </ul>"},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Blank Edit Form Displayed for IntegerField with Value 0 by @jowilf   in #194</li> </ul>"},{"location":"changelog/#082-2023-05-12","title":"[0.8.2] - 2023-05-12","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Add <code>allow_paths</code> parameter to AuthProvider to allow unauthenticated access to specific paths   by @jowilf   in #187</li> <li>Allow Unauthenticated Access to <code>js.cookie.min.js</code> by @mixartemev   in #183</li> </ul>"},{"location":"changelog/#081-2023-04-30","title":"[0.8.1] - 2023-04-30","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Update fontawesome to 6.4.0 &amp; add missings webfonts by @jowilf   in #176</li> <li>Allow class level configuration for ModelView identity, name &amp; label by @jowilf   in #178</li> </ul>"},{"location":"changelog/#080-2023-04-09","title":"[0.8.0] - 2023-04-09","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Add extension to autovalidate SQLAlchemy data with pydantic by @jowilf   in #144</li> <li>Make <code>_extract_fields()</code> method in BaseModelView public and renamed   to get_fields_list() by @jowilf   in #148</li> <li>Add support for custom object representations in the admin interface with <code>__admin_repr__</code>   and <code>__admin_select2_repr__</code>  by @jowilf   in #152. The documentation can be   found here</li> </ul>"},{"location":"changelog/#internals_1","title":"Internals","text":"<ul> <li>Enhance code quality with additional ruff rules by @jowilf   in #159</li> </ul>"},{"location":"changelog/#070-2023-03-24","title":"[0.7.0] - 2023-03-24","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Allow custom form for batch actions by @giaptx and @jowilf   in #61</li> <li>Add TinyMCEEditorField by @sinisaos   and @jowilf   in #131</li> </ul>"},{"location":"changelog/#internals_2","title":"Internals","text":"<ul> <li>Add SQLAlchemy model with Pydantic validation example @jowilf   in #125</li> <li>Refactor and format HTML files for better readability by @jowilf   in #136</li> </ul>"},{"location":"changelog/#060-2023-03-12","title":"[0.6.0] - 2023-03-12","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Setup i18n and Add French translations by @jowilf in #74</li> <li>Add TimeZoneField, CountryField, CurrencyField &amp; ArrowField</li> <li>Add support for sqlalchemy_utils data types</li> <li>Add SQLAlchemy 2 support by  @jowilf in #113</li> <li>Add support for initial order (sort) to apply to the table by @jowilf in #115</li> </ul> <p>Usage</p> <pre><code>class User:\nid: int\nlast_name: str\nfirst_name: str\nclass UserView(ModelView):\nfields_default_sort = [\"last_name\", (\"first_name\", True)]\nadmin.add_view(UserView(User))\n</code></pre>"},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Fix #69 : Return <code>HTTP_422_UNPROCESSABLE_ENTITY</code> when form data is not valid</li> </ul>"},{"location":"changelog/#deprecated","title":"Deprecated","text":"<ul> <li><code>EnumField.from_enum(\"status\", Status)</code> is deprecated. Use <code>EnumField(\"status\", enum=Status)</code> instead.</li> <li><code>EnumField.from_choices(\"language\", [('cpp', 'C++'), ('py', 'Python')])</code> is deprecated. Use <code>EnumField(\"name\", choices=[('cpp', 'C++'), ('py', 'Python')])</code> instead.</li> </ul>"},{"location":"changelog/#055-2023-03-06","title":"[0.5.5] - 2023-03-06","text":""},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Fix #116 : Internal Server Error when login credentials are wrong by @jowilf in #117</li> </ul>"},{"location":"changelog/#054-2023-03-03","title":"[0.5.4] - 2023-03-03","text":""},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Fix #99 : Show error message when an error occur on <code>delete</code> action (detail view).</li> </ul>"},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li>Display meaningfully error message when SQLAlchemyError occur during action execution by @jowilf and @dolamroth in #105</li> </ul>"},{"location":"changelog/#053-2023-02-25","title":"[0.5.3] - 2023-02-25","text":""},{"location":"changelog/#fixed_8","title":"Fixed","text":"<ul> <li>Fix Bug with SQLAlchemy column converters by @jowilf in #103</li> </ul>"},{"location":"changelog/#052-2022-12-29","title":"[0.5.2] - 2022-12-29","text":""},{"location":"changelog/#fixed_9","title":"Fixed","text":"<ul> <li>Fix Bug with <code>search_format</code> params for DateField and TimeField by @jowilf &amp; @ihuro in #68 &amp; #71</li> </ul>"},{"location":"changelog/#051-2022-12-27","title":"[0.5.1] - 2022-12-27","text":""},{"location":"changelog/#fixed_10","title":"Fixed","text":"<ul> <li>Fix Bug with <code>sqlalchemy.dialects.postgresql.base.UUID</code> column by @jowilf in #65</li> </ul>"},{"location":"changelog/#050-2022-12-17","title":"[0.5.0] - 2022-12-17","text":""},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li>Introduce <code>AdminUser</code> and add navbar to show the current <code>AdminUser</code> information (<code>username</code> and <code>photo</code>) by @jowilf in #49</li> </ul>"},{"location":"changelog/#internals_3","title":"Internals","text":"<ul> <li>Add auth example by @jowilf in #51</li> </ul>"},{"location":"changelog/#040-2022-12-07","title":"[0.4.0] - 2022-12-07","text":""},{"location":"changelog/#added_10","title":"Added","text":"<ul> <li>Custom batch actions by @jowilf in #44</li> <li>Add <code>get_list_query</code>, <code>get_count_query</code> and <code>get_search_query</code> methods to SQLAlchemy backend that can be inherited for customization by @jowilf in #47</li> </ul>"},{"location":"changelog/#internals_4","title":"Internals","text":"<ul> <li>Update datatables to <code>1.13.1</code></li> <li>Update Search builder UI to fit tabler design</li> </ul>"},{"location":"changelog/#032-2022-12-02","title":"[0.3.2] - 2022-12-02","text":""},{"location":"changelog/#fixed_11","title":"Fixed","text":"<ul> <li>Fix Datatables warning when primary key is not included in <code>fields</code> by @jowilf in #23</li> </ul>"},{"location":"changelog/#docs","title":"Docs","text":"<ul> <li>Add spanish translation for <code>docs/index.md</code> by @rafnixg in #35</li> </ul>"},{"location":"changelog/#internals_5","title":"Internals","text":"<ul> <li>Use Ruff for linting by @jowilf in #29</li> <li>Migrate to Hatch by @jowilf in #30</li> <li>Setup pre-commit by @jowilf in #33</li> <li>Add support for Python 3.11 in test suite by @jowilf in #34</li> </ul>"},{"location":"changelog/#031-2022-11-22","title":"[0.3.1] - 2022-11-22","text":""},{"location":"changelog/#fixed_12","title":"Fixed","text":"<ul> <li>Fix Regression on SQLModel backend: Duplicate instances when creating or updating a model with relationships in #23</li> </ul>"},{"location":"changelog/#030-2022-11-21","title":"[0.3.0] - 2022-11-21","text":""},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Changes in <code>ModelView</code> definition</li> </ul> NowBefore <pre><code>class Post:\nid: int\ntitle: str\nadmin.add_view(ModelView(Post, icon=\"fa fa-blog\", label = \"Blog Posts\"))\n</code></pre> <pre><code>class Post:\nid: int\ntitle: str\nclass PostView(ModelView, model=Post):\nicon = \"fa fa-blog\"\nlabel = \"Blog Posts\"\nadmin.add_view(PostView)\n</code></pre> <ul> <li>Changes in <code>CustomView</code> definition</li> </ul> NowBefore <pre><code>admin.add_view(CustomView(label=\"Home\", icon=\"fa fa-home\", path=\"/home\", template_path=\"home.html\"))\n</code></pre> <pre><code>class HomeView(CustomView):\nlabel = \"Home\"\nicon = \"fa fa-home\"\npath = \"/home\"\ntemplate_path = \"home.html\"\nadmin.add_view(HomeView)\n</code></pre> <ul> <li>Changes in <code>Link</code> definition</li> </ul> NowBefore <pre><code>admin.add_view(Link(label=\"Back to Home\", icon=\"fa fa-home\", url=\"/\", target = \"_blank\"))\n</code></pre> <pre><code>class BackToHome(Link):\nlabel = \"Back to Home\"\nicon = \"fa fa-home\"\nurl = \"/\"\ntarget = \"_blank\"\n</code></pre> <p>These changes are inspired from Flask-admin and are introduced to help reduce code size and keep it simple.</p>"},{"location":"changelog/#added_11","title":"Added","text":"<ul> <li>Add <code>CollectionField</code></li> <li>Add <code>ListField</code></li> <li>Add support for Odmantic</li> <li>Add support for datatables responsive extensions</li> </ul> <p>Usage</p> <pre><code>class MyModelView(ModelView):\nresponsive_table = True\n</code></pre>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Move <code>SQLModel</code> to it own contrib package</li> <li>MongoEngine <code>EmbeddedDocumentField</code> is now converted into <code>CollectionField</code></li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Remove PDF from default <code>export_types</code></li> </ul>"},{"location":"changelog/#022-2022-09-20","title":"[0.2.2] - 2022-09-20","text":""},{"location":"changelog/#fixed_13","title":"Fixed","text":"<ul> <li>Null support for EnumField in #17</li> </ul>"},{"location":"changelog/#021-2022-09-19","title":"[0.2.1] - 2022-09-19","text":""},{"location":"changelog/#fixed_14","title":"Fixed","text":"<ul> <li>Fix SearchBuilder not working with dates (SQLAlchemy) in #15</li> </ul>"},{"location":"changelog/#020-2022-09-14","title":"[0.2.0] - 2022-09-14","text":""},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Date &amp; Time input now use Flatpickr in #10</li> </ul>"},{"location":"changelog/#011-2022-09-09","title":"[0.1.1] - 2022-09-09","text":""},{"location":"changelog/#added_12","title":"Added","text":"<ul> <li>Add <code>ColorField</code> in #7</li> <li>AsyncEngine support for SQLAlchemy in #8</li> </ul>"},{"location":"deployment/","title":"Deployment","text":"<p>Whether you're using Starlette-Admin with FastAPI or Starlette, there are already well-documented resources to guide you through the deployment process. It is strongly recommended to refer to these resources as they offer detailed information and best practices:</p> <ul> <li>FastAPI Deployment Documentation</li> <li>Uvicorn Deployment Documentation</li> </ul> <p>However, When running your application behind a proxy server such as Traefik or Nginx, you may encounter an issue where static files are not rendered as HTTPS links. To address this issue, follow the steps below:</p> <ol> <li>Ensure that your proxy server is properly configured to handle HTTPS traffic.</li> <li>When starting your application with Uvicorn, include the <code>--forwarded-allow-ips</code> and <code>--proxy-headers</code> options.    These options enable Uvicorn to correctly handle forwarded headers from the proxy server.</li> </ol> Example<pre><code>uvicorn app.main:app --forwarded-allow-ips='*' --proxy-headers\n</code></pre>"},{"location":"tutorial/authentication/","title":"Authentication &amp; Authorization","text":"<p>To protect your admin interface from unwanted users, you can create an Authentication Provider by extending the AuthProvider class and set <code>auth_provider</code> when declaring your admin app</p>"},{"location":"tutorial/authentication/#username-and-password-authentication","title":"Username and Password Authentication","text":"<p>By default, AuthProvider provides a login form with <code>username</code> and <code>password</code> fields for basic username and password authentication. To fully support this authentication method, you need to implement the following methods in your custom Authentication Provider:</p> <ul> <li>is_authenticated: This method will be called to validate   each incoming request.</li> <li>get_admin_user: Return connected user <code>name</code> and/or <code>profile</code></li> <li>login: will be called to validate user credentials.</li> <li>logout: Will be called to logout (clear sessions, cookies, ...)</li> </ul> <pre><code>from starlette.requests import Request\nfrom starlette.responses import Response\nfrom starlette_admin.auth import AdminUser, AuthProvider\nfrom starlette_admin.exceptions import FormValidationError, LoginFailed\nusers = {\n\"admin\": {\n\"name\": \"Admin\",\n\"avatar\": \"admin.png\",\n\"roles\": [\"read\", \"create\", \"edit\", \"delete\", \"action_make_published\"],\n},\n\"johndoe\": {\n\"name\": \"John Doe\",\n\"avatar\": None, # user avatar is optional\n\"roles\": [\"read\", \"create\", \"edit\", \"action_make_published\"],\n},\n\"viewer\": {\"name\": \"Viewer\", \"avatar\": \"guest.png\", \"roles\": [\"read\"]},\n}\nclass UsernameAndPasswordProvider(AuthProvider):\n\"\"\"\n    This is only for demo purpose, it's not a better\n    way to save and validate user credentials\n    \"\"\"\nasync def login(\nself,\nusername: str,\npassword: str,\nremember_me: bool,\nrequest: Request,\nresponse: Response,\n) -&gt; Response:\nif len(username) &lt; 3:\n\"\"\"Form data validation\"\"\"\nraise FormValidationError(\n{\"username\": \"Ensure username has at least 03 characters\"}\n)\nif username in users and password == \"password\":\n\"\"\"Save `username` in session\"\"\"\nrequest.session.update({\"username\": username})\nreturn response\nraise LoginFailed(\"Invalid username or password\")\nasync def is_authenticated(self, request) -&gt; bool:\nif request.session.get(\"username\", None) in users:\n\"\"\"\n            Save current `user` object in the request state. Can be used later\n            to restrict access to connected user.\n            \"\"\"\nrequest.state.user = users.get(request.session[\"username\"])\nreturn True\nreturn False\ndef get_admin_user(self, request: Request) -&gt; AdminUser:\nuser = request.state.user  # Retrieve current user\nphoto_url = None\nif user[\"avatar\"] is not None:\nphoto_url = request.url_for(\"static\", path=user[\"avatar\"])\nreturn AdminUser(username=user[\"name\"], photo_url=photo_url)\nasync def logout(self, request: Request, response: Response) -&gt; Response:\nrequest.session.clear()\nreturn response\n</code></pre> <p>For a working example, have a look at <code>https://github.com/jowilf/starlette-admin/tree/main/examples/auth</code></p>"},{"location":"tutorial/authentication/#custom-authentication-flow-oauth2oidc","title":"Custom Authentication flow (OAuth2/OIDC, ...)","text":"<p>If you prefer to use a custom authentication flow, such as OAuth2 or OIDC, you can implement the following methods in your custom Authentication Provider:</p> <ul> <li>is_authenticated: This method will be called to validate each incoming request.</li> <li>get_admin_user: Return connected user <code>name</code> and/or <code>profile</code></li> <li>render_login: Override the default behavior to render a custom login page.</li> <li>render_logout: Implement the custom logout logic.</li> </ul> <p>Additionally, you can override these methods depending on your needs:</p> <ul> <li>get_middleware: To provide a custom authentication middleware   for the admin interface</li> <li>setup_admin: This method is called during the setup process of   the admin interface and allows for custom configuration and setup.</li> </ul> <pre><code>from typing import Optional\nfrom starlette.datastructures import URL\nfrom starlette.middleware import Middleware\nfrom starlette.requests import Request\nfrom starlette.responses import RedirectResponse, Response\nfrom starlette.routing import Route\nfrom starlette_admin import BaseAdmin\nfrom starlette_admin.auth import AdminUser, AuthMiddleware, AuthProvider\nfrom authlib.integrations.starlette_client import OAuth\nfrom .config import AUTH0_CLIENT_ID, AUTH0_CLIENT_SECRET, AUTH0_DOMAIN\noauth = OAuth()\noauth.register(\n\"auth0\",\nclient_id=AUTH0_CLIENT_ID,\nclient_secret=AUTH0_CLIENT_SECRET,\nclient_kwargs={\n\"scope\": \"openid profile email\",\n},\nserver_metadata_url=f\"https://{AUTH0_DOMAIN}/.well-known/openid-configuration\",\n)\nclass MyAuthProvider(AuthProvider):\nasync def is_authenticated(self, request: Request) -&gt; bool:\nif request.session.get(\"user\", None) is not None:\nrequest.state.user = request.session.get(\"user\")\nreturn True\nreturn False\ndef get_admin_user(self, request: Request) -&gt; Optional[AdminUser]:\nuser = request.state.user\nreturn AdminUser(\nusername=user[\"name\"],\nphoto_url=user[\"picture\"],\n)\nasync def render_login(self, request: Request, admin: BaseAdmin):\n\"\"\"Override the default login behavior to implement custom logic.\"\"\"\nauth0 = oauth.create_client(\"auth0\")\nredirect_uri = request.url_for(\nadmin.route_name + \":authorize_auth0\"\n).include_query_params(next=request.query_params.get(\"next\"))\nreturn await auth0.authorize_redirect(request, str(redirect_uri))\nasync def render_logout(self, request: Request, admin: BaseAdmin) -&gt; Response:\n\"\"\"Override the default logout to implement custom logic\"\"\"\nrequest.session.clear()\nreturn RedirectResponse(\nurl=URL(f\"https://{AUTH0_DOMAIN}/v2/logout\").include_query_params(\nreturnTo=request.url_for(admin.route_name + \":index\"),\nclient_id=AUTH0_CLIENT_ID,\n)\n)\nasync def handle_auth_callback(self, request: Request):\nauth0 = oauth.create_client(\"auth0\")\ntoken = await auth0.authorize_access_token(request)\nrequest.session.update({\"user\": token[\"userinfo\"]})\nreturn RedirectResponse(request.query_params.get(\"next\"))\ndef setup_admin(self, admin: \"BaseAdmin\"):\nsuper().setup_admin(admin)\n\"\"\"add custom authentication callback route\"\"\"\nadmin.routes.append(\nRoute(\n\"/auth0/authorize\",\nself.handle_auth_callback,\nmethods=[\"GET\"],\nname=\"authorize_auth0\",\n)\n)\ndef get_middleware(self, admin: \"BaseAdmin\") -&gt; Middleware:\nreturn Middleware(\nAuthMiddleware, provider=self, allow_paths=[\"/auth0/authorize\"]\n)\n</code></pre> <p>For a working example, have a look at <code>https://github.com/jowilf/starlette-admin/tree/main/examples/authlib</code></p> <p>The AuthProvider can be added at your admin interface as follows:</p> <pre><code>admin = Admin(\nengine,\ntitle=\"Example: Authentication\",\nauth_provider=MyAuthProvider(),\nmiddlewares=[Middleware(SessionMiddleware, secret_key=SECRET)],\n)\n</code></pre>"},{"location":"tutorial/authentication/#authorization","title":"Authorization","text":""},{"location":"tutorial/authentication/#for-all-views","title":"For all views","text":"<p>Each view implement is_accessible method which can be used to restrict access to current user.</p> <pre><code>from starlette_admin import CustomView\nfrom starlette.requests import Request\nclass ReportView(CustomView):\ndef is_accessible(self, request: Request) -&gt; bool:\nreturn \"admin\" in request.state.user[\"roles\"]\n</code></pre> <p>Important</p> <p>When view is inaccessible, it does not appear in menu structure</p>"},{"location":"tutorial/authentication/#for-modelview","title":"For ModelView","text":"<p>In ModelView, there is four additional methods you can override to restrict access to current user.</p> <ul> <li><code>can_view_details</code>: Permission for viewing full details of Items</li> <li><code>can_create</code>: Permission for creating new Items</li> <li><code>can_edit</code>: Permission for editing Items</li> <li><code>can_delete</code>: Permission for deleting Items</li> <li><code>is_action_allowed</code>:  verify if action with <code>name</code> is allowed.</li> </ul> <pre><code>from starlette_admin.contrib.sqla import ModelView\nfrom starlette.requests import Request\nfrom starlette_admin import action\nclass ArticleView(ModelView):\nexclude_fields_from_list = [Article.body]\ndef can_view_details(self, request: Request) -&gt; bool:\nreturn \"read\" in request.state.user[\"roles\"]\ndef can_create(self, request: Request) -&gt; bool:\nreturn \"create\" in request.state.user[\"roles\"]\ndef can_edit(self, request: Request) -&gt; bool:\nreturn \"edit\" in request.state.user[\"roles\"]\ndef can_delete(self, request: Request) -&gt; bool:\nreturn \"delete\" in request.state.user[\"roles\"]\nasync def is_action_allowed(self, request: Request, name: str) -&gt; bool:\nif name == \"make_published\":\nreturn \"action_make_published\" in request.state.user[\"roles\"]\nreturn await super().is_action_allowed(request, name)\n@action(\nname=\"make_published\",\ntext=\"Mark selected articles as published\",\nconfirmation=\"Are you sure you want to mark selected articles as published ?\",\nsubmit_btn_text=\"Yes, proceed\",\nsubmit_btn_class=\"btn-success\",\n)\nasync def make_published_action(self, request: Request, pks: List[Any]) -&gt; str:\n...\nreturn \"{} articles were successfully marked as published\".format(len(pks))\n</code></pre>"},{"location":"tutorial/batch-actions/","title":"Batch Actions","text":"<p>By default, to update an object, you must select it in the list page and update it. This works well for a majority of use cases. However, if you need to make the same change to many objects at once, this workflow can be quite tedious.</p> <p>In these cases, you can write a custom batch action to bulk update many objects at once.</p> <p>Note</p> <p>starlette-admin add by default an action to delete many object at once</p> <p>To add other batch actions to your ModelView, besides the default delete action, you can define a function that implements the desired logic and wrap it with the @action decorator (Heavily inspired by Flask-Admin).</p>"},{"location":"tutorial/batch-actions/#example","title":"Example","text":"<pre><code>from typing import List, Any\nfrom starlette.datastructures import FormData\nfrom starlette.requests import Request\nfrom starlette.responses import RedirectResponse, Response\nfrom starlette_admin import action\nfrom starlette_admin.contrib.sqla import ModelView\nfrom starlette_admin.exceptions import ActionFailed\nclass ArticleView(ModelView):\nactions = [\"make_published\", \"redirect\", \"delete\"] # `delete` function is added by default\n@action(\nname=\"make_published\",\ntext=\"Mark selected articles as published\",\nconfirmation=\"Are you sure you want to mark selected articles as published ?\",\nsubmit_btn_text=\"Yes, proceed\",\nsubmit_btn_class=\"btn-success\",\nform=\"\"\"\n        &lt;form&gt;\n            &lt;div class=\"mt-3\"&gt;\n                &lt;input type=\"text\" class=\"form-control\" name=\"example-text-input\" placeholder=\"Enter value\"&gt;\n            &lt;/div&gt;\n        &lt;/form&gt;\n        \"\"\",\n)\nasync def make_published_action(self, request: Request, pks: List[Any]) -&gt; str:\n# Write your logic here\ndata: FormData = await request.form()\nuser_input = data.get(\"example-text-input\")\nif ...:\n# Display meaningfully error\nraise ActionFailed(\"Sorry, We can't proceed this action now.\")\n# Display successfully message\nreturn \"{} articles were successfully marked as published\".format(len(pks))\n# For custom response\n@action(\nname=\"redirect\",\ntext=\"Redirect\",\ncustom_response=True,\nconfirmation=\"Fill the form\",\nform='''\n        &lt;form&gt;\n            &lt;div class=\"mt-3\"&gt;\n                &lt;input type=\"text\" class=\"form-control\" name=\"value\" placeholder=\"Enter value\"&gt;\n            &lt;/div&gt;\n        &lt;/form&gt;\n        '''\n)\nasync def redirect_action(self, request: Request, pks: List[Any]) -&gt; Response:\ndata = await request.form()\nreturn RedirectResponse(f\"https://example.com/?value={data['value']}\")\n</code></pre>"},{"location":"tutorial/configurations/admin/","title":"Admin Configurations","text":"<p>Multiple options are available to customize your admin interface</p> <pre><code>admin = Admin(\ntitle=\"SQLModel Admin\",\nbase_url=\"/admin\",\nroute_name=\"admin\",\nstatics_dir=\"statics/admin\",\ntemplates_dir=\"templates/admin\",\nlogo_url=\"`https`://preview.tabler.io/static/logo-white.svg\",\nlogin_logo_url=\"`https`://preview.tabler.io/static/logo.svg\",\nindex_view=CustomView(label=\"Home\", icon=\"fa fa-home\", path=\"/home\", template_path=\"home.html\"),\nauth_provider=MyAuthProvider(login_path=\"/sign-in\", logout_path=\"/sign-out\"),\nmiddlewares=[],\ndebug=False,\ni18n_config = I18nConfig(default_locale=\"en\")\n)\n</code></pre>"},{"location":"tutorial/configurations/admin/#parameters","title":"Parameters","text":"<ul> <li><code>title</code>: Admin title.</li> <li><code>base_url</code>: Base URL for Admin interface.</li> <li><code>route_name</code>: Mounted Admin name</li> <li><code>logo_url</code>: URL of logo to be displayed instead of title.</li> <li><code>login_logo_url</code>: If set, it will be used for login interface instead of logo_url.</li> <li><code>statics_dir</code>: Templates dir for static files customisation</li> <li><code>templates_dir</code>: Templates dir for customisation</li> <li><code>index_view</code>: CustomView to use for index page.</li> <li><code>auth_provider</code>: Authentication Provider</li> <li><code>middlewares</code>: Starlette middlewares</li> <li><code>i18n_config</code>: i18n config for your admin interface</li> </ul>"},{"location":"tutorial/configurations/modelview/","title":"ModelView Configurations","text":"<p>There are multiple options available to customize your ModelView. For a complete list, please refer to the API documentation for BaseModelView().</p> <p>Here are some of the most commonly used options:</p>"},{"location":"tutorial/configurations/modelview/#fields","title":"Fields","text":"<p>You can use the <code>fields</code> property of the ModelView class to customize which fields are included in the admin view.</p> <pre><code>from sqlalchemy import JSON, Column, Integer, String, Text, create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom starlette.applications import Starlette\nfrom starlette_admin import TagsField\nfrom starlette_admin.contrib.sqla import Admin, ModelView\nBase = declarative_base()\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\nclass Post(Base):\n__tablename__ = \"posts\"\nid = Column(Integer, primary_key=True)\ntitle = Column(String)\ntags = Column(JSON)\ncontent = Column(Text)\nclass PostView(ModelView):\nfields = [\"id\", \"title\", Post.content, TagsField(\"tags\", label=\"Tags\")]\napp = Starlette()\nadmin = Admin(engine)\nadmin.add_view(PostView(Post, icon=\"fa fa-blog\"))\nadmin.mount_to(app)\n</code></pre>"},{"location":"tutorial/configurations/modelview/#exclusions","title":"Exclusions","text":"<p>There are several options available for customizing which fields are displayed in different parts of the admin view. These options include:</p> <ul> <li><code>exclude_fields_from_list</code>: List of fields to exclude from the List page.</li> <li><code>exclude_fields_from_detail</code>: List of fields to exclude from the Detail page.</li> <li><code>exclude_fields_from_create</code>: List of fields to exclude from the creation page.</li> <li><code>exclude_fields_from_edit</code>: List of fields to exclude from the editing page.\\</li> </ul> <pre><code>class PostView(ModelView):\nexclude_fields_from_list = [Post.content, Post.tags]\n</code></pre> <p>Note</p> <p>For more advanced use cases, you can override the ModelView.get_fields_list() function.</p>"},{"location":"tutorial/configurations/modelview/#searching-sorting","title":"Searching &amp; Sorting","text":"<p>Several options are available to specify which fields can be sorted or searched.</p> <ul> <li><code>searchable_fields</code> for list of searchable fields</li> <li><code>sortable_fields</code> for list of orderable fields</li> <li><code>fields_default_sort</code> for initial order (sort) to apply to the table</li> </ul> <p>Usage</p> <pre><code>class PostView(ModelView):\nsortable_fields = [Post.id, \"title\"]\nsearchable_fields = [Post.id, Post.title, \"tags\"]\nfields_default_sort = [\"title\", (\"price\", True)]\n</code></pre>"},{"location":"tutorial/configurations/modelview/#exporting","title":"Exporting","text":"<p>One of the powerful features of Starlette-admin is the ability to export data from the list page.</p> <p>You can specify the export options for each ModelView using the following attributes:</p> <ul> <li><code>export_fields</code>:  List of fields to include in the export.</li> <li><code>export_types</code>: A list of available export filetypes. Available   exports are <code>['csv', 'excel', 'pdf', 'print']</code>. By default, only <code>pdf</code> is disabled.</li> </ul> <p>Example</p> <pre><code>from starlette_admin import ExportType\nclass PostView(ModelView):\nexport_fields = [Post.id, Post.content, Post.tags]\nexport_types = [ExportType.CSV, ExportType.EXCEL]\n</code></pre>"},{"location":"tutorial/configurations/modelview/#pagination","title":"Pagination","text":"<p>The pagination options in the list page can be configured. The available options are:</p> <ul> <li><code>page_size</code>: Default number of items to display in List page pagination.             Default value is set to <code>10</code>.</li> <li><code>page_size_options</code>: Pagination choices displayed in List page.  Default value is set to <code>[10, 25, 50, 100]</code>.      Use <code>-1</code>to display All</li> </ul> <p>Example</p> <pre><code>class PostView(ModelView):\npage_size = 5\npage_size_options = [5, 10, 25, 50, -1]\n</code></pre>"},{"location":"tutorial/configurations/modelview/#templates","title":"Templates","text":"<p>The template files are built using Jinja2 and can be completely overridden in the configurations. The pages available are:</p> <ul> <li><code>list_template</code>: List view template. Default is <code>list.html</code>.</li> <li><code>detail_template</code>: Details view template. Default is <code>detail.html</code>.</li> <li><code>create_template</code>: Edit view template. Default is <code>create.html</code>.</li> <li><code>edit_template</code>: Edit view template. Default is <code>edit.html</code>.</li> </ul> <p>Example</p> <pre><code>class PostView(ModelView):\ndetail_template = \"post_detail.html\"\n</code></pre>"},{"location":"tutorial/configurations/modelview/#datatables-extensions","title":"Datatables Extensions","text":"<p>starlette-admin includes some datatable extensions by default. You can disable any of these extensions in your <code>ModelView</code> by overridden following options:</p> <ul> <li><code>column_visibility</code>: Enable/Disable column visibility extension</li> <li><code>search_builder</code>: Enable/Disable search builder extension</li> <li><code>responsive_table</code>: Enable/Disable responsive extension</li> </ul> <p>Example</p> <pre><code>class PostView(ModelView):\ncolumn_visibility = False\nsearch_builder = False\nresponsive_table = True\n</code></pre>"},{"location":"tutorial/configurations/modelview/#object-representation","title":"Object Representation","text":"<p>starlette-admin provides two methods for customizing how objects are represented in the admin interface:</p>"},{"location":"tutorial/configurations/modelview/#__admin_repr__","title":"<code>__admin_repr__</code>","text":"<p>It is a special method that can be defined in a model class to customize the object representation in the admin interface. By default, only the value of the object's primary key attribute is displayed. However, by implementing <code>__admin_repr__</code>, you can return a string that better represents the object in the admin interface.</p> <p>Example</p> <p>For example, the following implementation for a <code>User</code> model will display the user's full name instead of their primary key in the admin interface:</p> <pre><code>class User:\nid: int\nfirst_name: str\nlast_name: str\nasync def __admin_repr__(self, request: Request):\nreturn f\"{self.last_name} {self.first_name}\"\n</code></pre> <p></p>"},{"location":"tutorial/configurations/modelview/#__admin_select2_repr__","title":"<code>__admin_select2_repr__</code>","text":"<p>This method is similar to <code>__admin_repr__</code>, but it returns an HTML string that is used to display the object in a <code>select2</code> widget. By default, all the object's attributes allowed for detail page are used except relation and file fields.</p> <p>Note</p> <p>The returned value should be valid HTML.</p> <p>Danger</p> <p>Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with <code>autoescape=True</code>. For more information, visit OWASP website <pre><code>from jinja2 import Template\nTemplate(\"Hello {{name}}\", autoescape=True).render(name=name)\n</code></pre></p> <p>Example</p> <p>Here is an example implementation for a <code>User</code> model that includes the user's name and photo:</p> <pre><code>class User:\nid: int\nname: str\nphoto_url: str\nasync def __admin_select2_repr__(self, request: Request) -&gt; str:\nreturn f'&lt;div&gt;&lt;img src=\"{escape(photo_url)}\"&gt;&lt;span&gt;{escape(self.name)}&lt;/span&gt;&lt;/div&gt;'\n</code></pre> <p></p>"},{"location":"tutorial/files/","title":"Managing files","text":"<p>Starlette-Admin has out-of-the-box support for SQLAlchemy-file and Gridfs through Mongoengine FileField &amp; ImageField</p>"},{"location":"tutorial/files/#sqlalchemy-sqlmodel","title":"SQLAlchemy &amp; SQLModel","text":"<p>All you need is to add ImageField or FileField from SQLAlchemy-file to your model</p> <pre><code>from sqlalchemy import Column, Integer, String\nfrom sqlalchemy.orm import declarative_base\nfrom sqlalchemy_file import FileField, ImageField\nfrom starlette_admin.contrib.sqla import ModelView\nBase = declarative_base()\nclass Book(Base):\n__tablename__ = \"book\"\nid = Column(Integer, autoincrement=True, primary_key=True)\ntitle = Column(String(50), unique=True)\ncover = Column(ImageField(thumbnail_size=(128, 128)))\ncontent = Column(FileField)\nclass BookView(ModelView):\npass\nadmin.add_view(BookView(Book))\n</code></pre> <p>Note</p> <p>You can also use <code>multiple=True</code> to save multiple files.</p>"},{"location":"tutorial/files/#mongoengine","title":"MongoEngine","text":"<p>Starlette-Admin support ImageField and FileField</p> <pre><code>from mongoengine import Document, FileField, ImageField, StringField\nfrom starlette_admin.contrib.mongoengine import ModelView\nclass Book(Document):\ntitle = StringField(max_length=50)\ncover = ImageField(thumbnail_size=(128, 128))\ncontent = FileField()\nclass BookView(ModelView):\npass\nadmin.add_view(BookView(Book))\n</code></pre>"},{"location":"tutorial/getting-started/","title":"Getting started","text":""},{"location":"tutorial/getting-started/#initialization","title":"Initialization","text":"<p>The first step is to initialize an empty admin interface for your app:</p> SQLAlchemySQLModelMongoEngineODMantic <pre><code>from sqlalchemy import create_engine\nfrom starlette_admin.contrib.sqla import Admin\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\nadmin = Admin(engine)\n</code></pre> <pre><code>from sqlalchemy import create_engine\nfrom starlette_admin.contrib.sqlmodel import Admin\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\nadmin = Admin(engine)\n</code></pre> <pre><code>from starlette_admin.contrib.mongoengine import Admin\nadmin = Admin()\n</code></pre> <pre><code>from odmantic import AIOEngine\nfrom starlette_admin.contrib.odmantic import Admin\nengine = AIOEngine()\nadmin = Admin(engine)\n</code></pre>"},{"location":"tutorial/getting-started/#adding-views","title":"Adding Views","text":""},{"location":"tutorial/getting-started/#modelview","title":"ModelView","text":"<p>Model views allow you to add a dedicated set of admin pages for managing any model.</p> SQLAlchemySQLModelMongoEngineODMantic <pre><code>from sqlalchemy import create_engine\nfrom starlette_admin.contrib.sqla import Admin, ModelView\nfrom .models import User, Post\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\nadmin = Admin(engine)\nadmin.add_view(ModelView(User))\nadmin.add_view(ModelView(Post))\n</code></pre> <pre><code>from sqlalchemy import create_engine\nfrom starlette_admin.contrib.sqlmodel import Admin, ModelView\nfrom .models import User, Post\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\nadmin = Admin(engine)\nadmin.add_view(ModelView(User))\nadmin.add_view(ModelView(Post))\n</code></pre> <pre><code>from starlette_admin.contrib.mongoengine import Admin, ModelView\nfrom .models import Post, User\nadmin = Admin()\nadmin.add_view(ModelView(User))\nadmin.add_view(ModelView(Post))\n</code></pre> <pre><code>from odmantic import AIOEngine\nfrom starlette_admin.contrib.odmantic import Admin, ModelView\nfrom .models import Post, User\nengine = AIOEngine()\nadmin = Admin(engine)\nadmin.add_view(ModelView(User))\nadmin.add_view(ModelView(Post))\n</code></pre> <p>This gives you a set of fully featured CRUD views for your model:</p> <ul> <li>A list view, with support for searching, sorting, filtering, and deleting records.</li> <li>A create view for adding new records.</li> <li>An edit view for updating existing records.</li> <li>A read-only details view.</li> </ul>"},{"location":"tutorial/getting-started/#customview","title":"CustomView","text":"<p>With CustomView you can add your own views (not tied to any particular model). For example, a custom home page that displays some analytics data.</p> <pre><code>from starlette_admin import CustomView\nadmin.add_view(CustomView(label=\"Home\", icon=\"fa fa-home\", path=\"/home\", template_path=\"home.html\"))\n</code></pre> <p>To have a full control of the rendering, override the <code>render</code> methods</p> <pre><code>from starlette.requests import Request\nfrom starlette.responses import Response\nfrom starlette.templating import Jinja2Templates\nfrom starlette_admin import CustomView\nclass HomeView(CustomView):\nasync def render(self, request: Request, templates: Jinja2Templates) -&gt; Response:\nreturn templates.TemplateResponse(\n\"home.html\", {\"request\": request, \"latest_posts\": ..., \"top_users\": ...}\n)\nadmin.add_view(HomeView(label=\"Home\", icon=\"fa fa-home\", path=\"/home\"))\n</code></pre>"},{"location":"tutorial/getting-started/#link","title":"Link","text":"<p>Use Link to add arbitrary hyperlinks to the menu</p> <pre><code>from starlette_admin.views import Link\nadmin.add_view(Link(label=\"Home Page\", icon=\"fa fa-link\", url=\"/\"))\n</code></pre>"},{"location":"tutorial/getting-started/#dropdown","title":"DropDown","text":"<p>Use DropDown to group views together in menu structure</p> <pre><code>from starlette_admin import CustomView, DropDown\nfrom starlette_admin.contrib.sqla import ModelView\nfrom starlette_admin.views import Link\nfrom .models import User\nadmin.add_view(\nDropDown(\n\"Resources\",\nicon=\"fa fa-list\",\nviews=[\nModelView(User),\nLink(label=\"Home Page\", url=\"/\"),\nCustomView(label=\"Dashboard\", path=\"/dashboard\", template_path=\"dashboard.html\"),\n],\n)\n)\n</code></pre>"},{"location":"tutorial/getting-started/#mount-admin-to-your-app","title":"Mount admin to your app","text":"<p>The last step is to mount the admin interfaces to your app</p> SQLAlchemySQLModelMongoEngineODMantic <pre><code>from sqlalchemy import create_engine\nfrom starlette.applications import Starlette\nfrom starlette_admin.contrib.sqla import Admin, ModelView\nfrom .models import Post, User\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\napp = Starlette() # FastAPI()\nadmin = Admin(engine)\nadmin.add_view(ModelView(User))\nadmin.add_view(ModelView(Post))\nadmin.mount_to(app)\n</code></pre> <pre><code>from sqlalchemy import create_engine\nfrom starlette.applications import Starlette\nfrom starlette_admin.contrib.sqlmodel import Admin, ModelView\nfrom .models import Post, User\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\napp = Starlette()  # FastAPI()\nadmin = Admin(engine)\nadmin.add_view(ModelView(User))\nadmin.add_view(ModelView(Post))\nadmin.mount_to(app)\n</code></pre> <pre><code>from starlette.applications import Starlette\nfrom starlette_admin.contrib.mongoengine import Admin, ModelView\nfrom .models import Post, User\napp = Starlette()  # FastAPI()\nadmin = Admin()\nadmin.add_view(ModelView(User))\nadmin.add_view(ModelView(Post))\nadmin.mount_to(app)\n</code></pre> <pre><code>from odmantic import AIOEngine\nfrom starlette.applications import Starlette\nfrom starlette_admin.contrib.odmantic import Admin, ModelView\nfrom .models import Post, User\nengine = AIOEngine()\napp = Starlette()  # FastAPI()\nadmin = Admin(engine)\nadmin.add_view(ModelView(User))\nadmin.add_view(ModelView(Post))\nadmin.mount_to(app)\n</code></pre> <p>You can now access your admin interfaces in your browser at http://localhost:8000/admin</p>"},{"location":"tutorial/multiple-admin/","title":"Multiple Admin","text":"<p>You can add multiple admin to your app with different or same views. To manage this, simply use different <code>base_url</code> and <code>route_name</code></p> <pre><code>from starlette.applications import Starlette\nfrom starlette_admin import BaseAdmin as Admin\nfrom starlette_admin.contrib.sqla import ModelView\napp = Starlette()\nadmin1 = Admin(\n\"Admin1\", base_url=\"/admin1\", route_name=\"admin1\", templates_dir=\"templates/admin1\"\n)\nadmin1.add_view(ModelView(Report))\nadmin1.add_view(ModelView(Post))\nadmin1.mount_to(app)\nadmin2 = Admin(\n\"Admin2\", base_url=\"/admin2\", route_name=\"admin2\", templates_dir=\"templates/admin2\"\n)\nadmin2.add_view(ModelView(Post))\nadmin2.add_view(ModelView(User))\nadmin2.mount_to(app)\nassert app.url_path_for(\"admin1:index\") == \"/admin1/\"\nassert app.url_path_for(\"admin2:index\") == \"/admin2/\"\n</code></pre>"},{"location":"tutorial/validations/","title":"Forms Validations","text":"<p>Starlette-admin is designed to be flexible and agnostic to your specific database backend. Therefore, it doesn't include built-in data validation capabilities. Instead, data validation will depend on the validation mechanisms provided by your chosen database backend.</p>"},{"location":"tutorial/validations/#sqlalchemy","title":"SQLAlchemy","text":"<p>There are several options available for validating your data:</p>"},{"location":"tutorial/validations/#pydantic","title":"Pydantic","text":"<p>Pydantic is a widely used Python library that provides data validation capabilities using Python's type hints.</p> <p>To automatically validate submitted data with Pydantic, you only need to define a Pydantic model and use <code>starlette_admin.contrib.sqla.ext.pydantic.ModelView</code></p> <p>Example</p> <pre><code>from starlette_admin.contrib.sqla.ext.pydantic import ModelView\nclass Post(Base):\n__tablename__ = \"posts\"\nid = Column(Integer, primary_key=True)\ntitle = Column(String)\ncontent = Column(Text)\nviews = Column(Integer)\nclass PostIn(BaseModel):\nid: Optional[int] = Field(primary_key=True)\ntitle: str = Field(min_length=3)\ncontent: str = Field(min_length=10)\nviews: int = Field(multiple_of=4)\n@validator(\"title\")\ndef title_must_contain_space(cls, v):\nif \" \" not in v.strip():\nraise ValueError(\"title must contain a space\")\nreturn v.title()\n# Add view\nadmin.add_view(ModelView(Post, pydantic_model=PostIn))\n</code></pre>"},{"location":"tutorial/validations/#custom-validation","title":"Custom Validation","text":"<p>You can also create your own validation functions to enforce specific data requirements.</p> <p>Example</p> <pre><code>from starlette_admin.contrib.sqla import ModelView\nfrom starlette_admin.exceptions import FormValidationError\nclass PostView(ModelView):\nasync def validate(self, request: Request, data: Dict[str, Any]) -&gt; None:\n\"\"\"Raise FormValidationError to display error in forms\"\"\"\nerrors: Dict[str, str] = dict()\n_2day_from_today = date.today() + timedelta(days=2)\nif data[\"title\"] is None or len(data[\"title\"]) &lt; 3:\nerrors[\"title\"] = \"Ensure this value has at least 03 characters\"\nif data[\"text\"] is None or len(data[\"text\"]) &lt; 10:\nerrors[\"text\"] = \"Ensure this value has at least 10 characters\"\nif data[\"date\"] is None or data[\"date\"] &lt; _2day_from_today:\nerrors[\"date\"] = \"We need at least one day to verify your post\"\nif data[\"publisher\"] is None:\nerrors[\"publisher\"] = \"Publisher is required\"\nif data[\"tags\"] is None or len(data[\"tags\"]) &lt; 1:\nerrors[\"tags\"] = \"At least one tag is required\"\nif len(errors) &gt; 0:\nraise FormValidationError(errors)\nreturn await super().validate(request, data)\n</code></pre> <p></p> Info <p>Full example available here</p>"},{"location":"tutorial/validations/#sqlmodel","title":"SQLModel","text":"<p>With SQLModel, validating your data is made easy. Once you've defined your model, any data submitted to it will be automatically validated.</p> <p>Example</p> <pre><code>from sqlmodel import SQLModel, Field\nfrom pydantic import validator\nclass Post(SQLModel, table=True):\nid: Optional[int] = Field(primary_key=True)\ntitle: str = Field()\ncontent: str = Field(min_length=10)\nviews: int = Field(multiple_of=4)\n@validator('title')\ndef title_must_contain_space(cls, v):\nif ' ' not in v:\nraise ValueError('title must contain a space')\nreturn v.title()\n</code></pre> <p></p> Info <p>Full example available here</p>"},{"location":"tutorial/validations/#odmantic","title":"Odmantic","text":"<p>Validation of submitted data is handled seamlessly by Odmantic. Any data that you submit to your defined model will be validated automatically.</p> <p>Example</p> <pre><code>from typing import List, Optional\nfrom odmantic import EmbeddedModel, Field, Model\nfrom pydantic import EmailStr\nclass Address(EmbeddedModel):\nstreet: str = Field(min_length=3)\ncity: str = Field(min_length=3)\nstate: Optional[str]\nzipcode: Optional[str]\nclass Author(Model):\nfirst_name: str = Field(min_length=3)\nlast_name: str = Field(min_length=3)\nemail: Optional[EmailStr]\naddresses: List[Address] = Field(default_factory=list)\n</code></pre> <p></p> Info <p>Full example available here</p>"},{"location":"tutorial/validations/#mongoengine","title":"MongoEngine","text":"<p>The submitted data will be automatically validated according to your model definition.</p> <p>Example</p> <pre><code>import mongoengine as db\nclass Comment(db.EmbeddedDocument):\nname = db.StringField(min_length=3, max_length=20, required=True)\nvalue = db.StringField(max_length=20)\nclass Post(db.Document):\nname = db.StringField(max_length=20, required=True)\nvalue = db.StringField(max_length=20)\ninner = db.ListField(db.EmbeddedDocumentField(Comment))\nlols = db.ListField(db.StringField(max_length=20))\n</code></pre> <p></p> Info <p>Full example available here</p>"},{"location":"es/","title":"Visi\u00f3n General","text":"<p>Starlette-Admin es un r\u00e1pido, hermoso y extensible framework de interfaz administrativa para aplicaciones Starlette/FastAPI.</p> <p> </p>"},{"location":"es/#empezando","title":"Empezando","text":"<ul> <li>Revisa la documentaci\u00f3n.</li> <li>Prueba la demostraci\u00f3n en vivo. (C\u00f3digo fuente)</li> <li>Pruebe los varios ejemplos de uso incluidos en la carpeta /examples</li> </ul>"},{"location":"es/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>CRUD de cualquier dato con facilidad</li> <li>Validaci\u00f3n autom\u00e1tica de formularios</li> <li>Widget de tabla avanzado con Datatables</li> <li>B\u00fasqueda y filtrado</li> <li>Resaltado de b\u00fasqueda</li> <li>Ordenamiento multi columna</li> <li>Exportaci\u00f3n de datos a CSV/EXCEL/PDF e impresi\u00f3n con navegador</li> <li>Autenticaci\u00f3n</li> <li>Autorizaci\u00f3n</li> <li>Administrar archivos</li> <li>Vistas personalizadas</li> <li>ORMs compatibles<ul> <li>SQLAlchemy</li> <li>SQLModel</li> <li>MongoEngine</li> <li>ODMantic</li> </ul> </li> <li>Backend personalizado (doc, example)</li> </ul>"},{"location":"es/#instalacion","title":"Instalaci\u00f3n","text":""},{"location":"es/#ejemplo","title":"Ejemplo","text":"<p>Este es un ejemplo simple con el modelo SQLAlchemy</p> <p><pre><code>from sqlalchemy import Column, Integer, String, create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom starlette.applications import Starlette\nfrom starlette_admin.contrib.sqla import Admin, ModelView\nBase = declarative_base()\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\n# Define tu modelo\nclass Post(Base):\n__tablename__ = \"posts\"\nid = Column(Integer, primary_key=True)\ntitle = Column(String)\nBase.metadata.create_all(engine)\napp = Starlette()  # FastAPI()\n# Crear instancia de admin\nadmin = Admin(engine, title=\"Ejemplo: SQLAlchemy\")\n# Agregar vista\nadmin.add_view(ModelView(Post))\n# Montar admin a tu app\nadmin.mount_to(app)\n</code></pre> Acceda a su interfaz de administrador en su navegador en http://localhost:8000/admin</p>"},{"location":"es/#terceros","title":"Terceros","text":"<p>starlette-admin est\u00e1 construido con otros proyectos de c\u00f3digo abierto:</p> <ul> <li>Tabler</li> <li>Datatables</li> <li>jquery</li> <li>Select2</li> <li>flatpickr</li> <li>moment</li> <li>jsoneditor</li> <li>fontawesome</li> </ul>"},{"location":"es/advanced/base-model-view/","title":"Extending BaseModelView","text":"<p>Starlette-Admin  makes a few assumptions about the database models that it works with. If you want to implement your own database backend, and still have Starlette-Admin\u2019s model views work as expected, then you should take note of the following:</p> <ol> <li>Each model must have one field which acts as a primary key to uniquely identify instances of that model. However,    there are no restriction on the data type or the field name of the primary key field.</li> <li>Models must make their data accessible as python properties.</li> </ol> <p>If that is the case, then you can implement your own database backend by extending the [BaseModelView][starlette_admin.BaseModelView] class, and implementing the set of methods listed below.</p> <p>Let's say you've defined your models like this:</p> <pre><code>from dataclasses import dataclass\nfrom typing import List\n@dataclass\nclass Post:\nid: int\ntitle: str\ncontent: str\ntags: List[str]\n</code></pre> <p>First you need to define a new class, which derives from [BaseModelView][starlette_admin.views.BaseModelView].</p> <pre><code>from starlette_admin import BaseModelView\nclass PostView(BaseModelView):\npass\n</code></pre>"},{"location":"es/advanced/base-model-view/#fields","title":"Fields","text":"<p>Internally, Starlette-Admin  uses custom fields all inherit from [BaseField][starlette_admin.fields.BaseField] to represent each attribute. So, you need to choose the right field for each attribute or create a new field if needed. See [API Reference][starlette_admin.fields.BaseField] for full list of default fields.</p> <pre><code>from starlette_admin import BaseModelView\nfrom starlette_admin import IntegerField, StringField, TagsField, TextAreaField\nclass PostView(BaseModelView):\nfields = [\nIntegerField(\"id\"),\nStringField(\"title\"),\nTextAreaField(\"content\"),\nTagsField(\"tags\"),\n]\n</code></pre>"},{"location":"es/advanced/base-model-view/#crud-methods","title":"CRUD methods","text":"<p>Finally, you need to implement these CRUD methods:</p> <ul> <li>[count()][starlette_admin.BaseModelView.count]</li> <li>[find_all()][starlette_admin.BaseModelView.find_all]</li> <li>[create()][starlette_admin.BaseModelView.create]</li> <li>[edit()][starlette_admin.BaseModelView.edit]</li> <li>[delete()][starlette_admin.BaseModelView.delete]</li> </ul>"},{"location":"es/advanced/custom-field/","title":"Custom Field","text":"<p>Starlette-Admin has a lot of built-in [fields][starlette_admin.fields.BaseField] available. But you can override or create your own field according to your need.</p> <p>Important</p> <p>Before creating a new field, try first to extend the existing ones. They are flexible enough to fit most use cases.</p> <p>The first step is to define a new class, which derives from [BaseField][starlette_admin.fields.BaseField] or any others fields to customize it</p> <pre><code>from starlette_admin import BaseField\nfrom dataclasses import dataclass\n@dataclass\nclass CustomField(BaseField):\npass\n</code></pre>"},{"location":"es/api/actions/#starlette_admin.actions.action","title":"<code>starlette_admin.actions.action(name, text, confirmation=None, submit_btn_text=_('Yes, Proceed'), submit_btn_class='btn-primary', form=None, custom_response=False)</code>","text":"<p>Use this decorator to add custom actions to your [ModelView][starlette_admin.views.BaseModelView]</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>unique action name for your ModelView</p> required <code>text</code> <code>str</code> <p>Action text</p> required <code>confirmation</code> <code>Optional[str]</code> <p>Confirmation text. If not provided, action will be executed           unconditionally.</p> <code>None</code> <code>submit_btn_text</code> <code>Optional[str]</code> <p>Submit button text</p> <code>lazy_gettext('Yes, Proceed')</code> <code>submit_btn_class</code> <code>Optional[str]</code> <p>Submit button variant (ex. <code>button-primary</code>, <code>button-ghost-info</code>,     <code>btn-outline-danger</code>, ...)</p> <code>'btn-primary'</code> <code>form</code> <code>Optional[str]</code> <p>Custom form to collect data from user</p> <code>None</code> <code>custom_response</code> <code>Optional[bool]</code> <p>Set to True when you want to return a custom Starlette response from your action instead of a string.</p> <code>False</code> <p>Usage</p> <pre><code>class ArticleView(ModelView):\nactions = ['make_published', 'redirect']\n@action(\nname=\"make_published\",\ntext=\"Mark selected articles as published\",\nconfirmation=\"Are you sure you want to mark selected articles as published ?\",\nsubmit_btn_text=\"Yes, proceed\",\nsubmit_btn_class=\"btn-success\",\nform='''\n        &lt;form&gt;\n            &lt;div class=\"mt-3\"&gt;\n                &lt;input type=\"text\" class=\"form-control\" name=\"example-text-input\" placeholder=\"Enter value\"&gt;\n            &lt;/div&gt;\n        &lt;/form&gt;\n        '''\n)\nasync def make_published_action(self, request: Request, pks: List[Any]) -&gt; str:\n# Write your logic here\ndata: FormData =  await request.form()\nuser_input = data.get(\"example-text-input\")\nif ... :\n# Display meaningfully error\nraise ActionFailed(\"Sorry, We can't proceed this action now.\")\n# Display successfully message\nreturn \"{} articles were successfully marked as published\".format(len(pks))\n# For custom response\n@action(\nname=\"redirect\",\ntext=\"Redirect\",\ncustom_response=True,\nconfirmation=\"Fill the form\",\nform='''\n        &lt;form&gt;\n            &lt;div class=\"mt-3\"&gt;\n                &lt;input type=\"text\" class=\"form-control\" name=\"value\" placeholder=\"Enter value\"&gt;\n            &lt;/div&gt;\n        &lt;/form&gt;\n        '''\n)\nasync def redirect_action(self, request: Request, pks: List[Any]) -&gt; Response:\ndata = await request.form()\nreturn RedirectResponse(f\"https://example.com/?value={data['value']}\")\n</code></pre> Source code in <code>starlette_admin/actions.py</code> <pre><code>def action(\nname: str,\ntext: str,\nconfirmation: Optional[str] = None,\nsubmit_btn_text: Optional[str] = _(\"Yes, Proceed\"),\nsubmit_btn_class: Optional[str] = \"btn-primary\",\nform: Optional[str] = None,\ncustom_response: Optional[bool] = False,\n) -&gt; Callable[[Callable[..., Awaitable[str]]], Any]:\n\"\"\"\n    Use this decorator to add custom actions to your [ModelView][starlette_admin.views.BaseModelView]\n    Args:\n        name: unique action name for your ModelView\n        text: Action text\n        confirmation: Confirmation text. If not provided, action will be executed\n                      unconditionally.\n        submit_btn_text: Submit button text\n        submit_btn_class: Submit button variant (ex. `button-primary`, `button-ghost-info`,\n                `btn-outline-danger`, ...)\n        form: Custom form to collect data from user\n        custom_response: Set to True when you want to return a custom Starlette response\n            from your action instead of a string.\n    !!! usage\n        ```python\n        class ArticleView(ModelView):\n            actions = ['make_published', 'redirect']\n            @action(\n                name=\"make_published\",\n                text=\"Mark selected articles as published\",\n                confirmation=\"Are you sure you want to mark selected articles as published ?\",\n                submit_btn_text=\"Yes, proceed\",\n                submit_btn_class=\"btn-success\",\n                form='''\n                &lt;form&gt;\n                    &lt;div class=\"mt-3\"&gt;\n                        &lt;input type=\"text\" class=\"form-control\" name=\"example-text-input\" placeholder=\"Enter value\"&gt;\n                    &lt;/div&gt;\n                &lt;/form&gt;\n                '''\n            )\n            async def make_published_action(self, request: Request, pks: List[Any]) -&gt; str:\n                # Write your logic here\n                data: FormData =  await request.form()\n                user_input = data.get(\"example-text-input\")\n                if ... :\n                    # Display meaningfully error\n                    raise ActionFailed(\"Sorry, We can't proceed this action now.\")\n                # Display successfully message\n                return \"{} articles were successfully marked as published\".format(len(pks))\n            # For custom response\n            @action(\n                name=\"redirect\",\n                text=\"Redirect\",\n                custom_response=True,\n                confirmation=\"Fill the form\",\n                form='''\n                &lt;form&gt;\n                    &lt;div class=\"mt-3\"&gt;\n                        &lt;input type=\"text\" class=\"form-control\" name=\"value\" placeholder=\"Enter value\"&gt;\n                    &lt;/div&gt;\n                &lt;/form&gt;\n                '''\n             )\n            async def redirect_action(self, request: Request, pks: List[Any]) -&gt; Response:\n                data = await request.form()\n                return RedirectResponse(f\"https://example.com/?value={data['value']}\")\n        ```\n    \"\"\"\ndef wrap(f: Callable[..., Awaitable[str]]) -&gt; Callable[..., Awaitable[str]]:\nf._action = {  # type: ignore\n\"name\": name,\n\"text\": text,\n\"confirmation\": confirmation,\n\"submit_btn_text\": submit_btn_text,\n\"submit_btn_class\": submit_btn_class,\n\"form\": form if form is not None else \"\",\n\"custom_response\": custom_response,\n}\nreturn f\nreturn wrap\n</code></pre>"},{"location":"es/api/contrib/sqlalchemy/modelview/#starlette_admin.contrib.sqla.ModelView.get_count_query","title":"<code>get_count_query()</code>","text":"<p>Return a Select expression which is used as base statement for [count][starlette_admin.views.BaseModelView.count] method.</p> <p>Examples:</p> <pre><code>class PostView(ModelView):\ndef get_list_query(self):\nreturn super().get_list_query().where(Post.published == true())\ndef get_count_query(self):\nreturn super().get_count_query().where(Post.published == true())\n</code></pre> Source code in <code>starlette_admin/contrib/sqla/view.py</code> <pre><code>def get_count_query(self) -&gt; Select:\n\"\"\"\n    Return a Select expression which is used as base statement for\n    [count][starlette_admin.views.BaseModelView.count] method.\n    Examples:\n        ```python hl_lines=\"6-7\"\n        class PostView(ModelView):\n                def get_list_query(self):\n                    return super().get_list_query().where(Post.published == true())\n                def get_count_query(self):\n                    return super().get_count_query().where(Post.published == true())\n        ```\n    \"\"\"\nreturn select(func.count(self._pk_column))\n</code></pre>"},{"location":"es/api/contrib/sqlalchemy/modelview/#starlette_admin.contrib.sqla.ModelView.get_list_query","title":"<code>get_list_query()</code>","text":"<p>Return a Select expression which is used as base statement for [find_all][starlette_admin.views.BaseModelView.find_all] method.</p> <p>Examples:</p> <pre><code>class PostView(ModelView):\ndef get_list_query(self):\nreturn super().get_list_query().where(Post.published == true())\ndef get_count_query(self):\nreturn super().get_count_query().where(Post.published == true())\n</code></pre> <p>If you override this method, don't forget to also override [get_count_query][starlette_admin.contrib.sqla.ModelView.get_count_query], for displaying the correct item count in the list view.</p> Source code in <code>starlette_admin/contrib/sqla/view.py</code> <pre><code>def get_list_query(self) -&gt; Select:\n\"\"\"\n    Return a Select expression which is used as base statement for\n    [find_all][starlette_admin.views.BaseModelView.find_all] method.\n    Examples:\n        ```python  hl_lines=\"3-4\"\n        class PostView(ModelView):\n                def get_list_query(self):\n                    return super().get_list_query().where(Post.published == true())\n                def get_count_query(self):\n                    return super().get_count_query().where(Post.published == true())\n        ```\n    If you override this method, don't forget to also override\n    [get_count_query][starlette_admin.contrib.sqla.ModelView.get_count_query],\n    for displaying the correct item count in the list view.\n    \"\"\"\nreturn select(self.model)\n</code></pre>"},{"location":"es/api/fields/#starlette_admin.fields.TextAreaField","title":"<code>starlette_admin.fields.TextAreaField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>StringField</code></p> <p>This field is used to represent any kind of long text content. For short text contents, use [StringField][starlette_admin.fields.StringField]</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass TextAreaField(StringField):\n\"\"\"This field is used to represent any kind of long text content.\n    For short text contents, use [StringField][starlette_admin.fields.StringField]\"\"\"\nrows: int = 6\nclass_: str = \"field-textarea form-control\"\nform_template: str = \"forms/textarea.html\"\ndisplay_template: str = \"displays/textarea.html\"\ndef input_params(self) -&gt; str:\nreturn html_params(\n{\n\"rows\": self.rows,\n\"minlength\": self.minlength,\n\"maxlength\": self.maxlength,\n\"placeholder\": self.placeholder,\n\"required\": self.required,\n\"disabled\": self.disabled,\n\"readonly\": self.read_only,\n}\n)\n</code></pre>"},{"location":"es/api/fields/#starlette_admin.fields.TinyMCEEditorField","title":"<code>starlette_admin.fields.TinyMCEEditorField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>TextAreaField</code></p> <p>A field that provides a WYSIWYG editor for long text content using the  TinyMCE library.</p> <p>This field can be used as an alternative to the [TextAreaField][starlette_admin.fields.TextAreaField] to provide a more sophisticated editor for user input.</p> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass TinyMCEEditorField(TextAreaField):\n\"\"\"A field that provides a WYSIWYG editor for long text content using the\n     [TinyMCE](https://www.tiny.cloud/) library.\n    This field can be used as an alternative to the [TextAreaField][starlette_admin.fields.TextAreaField]\n    to provide a more sophisticated editor for user input.\n    \"\"\"\nclass_: str = \"field-tinymce-editor form-control\"\ndisplay_template: str = \"displays/tinymce.html\"\ndef additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\nif action.is_form():\nreturn [\n\"https://cdn.jsdelivr.net/npm/tinymce@6.4/tinymce.min.js\",\n\"https://cdn.jsdelivr.net/npm/@tinymce/tinymce-jquery@2.0/dist/tinymce-jquery.min.js\",\n]\nreturn []\n</code></pre>"},{"location":"es/api/fields/#starlette_admin.fields.RelationField","title":"<code>starlette_admin.fields.RelationField</code>  <code>dataclass</code>","text":"<p>             Bases: <code>BaseField</code></p> <p>A field representing a relation between two data models.</p> <p>This field should not be used directly; instead, use either the [HasOne][starlette_admin.fields.HasOne] or [HasMany][starlette_admin.fields.HasMany] fields to specify a relation between your models.</p> <p>Important</p> <p>It is important to add both models in your admin interface.</p> <p>Parameters:</p> Name Type Description Default <code>identity</code> <code>Optional[str]</code> <p>Foreign ModelView identity</p> <code>None</code> Example <pre><code>class Author:\nid: Optional[int]\nname: str\nbooks: List[\"Book\"]\nclass Book:\nid: Optional[int]\ntitle: str\nauthor: Optional[\"Author\"]\nclass AuthorView(ModelView):\nfields = [\nIntegerField(\"id\"),\nStringField(\"name\"),\nHasMany(\"books\", identity=\"book\"),\n]\nclass BookView(ModelView):\nfields = [\nIntegerField(\"id\"),\nStringField(\"title\"),\nHasOne(\"author\", identity=\"author\"),\n]\n...\nadmin.add_view(AuthorView(Author, identity=\"author\"))\nadmin.add_view(BookView(Book, identity=\"book\"))\n...\n</code></pre> Source code in <code>starlette_admin/fields.py</code> <pre><code>@dataclass\nclass RelationField(BaseField):\n\"\"\"\n    A field representing a relation between two data models.\n    This field should not be used directly; instead, use either the [HasOne][starlette_admin.fields.HasOne]\n    or [HasMany][starlette_admin.fields.HasMany] fields to specify a relation\n    between your models.\n    !!! important\n        It is important to add both models in your admin interface.\n    Parameters:\n        identity: Foreign ModelView identity\n    ??? Example\n        ```py\n        class Author:\n            id: Optional[int]\n            name: str\n            books: List[\"Book\"]\n        class Book:\n            id: Optional[int]\n            title: str\n            author: Optional[\"Author\"]\n        class AuthorView(ModelView):\n            fields = [\n                IntegerField(\"id\"),\n                StringField(\"name\"),\n                HasMany(\"books\", identity=\"book\"),\n            ]\n        class BookView(ModelView):\n            fields = [\n                IntegerField(\"id\"),\n                StringField(\"title\"),\n                HasOne(\"author\", identity=\"author\"),\n            ]\n        ...\n        admin.add_view(AuthorView(Author, identity=\"author\"))\n        admin.add_view(BookView(Book, identity=\"book\"))\n        ...\n        ```\n    \"\"\"\nidentity: Optional[str] = None\nmultiple: bool = False\nrender_function_key: str = \"relation\"\nform_template: str = \"forms/relation.html\"\ndisplay_template: str = \"displays/relation.html\"\nasync def parse_form_data(\nself, request: Request, form_data: FormData, action: RequestAction\n) -&gt; Any:\nif self.multiple:\nreturn form_data.getlist(self.id)\nreturn form_data.get(self.id)\ndef additional_css_links(\nself, request: Request, action: RequestAction\n) -&gt; List[str]:\nif action.is_form():\nreturn [\nstr(\nrequest.url_for(\nf\"{request.app.state.ROUTE_NAME}:statics\",\npath=\"css/select2.min.css\",\n)\n)\n]\nreturn []\ndef additional_js_links(self, request: Request, action: RequestAction) -&gt; List[str]:\nif action.is_form():\nreturn [\nstr(\nrequest.url_for(\nf\"{request.app.state.ROUTE_NAME}:statics\",\npath=\"js/vendor/select2.min.js\",\n)\n)\n]\nreturn []\n</code></pre>"},{"location":"es/changelog/#added_5","title":"Added","text":"<ul> <li>Add extension to autovalidate SQLAlchemy data with pydantic by @jowilf   in #144</li> <li>Make <code>_extract_fields()</code> method in BaseModelView public and renamed   to [get_fields_list()][starlette_admin.views.BaseModelView.get_fields_list] by @jowilf   in #148</li> <li>Add support for custom object representations in the admin interface with <code>__admin_repr__</code>   and <code>__admin_select2_repr__</code>  by @jowilf   in #152. The documentation can be   found here</li> </ul>"},{"location":"es/changelog/#added_6","title":"Added","text":"<ul> <li>Allow custom form for batch actions by @giaptx and @jowilf   in #61</li> <li>Add [TinyMCEEditorField][starlette_admin.fields.TinyMCEEditorField] by @sinisaos   and @jowilf   in #131</li> </ul>"},{"location":"es/changelog/#added_7","title":"Added","text":"<ul> <li>Setup i18n and Add French translations by @jowilf in #74</li> <li>Add [TimeZoneField][starlette_admin.fields.TimeZoneField], [CountryField][starlette_admin.fields.CountryField], [CurrencyField][starlette_admin.fields.CurrencyField] &amp; [ArrowField][starlette_admin.fields.ArrowField]</li> <li>Add support for sqlalchemy_utils data types</li> <li>Add SQLAlchemy 2 support by  @jowilf in #113</li> <li>Add support for initial order (sort) to apply to the table by @jowilf in #115</li> </ul> <p>Usage</p> <pre><code>class User:\nid: int\nlast_name: str\nfirst_name: str\nclass UserView(ModelView):\nfields_default_sort = [\"last_name\", (\"first_name\", True)]\nadmin.add_view(UserView(User))\n</code></pre>"},{"location":"es/changelog/#fixed_9","title":"Fixed","text":"<ul> <li>Fix Bug with <code>search_format</code> params for [DateField][starlette_admin.fields.DateField] and [TimeField][starlette_admin.fields.TimeField] by @jowilf &amp; @ihuro in #68 &amp; #71</li> </ul>"},{"location":"es/changelog/#added_9","title":"Added","text":"<ul> <li>Introduce [<code>AdminUser</code>][starlette_admin.auth.AuthProvider.get_admin_user] and add navbar to show the current [<code>AdminUser</code>][starlette_admin.auth.AuthProvider.get_admin_user] information (<code>username</code> and <code>photo</code>) by @jowilf in #49</li> </ul>"},{"location":"es/tutorial/authentication/","title":"Authentication &amp; Authorization","text":"<p>To protect your admin interface from unwanted users, you can create an Authentication Provider by extending the [AuthProvider][starlette_admin.auth.AuthProvider] class and set <code>auth_provider</code> when declaring your admin app</p>"},{"location":"es/tutorial/authentication/#username-and-password-authentication","title":"Username and Password Authentication","text":"<p>By default, [AuthProvider][starlette_admin.auth.AuthProvider] provides a login form with <code>username</code> and <code>password</code> fields for basic username and password authentication. To fully support this authentication method, you need to implement the following methods in your custom Authentication Provider:</p> <ul> <li>[is_authenticated][starlette_admin.auth.BaseAuthProvider.is_authenticated]: This method will be called to validate   each incoming request.</li> <li>[get_admin_user][starlette_admin.auth.BaseAuthProvider.get_admin_user]: Return connected user <code>name</code> and/or <code>profile</code></li> <li>[login][starlette_admin.auth.AuthProvider.login]: will be called to validate user credentials.</li> <li>[logout][starlette_admin.auth.AuthProvider.logout]: Will be called to logout (clear sessions, cookies, ...)</li> </ul> <pre><code>from starlette.requests import Request\nfrom starlette.responses import Response\nfrom starlette_admin.auth import AdminUser, AuthProvider\nfrom starlette_admin.exceptions import FormValidationError, LoginFailed\nusers = {\n\"admin\": {\n\"name\": \"Admin\",\n\"avatar\": \"admin.png\",\n\"roles\": [\"read\", \"create\", \"edit\", \"delete\", \"action_make_published\"],\n},\n\"johndoe\": {\n\"name\": \"John Doe\",\n\"avatar\": None, # user avatar is optional\n\"roles\": [\"read\", \"create\", \"edit\", \"action_make_published\"],\n},\n\"viewer\": {\"name\": \"Viewer\", \"avatar\": \"guest.png\", \"roles\": [\"read\"]},\n}\nclass UsernameAndPasswordProvider(AuthProvider):\n\"\"\"\n    This is only for demo purpose, it's not a better\n    way to save and validate user credentials\n    \"\"\"\nasync def login(\nself,\nusername: str,\npassword: str,\nremember_me: bool,\nrequest: Request,\nresponse: Response,\n) -&gt; Response:\nif len(username) &lt; 3:\n\"\"\"Form data validation\"\"\"\nraise FormValidationError(\n{\"username\": \"Ensure username has at least 03 characters\"}\n)\nif username in users and password == \"password\":\n\"\"\"Save `username` in session\"\"\"\nrequest.session.update({\"username\": username})\nreturn response\nraise LoginFailed(\"Invalid username or password\")\nasync def is_authenticated(self, request) -&gt; bool:\nif request.session.get(\"username\", None) in users:\n\"\"\"\n            Save current `user` object in the request state. Can be used later\n            to restrict access to connected user.\n            \"\"\"\nrequest.state.user = users.get(request.session[\"username\"])\nreturn True\nreturn False\ndef get_admin_user(self, request: Request) -&gt; AdminUser:\nuser = request.state.user  # Retrieve current user\nphoto_url = None\nif user[\"avatar\"] is not None:\nphoto_url = request.url_for(\"static\", path=user[\"avatar\"])\nreturn AdminUser(username=user[\"name\"], photo_url=photo_url)\nasync def logout(self, request: Request, response: Response) -&gt; Response:\nrequest.session.clear()\nreturn response\n</code></pre> <p>For a working example, have a look at <code>https://github.com/jowilf/starlette-admin/tree/main/examples/auth</code></p>"},{"location":"es/tutorial/authentication/#custom-authentication-flow-oauth2oidc","title":"Custom Authentication flow (OAuth2/OIDC, ...)","text":"<p>If you prefer to use a custom authentication flow, such as OAuth2 or OIDC, you can implement the following methods in your custom Authentication Provider:</p> <ul> <li>[is_authenticated][starlette_admin.auth.BaseAuthProvider.is_authenticated]: This method will be called to validate each incoming request.</li> <li>[get_admin_user][starlette_admin.auth.BaseAuthProvider.get_admin_user]: Return connected user <code>name</code> and/or <code>profile</code></li> <li>[render_login][starlette_admin.auth.AuthProvider.render_login]: Override the default behavior to render a custom login page.</li> <li>[render_logout][starlette_admin.auth.AuthProvider.render_logout]: Implement the custom logout logic.</li> </ul> <p>Additionally, you can override these methods depending on your needs:</p> <ul> <li>[get_middleware][starlette_admin.auth.BaseAuthProvider.get_middleware]: To provide a custom authentication middleware   for the admin interface</li> <li>[setup_admin][starlette_admin.auth.BaseAuthProvider.setup_admin]: This method is called during the setup process of   the admin interface and allows for custom configuration and setup.</li> </ul> <pre><code>from typing import Optional\nfrom starlette.datastructures import URL\nfrom starlette.middleware import Middleware\nfrom starlette.requests import Request\nfrom starlette.responses import RedirectResponse, Response\nfrom starlette.routing import Route\nfrom starlette_admin import BaseAdmin\nfrom starlette_admin.auth import AdminUser, AuthMiddleware, AuthProvider\nfrom authlib.integrations.starlette_client import OAuth\nfrom .config import AUTH0_CLIENT_ID, AUTH0_CLIENT_SECRET, AUTH0_DOMAIN\noauth = OAuth()\noauth.register(\n\"auth0\",\nclient_id=AUTH0_CLIENT_ID,\nclient_secret=AUTH0_CLIENT_SECRET,\nclient_kwargs={\n\"scope\": \"openid profile email\",\n},\nserver_metadata_url=f\"https://{AUTH0_DOMAIN}/.well-known/openid-configuration\",\n)\nclass MyAuthProvider(AuthProvider):\nasync def is_authenticated(self, request: Request) -&gt; bool:\nif request.session.get(\"user\", None) is not None:\nrequest.state.user = request.session.get(\"user\")\nreturn True\nreturn False\ndef get_admin_user(self, request: Request) -&gt; Optional[AdminUser]:\nuser = request.state.user\nreturn AdminUser(\nusername=user[\"name\"],\nphoto_url=user[\"picture\"],\n)\nasync def render_login(self, request: Request, admin: BaseAdmin):\n\"\"\"Override the default login behavior to implement custom logic.\"\"\"\nauth0 = oauth.create_client(\"auth0\")\nredirect_uri = request.url_for(\nadmin.route_name + \":authorize_auth0\"\n).include_query_params(next=request.query_params.get(\"next\"))\nreturn await auth0.authorize_redirect(request, str(redirect_uri))\nasync def render_logout(self, request: Request, admin: BaseAdmin) -&gt; Response:\n\"\"\"Override the default logout to implement custom logic\"\"\"\nrequest.session.clear()\nreturn RedirectResponse(\nurl=URL(f\"https://{AUTH0_DOMAIN}/v2/logout\").include_query_params(\nreturnTo=request.url_for(admin.route_name + \":index\"),\nclient_id=AUTH0_CLIENT_ID,\n)\n)\nasync def handle_auth_callback(self, request: Request):\nauth0 = oauth.create_client(\"auth0\")\ntoken = await auth0.authorize_access_token(request)\nrequest.session.update({\"user\": token[\"userinfo\"]})\nreturn RedirectResponse(request.query_params.get(\"next\"))\ndef setup_admin(self, admin: \"BaseAdmin\"):\nsuper().setup_admin(admin)\n\"\"\"add custom authentication callback route\"\"\"\nadmin.routes.append(\nRoute(\n\"/auth0/authorize\",\nself.handle_auth_callback,\nmethods=[\"GET\"],\nname=\"authorize_auth0\",\n)\n)\ndef get_middleware(self, admin: \"BaseAdmin\") -&gt; Middleware:\nreturn Middleware(\nAuthMiddleware, provider=self, allow_paths=[\"/auth0/authorize\"]\n)\n</code></pre> <p>For a working example, have a look at <code>https://github.com/jowilf/starlette-admin/tree/main/examples/authlib</code></p> <p>The AuthProvider can be added at your admin interface as follows:</p> <pre><code>admin = Admin(\nengine,\ntitle=\"Example: Authentication\",\nauth_provider=MyAuthProvider(),\nmiddlewares=[Middleware(SessionMiddleware, secret_key=SECRET)],\n)\n</code></pre>"},{"location":"es/tutorial/authentication/#for-all-views","title":"For all views","text":"<p>Each [view][starlette_admin.views.BaseView] implement [is_accessible][starlette_admin.views.BaseView.is_accessible] method which can be used to restrict access to current user.</p> <pre><code>from starlette_admin import CustomView\nfrom starlette.requests import Request\nclass ReportView(CustomView):\ndef is_accessible(self, request: Request) -&gt; bool:\nreturn \"admin\" in request.state.user[\"roles\"]\n</code></pre> <p>Important</p> <p>When view is inaccessible, it does not appear in menu structure</p>"},{"location":"es/tutorial/authentication/#for-modelviewstarlette_adminviewsbasemodelview","title":"For [ModelView][starlette_admin.views.BaseModelView]","text":"<p>In [ModelView][starlette_admin.views.BaseModelView], there is four additional methods you can override to restrict access to current user.</p> <ul> <li><code>can_view_details</code>: Permission for viewing full details of Items</li> <li><code>can_create</code>: Permission for creating new Items</li> <li><code>can_edit</code>: Permission for editing Items</li> <li><code>can_delete</code>: Permission for deleting Items</li> <li><code>is_action_allowed</code>:  verify if action with <code>name</code> is allowed.</li> </ul> <pre><code>from starlette_admin.contrib.sqla import ModelView\nfrom starlette.requests import Request\nfrom starlette_admin import action\nclass ArticleView(ModelView):\nexclude_fields_from_list = [Article.body]\ndef can_view_details(self, request: Request) -&gt; bool:\nreturn \"read\" in request.state.user[\"roles\"]\ndef can_create(self, request: Request) -&gt; bool:\nreturn \"create\" in request.state.user[\"roles\"]\ndef can_edit(self, request: Request) -&gt; bool:\nreturn \"edit\" in request.state.user[\"roles\"]\ndef can_delete(self, request: Request) -&gt; bool:\nreturn \"delete\" in request.state.user[\"roles\"]\nasync def is_action_allowed(self, request: Request, name: str) -&gt; bool:\nif name == \"make_published\":\nreturn \"action_make_published\" in request.state.user[\"roles\"]\nreturn await super().is_action_allowed(request, name)\n@action(\nname=\"make_published\",\ntext=\"Mark selected articles as published\",\nconfirmation=\"Are you sure you want to mark selected articles as published ?\",\nsubmit_btn_text=\"Yes, proceed\",\nsubmit_btn_class=\"btn-success\",\n)\nasync def make_published_action(self, request: Request, pks: List[Any]) -&gt; str:\n...\nreturn \"{} articles were successfully marked as published\".format(len(pks))\n</code></pre>"},{"location":"es/tutorial/batch-actions/","title":"Batch Actions","text":"<p>By default, to update an object, you must select it in the list page and update it. This works well for a majority of use cases. However, if you need to make the same change to many objects at once, this workflow can be quite tedious.</p> <p>In these cases, you can write a custom batch action to bulk update many objects at once.</p> <p>Note</p> <p>starlette-admin add by default an action to delete many object at once</p> <p>To add other batch actions to your [ModelView][starlette_admin.views.BaseModelView], besides the default delete action, you can define a function that implements the desired logic and wrap it with the [@action][starlette_admin.actions.action] decorator (Heavily inspired by Flask-Admin).</p>"},{"location":"es/tutorial/configurations/modelview/","title":"ModelView Configurations","text":"<p>There are multiple options available to customize your ModelView. For a complete list, please refer to the API documentation for [BaseModelView()][starlette_admin.views.BaseModelView].</p> <p>Here are some of the most commonly used options:</p>"},{"location":"es/tutorial/configurations/modelview/#exclusions","title":"Exclusions","text":"<p>There are several options available for customizing which fields are displayed in different parts of the admin view. These options include:</p> <ul> <li><code>exclude_fields_from_list</code>: List of fields to exclude from the List page.</li> <li><code>exclude_fields_from_detail</code>: List of fields to exclude from the Detail page.</li> <li><code>exclude_fields_from_create</code>: List of fields to exclude from the creation page.</li> <li><code>exclude_fields_from_edit</code>: List of fields to exclude from the editing page.\\</li> </ul> <pre><code>class PostView(ModelView):\nexclude_fields_from_list = [Post.content, Post.tags]\n</code></pre> <p>Note</p> <p>For more advanced use cases, you can override the [ModelView.get_fields_list()][starlette_admin.views.BaseModelView.get_fields_list] function.</p>"},{"location":"es/tutorial/getting-started/#customview","title":"CustomView","text":"<p>With [CustomView][starlette_admin.views.CustomView] you can add your own views (not tied to any particular model). For example, a custom home page that displays some analytics data.</p> <pre><code>from starlette_admin import CustomView\nadmin.add_view(CustomView(label=\"Home\", icon=\"fa fa-home\", path=\"/home\", template_path=\"home.html\"))\n</code></pre> <p>To have a full control of the rendering, override the <code>render</code> methods</p> <pre><code>from starlette.requests import Request\nfrom starlette.responses import Response\nfrom starlette.templating import Jinja2Templates\nfrom starlette_admin import CustomView\nclass HomeView(CustomView):\nasync def render(self, request: Request, templates: Jinja2Templates) -&gt; Response:\nreturn templates.TemplateResponse(\n\"home.html\", {\"request\": request, \"latest_posts\": ..., \"top_users\": ...}\n)\nadmin.add_view(HomeView(label=\"Home\", icon=\"fa fa-home\", path=\"/home\"))\n</code></pre>"},{"location":"es/tutorial/getting-started/#link","title":"Link","text":"<p>Use [Link][starlette_admin.views.Link] to add arbitrary hyperlinks to the menu</p> <pre><code>from starlette_admin.views import Link\nadmin.add_view(Link(label=\"Home Page\", icon=\"fa fa-link\", url=\"/\"))\n</code></pre>"},{"location":"es/tutorial/getting-started/#dropdown","title":"DropDown","text":"<p>Use [DropDown][starlette_admin.views.DropDown] to group views together in menu structure</p> <pre><code>from starlette_admin import CustomView, DropDown\nfrom starlette_admin.contrib.sqla import ModelView\nfrom starlette_admin.views import Link\nfrom .models import User\nadmin.add_view(\nDropDown(\n\"Resources\",\nicon=\"fa fa-list\",\nviews=[\nModelView(User),\nLink(label=\"Home Page\", url=\"/\"),\nCustomView(label=\"Dashboard\", path=\"/dashboard\", template_path=\"dashboard.html\"),\n],\n)\n)\n</code></pre>"}]}